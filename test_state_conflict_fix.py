#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —Å—Ç–∞–Ω—ñ–≤ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
"""

import sys
import os
import asyncio
from unittest.mock import Mock, AsyncMock
import logging

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from handlers.message_handler import handle_text_message
from database.models import User

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_state_conflict_scenarios():
    """–¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —Å—Ç–∞–Ω—ñ–≤"""
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —Å—Ç–∞–Ω—ñ–≤")
    print("=" * 50)
    
    test_scenarios = [
        {
            "name": "–°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫",
            "user_setup_completed": True,
            "context_data": {
                "setup_step": "balance",  # –ö–æ–Ω—Ñ–ª—ñ–∫—Ç! 
                "awaiting_account_balance": True,
                "account_creation": {
                    "name": "–¢–µ—Å—Ç–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
                    "icon": "üí≥"
                }
            },
            "input_text": "1500",
            "expected_handler": "accounts_handler",
            "description": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –∞–ª–µ —è–∫–∏–º–æ—Å—å —á–∏–Ω–æ–º –º–∞—î setup_step='balance'"
        },
        {
            "name": "–°—Ü–µ–Ω–∞—Ä—ñ–π 2: –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –ø–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            "user_setup_completed": False,
            "context_data": {
                "setup_step": "balance"
            },
            "input_text": "5000",
            "expected_handler": "setup_callbacks",
            "description": "–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
        },
        {
            "name": "–°—Ü–µ–Ω–∞—Ä—ñ–π 3: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π, —Ç—ñ–ª—å–∫–∏ account_balance",
            "user_setup_completed": True,
            "context_data": {
                "awaiting_account_balance": True,
                "account_creation": {
                    "name": "–ù–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
                    "icon": "üè¶"
                }
            },
            "input_text": "2500",
            "expected_handler": "accounts_handler",
            "description": "–ß–∏—Å—Ç–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤"
        }
    ]
    
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüìã {scenario['name']}")
        print(f"   –û–ø–∏—Å: {scenario['description']}")
        print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π: {scenario['user_setup_completed']}")
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {scenario['context_data']}")
        print(f"   –í–≤—ñ–¥: '{scenario['input_text']}'")
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
            update = Mock()
            update.effective_user.id = 12345
            update.message.text = scenario['input_text']
            update.message.reply_text = AsyncMock()
            
            context = Mock()
            context.user_data = scenario['context_data'].copy()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            mock_user = Mock()
            mock_user.id = 1
            mock_user.telegram_id = 12345
            mock_user.is_setup_completed = scenario['user_setup_completed']
            mock_user.setup_step = 'completed' if scenario['user_setup_completed'] else 'start'
            mock_user.currency = 'UAH'
            
            # –ú–æ–∫–∞—î–º–æ get_user
            import handlers.message_handler
            original_get_user = handlers.message_handler.get_user
            handlers.message_handler.get_user = Mock(return_value=mock_user)
            
            # –ú–æ–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            process_initial_balance_called = False
            handle_account_text_input_called = False
            
            async def mock_process_initial_balance(update, context):
                nonlocal process_initial_balance_called
                process_initial_balance_called = True
                logger.info("process_initial_balance –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
            
            async def mock_handle_account_text_input(message, context):
                nonlocal handle_account_text_input_called
                handle_account_text_input_called = True
                logger.info("handle_account_text_input –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
                return True
            
            # –ü–∞—Ç—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
            import handlers.setup_callbacks
            import handlers.accounts_handler
            
            original_process_initial_balance = handlers.setup_callbacks.process_initial_balance
            original_handle_account_text_input = handlers.accounts_handler.handle_account_text_input
            
            handlers.setup_callbacks.process_initial_balance = mock_process_initial_balance
            handlers.accounts_handler.handle_account_text_input = mock_handle_account_text_input
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
            await handle_text_message(update, context)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            print(f"   –°—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏:")
            print(f"     - setup_step —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ: {context.user_data.get('setup_step', '–í—ñ–¥—Å—É—Ç–Ω—ñ–π')}")
            print(f"     - awaiting_account_balance: {context.user_data.get('awaiting_account_balance', False)}")
            print(f"     - process_initial_balance –≤–∏–∫–ª–∏–∫–∞–Ω–æ: {process_initial_balance_called}")
            print(f"     - handle_account_text_input –≤–∏–∫–ª–∏–∫–∞–Ω–æ: {handle_account_text_input_called}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            if scenario['expected_handler'] == 'setup_callbacks':
                if process_initial_balance_called:
                    print("   ‚úÖ –ü–†–û–ô–®–û–í: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ setup_callbacks")
                else:
                    print("   ‚ùå –ü–†–û–í–ê–õ–ï–ù–û: –û—á—ñ–∫—É–≤–∞–≤—Å—è setup_callbacks")
            elif scenario['expected_handler'] == 'accounts_handler':
                if handle_account_text_input_called:
                    print("   ‚úÖ –ü–†–û–ô–®–û–í: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ accounts_handler")
                else:
                    print("   ‚ùå –ü–†–û–í–ê–õ–ï–ù–û: –û—á—ñ–∫—É–≤–∞–≤—Å—è accounts_handler")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á–∏—â–µ–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç
            if (scenario['user_setup_completed'] and 
                'setup_step' in scenario['context_data'] and
                scenario['context_data']['setup_step'] == 'balance'):
                if 'setup_step' not in context.user_data:
                    print("   ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏–π setup_step –æ—á–∏—â–µ–Ω–æ")
                else:
                    print("   ‚ùå –ü–û–ú–ò–õ–ö–ê: –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏–π setup_step –Ω–µ –æ—á–∏—â–µ–Ω–æ")
            
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            handlers.message_handler.get_user = original_get_user
            handlers.setup_callbacks.process_initial_balance = original_process_initial_balance
            handlers.accounts_handler.handle_account_text_input = original_handle_account_text_input
            
        except Exception as e:
            print(f"   ‚ùå –ü–û–ú–ò–õ–ö–ê: {str(e)}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "=" * 50)
    print("üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def main():
    await test_state_conflict_scenarios()

if __name__ == "__main__":
    asyncio.run(main())
