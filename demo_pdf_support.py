#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF –≤–∏–ø–∏—Å–æ–∫ –∑ Monobank
"""

import sys
import os
sys.path.insert(0, '/Users/abobina/telegram_bot/FinAssistAI-bot')

from services.statement_parser import StatementParser
import pdfplumber
from datetime import datetime

def demo_pdf_parsing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è PDF –ø–∞—Ä—Å–∏–Ω–≥—É –¥–ª—è Monobank"""
    print("=" * 80)
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF –≤–∏–ø–∏—Å–æ–∫ –∑ –ú–æ–Ω–æ–ë–∞–Ω–∫—É")
    print("=" * 80)
    
    pdf_file = "/Users/abobina/telegram_bot/FinAssistAI-bot/uploads/statements/report_20-06-2025_16-12-03.pdf"
    
    if not os.path.exists(pdf_file):
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {pdf_file}")
        return
    
    print(f"üìÑ –§–∞–π–ª: {os.path.basename(pdf_file)}")
    print(f"üìä –†–æ–∑–º—ñ—Ä: {os.path.getsize(pdf_file) / 1024:.1f} KB")
    
    # –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ PDF
    print("\nüîç –ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò PDF:")
    try:
        with pdfplumber.open(pdf_file) as pdf:
            print(f"   üìñ –°—Ç–æ—Ä—ñ–Ω–æ–∫: {len(pdf.pages)}")
            
            for i, page in enumerate(pdf.pages):
                tables = page.extract_tables()
                text_lines = len([line.strip() for line in (page.extract_text() or "").split('\n') if line.strip()])
                print(f"   üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {i+1}: {len(tables)} —Ç–∞–±–ª–∏—Ü—å, {text_lines} —Ä—è–¥–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    print("\n‚öôÔ∏è –ü–ê–†–°–ò–ù–ì –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô:")
    try:
        parser = StatementParser()
        start_time = datetime.now()
        
        transactions = parser.parse_bank_statement(pdf_file, bank_type='monobank')
        
        end_time = datetime.now()
        processing_time = (end_time - start_time).total_seconds()
        
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   üìà –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(transactions)}")
        
        if not transactions:
            print("   ‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        income_transactions = [t for t in transactions if t['type'] == 'income']
        expense_transactions = [t for t in transactions if t['type'] == 'expense']
        
        total_income = sum(t['amount'] for t in income_transactions)
        total_expense = sum(t['amount'] for t in expense_transactions)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üí∞ –î–æ—Ö–æ–¥–∏: {len(income_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—É–º—É {total_income:.2f} –≥—Ä–Ω")
        print(f"   üí∏ –í–∏—Ç—Ä–∞—Ç–∏: {len(expense_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—É–º—É {total_expense:.2f} –≥—Ä–Ω")
        print(f"   üíµ –ë–∞–ª–∞–Ω—Å: {total_income - total_expense:.2f} –≥—Ä–Ω")
        
        # –ù–∞–π–±—ñ–ª—å—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        print(f"\nüîù –¢–û–ü-3 –ù–ê–ô–ë–Ü–õ–¨–®–Ü –¢–†–ê–ù–ó–ê–ö–¶–Ü–á:")
        sorted_transactions = sorted(transactions, key=lambda x: x['amount'], reverse=True)
        for i, transaction in enumerate(sorted_transactions[:3], 1):
            type_icon = "üí∞" if transaction['type'] == 'income' else "üí∏"
            print(f"   {i}. {type_icon} {transaction['amount']:.2f} –≥—Ä–Ω - {transaction['description']} ({transaction['date']})")
        
        # –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        print(f"\nüìÖ –û–°–¢–ê–ù–ù–Ü 5 –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô:")
        sorted_by_date = sorted(transactions, key=lambda x: x['date'], reverse=True)
        for i, transaction in enumerate(sorted_by_date[:5], 1):
            type_icon = "üí∞" if transaction['type'] == 'income' else "üí∏"
            print(f"   {i}. {transaction['date']} {transaction.get('time', '00:00:00')} - {type_icon} {transaction['amount']:.2f} –≥—Ä–Ω")
            print(f"      üìù {transaction['description']}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        print(f"\nüè∑Ô∏è –¢–ò–ü–ò –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô:")
        expense_descriptions = [t['description'] for t in expense_transactions]
        income_descriptions = [t['description'] for t in income_transactions]
        
        # –ß–∞—Å—Ç–æ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –≤–∏—Ç—Ä–∞—Ç–∏
        expense_keywords = {}
        for desc in expense_descriptions:
            for word in desc.lower().split():
                if len(word) > 3:
                    expense_keywords[word] = expense_keywords.get(word, 0) + 1
        
        if expense_keywords:
            top_expense_keywords = sorted(expense_keywords.items(), key=lambda x: x[1], reverse=True)[:3]
            print(f"   üí∏ –ß–∞—Å—Ç—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {', '.join([f'{k}({v})' for k, v in top_expense_keywords])}")
        
        # –î–∂–µ—Ä–µ–ª–∞ –¥–æ—Ö–æ–¥—ñ–≤
        income_keywords = {}
        for desc in income_descriptions:
            for word in desc.lower().split():
                if len(word) > 3:
                    income_keywords[word] = income_keywords.get(word, 0) + 1
        
        if income_keywords:
            top_income_keywords = sorted(income_keywords.items(), key=lambda x: x[1], reverse=True)[:3]
            print(f"   üí∞ –î–∂–µ—Ä–µ–ª–∞ –¥–æ—Ö–æ–¥—É: {', '.join([f'{k}({v})' for k, v in top_income_keywords])}")
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        import traceback
        traceback.print_exc()

def demo_bot_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –±–æ—Ç–æ–º"""
    print("\n" + "=" * 80)
    print("ü§ñ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –ó –ë–û–¢–û–ú")
    print("=" * 80)
    
    print("üì± –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –Ω–æ–≤–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é:")
    print()
    print("1Ô∏è‚É£ **–í—ñ–¥–∫—Ä–∏–π—Ç–µ –±–æ—Ç–∞** —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
    print()
    print("2Ô∏è‚É£ **–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:**")
    print("   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üí≥ –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é'")
    print("   ‚Ä¢ –û–±–µ—Ä—ñ—Ç—å 'üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É'")
    print()
    print("3Ô∏è‚É£ **–û–±–µ—Ä—ñ—Ç—å –ú–æ–Ω–æ–ë–∞–Ω–∫:**")
    print("   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üè¶ –ú–æ–Ω–æ–ë–∞–Ω–∫'")
    print("   ‚Ä¢ –û–±–µ—Ä—ñ—Ç—å 'üìÑ PDF –≤–∏–ø–∏—Å–∫–∞'")
    print()
    print("4Ô∏è‚É£ **–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ PDF —Ñ–∞–π–ª:**")
    print("   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ PDF —Ñ–∞–π–ª'")
    print("   ‚Ä¢ –í–∏–±–µ—Ä—ñ—Ç—å PDF —Ñ–∞–π–ª –∑ –≤–∞—à–æ—é –≤–∏–ø–∏—Å–∫–æ—é")
    print("   ‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –±–æ—Ç—É")
    print()
    print("5Ô∏è‚É£ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**")
    print("   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")
    print("   ‚Ä¢ –ü–æ–∫–∞–∂–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π")
    print("   ‚Ä¢ –î–æ–¥–∞—Å—Ç—å —ó—Ö –¥–æ –≤–∞—à–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    
    print("\nüìã **–©–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ PDF –≤–∏–ø–∏—Å–∫–∞—Ö –ú–æ–Ω–æ–ë–∞–Ω–∫—É:**")
    print("   ‚úÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó")
    print("   ‚úÖ –°—É–º–∞ –≤ –≥—Ä–∏–≤–Ω—è—Ö (UAH)")
    print("   ‚úÖ –û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó (–º–∞–≥–∞–∑–∏–Ω, —Å–µ—Ä–≤—ñ—Å)")
    print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É (–¥–æ—Ö—ñ–¥/–≤–∏—Ç—Ä–∞—Ç–∞)")
    print("   ‚úÖ –û–±—Ä–æ–±–∫–∞ –±–∞–≥–∞—Ç–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
    print("   ‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏")
    
    print("\n‚ö†Ô∏è **–û–±–º–µ–∂–µ–Ω–Ω—è:**")
    print("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: 10 –ú–ë")
    print("   ‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ —Ñ–æ—Ä–º–∞—Ç PDF")
    print("   ‚Ä¢ –§–∞–π–ª –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ")
    
    print("\nüí° **–ü–æ—Ä–∞–¥–∏:**")
    print("   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ PDF –≤–∏–ø–∏—Å–∫–∏ –∑ –¥–æ–¥–∞—Ç–∫—É Monobank")
    print("   ‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏–ø–∏—Å–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π")
    print("   ‚Ä¢ –î–ª—è –∫—Ä–∞—â–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ CSV –∞–±–æ Excel —Ñ–æ—Ä–º–∞—Ç–∏")

def demo_supported_formats():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤"""
    print("\n" + "=" * 80)
    print("üìÅ –ü–Ü–î–¢–†–ò–ú–£–í–ê–ù–Ü –§–û–†–ú–ê–¢–ò –§–ê–ô–õ–Ü–í")
    print("=" * 80)
    
    formats = {
        "–ú–æ–Ω–æ–ë–∞–Ω–∫": {
            "CSV": "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π, –Ω–∞–π–≤–∏—â–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å",
            "Excel (.xls/.xlsx)": "‚úÖ –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, —Ö–æ—Ä–æ—à–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å",  
            "PDF": "‚úÖ –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø! –ë–∞–∑–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
        },
        "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫": {
            "Excel (.xlsx)": "‚úÖ –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è",
            "CSV": "‚ùå –ù–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è",
            "PDF": "‚ùå –ù–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è"
        },
        "–Ü–Ω—à—ñ –±–∞–Ω–∫–∏": {
            "CSV": "‚úÖ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç",
            "Excel": "‚úÖ –ë–∞–∑–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
            "PDF": "‚úÖ –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
        }
    }
    
    for bank, bank_formats in formats.items():
        print(f"\nüè¶ **{bank}:**")
        for format_name, support in bank_formats.items():
            print(f"   {format_name}: {support}")

if __name__ == "__main__":
    demo_pdf_parsing()
    demo_bot_integration() 
    demo_supported_formats()
    
    print("\n" + "=" * 80)
    print("üéâ –ì–û–¢–û–í–û! PDF –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ú–æ–Ω–æ–ë–∞–Ω–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!")
    print("=" * 80)
