#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É –∑ analytics_handler.py
–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é create_bar_chart –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
"""

import os
import sys
import matplotlib
matplotlib.use('Agg')

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from handlers.analytics_handler import create_bar_chart
from database.models import Session, Transaction, Category, User, TransactionType
from datetime import datetime, timedelta
import random

def create_bar_chart_test_data():
    """–°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É"""
    session = Session()
    
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = session.query(User).filter(User.telegram_id == 999999997).first()
        if not user:
            user = User(
                telegram_id=999999997,
                username="test_bar_chart_user",
                first_name="BarChart",
                last_name="Test"
            )
            session.add(user)
            session.flush()
        
        print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π/–∑–Ω–∞–π–¥–µ–Ω–∏–π: ID={user.id}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories_data = [
            ("–ó–∞—Ä–ø–ª–∞—Ç–∞", "üí∞", "income"),
            ("–§—Ä—ñ–ª–∞–Ω—Å", "üíª", "income"),
            ("–ü—Ä–æ–¥—É–∫—Ç–∏", "üõí", "expense"),
            ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üöó", "expense"),
            ("–†–æ–∑–≤–∞–≥–∏", "üé¨", "expense"),
            ("–†–µ—Å—Ç–æ—Ä–∞–Ω–∏", "üçΩÔ∏è", "expense"),
            ("–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", "üè†", "expense")
        ]
        
        categories = []
        for name, icon, cat_type in categories_data:
            existing_cat = session.query(Category).filter(
                Category.name == name,
                Category.user_id == user.id,
                Category.type == cat_type
            ).first()
            
            if not existing_cat:
                category = Category(
                    name=name,
                    icon=icon,
                    type=cat_type,
                    user_id=user.id
                )
                session.add(category)
                session.flush()
                categories.append(category)
            else:
                categories.append(existing_cat)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ/–∑–Ω–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        session.query(Transaction).filter(
            Transaction.user_id == user.id,
            Transaction.description.like('–¢–ï–°–¢ –ë–ê–†:%')
        ).delete()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å (—Ä—ñ–∑–Ω—ñ –¥–Ω—ñ)
        now = datetime.now()
        transactions_data = []
        
        for i in range(7):  # 7 –¥–Ω—ñ–≤
            transaction_date = now - timedelta(days=i)
            
            # –î–æ–¥–∞—î–º–æ –¥–æ—Ö–æ–¥–∏ (1-2 –Ω–∞ –¥–µ–Ω—å)
            income_cats = [cat for cat in categories if cat.type == 'income']
            for cat in income_cats[:random.randint(1, 2)]:
                amount = random.randint(1000, 5000)
                transaction = Transaction(
                    user_id=user.id,
                    category_id=cat.id,
                    amount=amount,
                    description=f"–¢–ï–°–¢ –ë–ê–†: {cat.name} {i}",
                    type=TransactionType.INCOME,
                    transaction_date=transaction_date
                )
                session.add(transaction)
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                transactions_data.append({
                    'amount': amount,
                    'type': TransactionType.INCOME,
                    'transaction_date': transaction_date,
                    'category_name': cat.name
                })
            
            # –î–æ–¥–∞—î–º–æ –≤–∏—Ç—Ä–∞—Ç–∏ (2-4 –Ω–∞ –¥–µ–Ω—å)
            expense_cats = [cat for cat in categories if cat.type == 'expense']
            for cat in expense_cats[:random.randint(2, 4)]:
                amount = random.randint(100, 1500)
                transaction = Transaction(
                    user_id=user.id,
                    category_id=cat.id,
                    amount=amount,
                    description=f"–¢–ï–°–¢ –ë–ê–†: {cat.name} {i}",
                    type=TransactionType.EXPENSE,
                    transaction_date=transaction_date
                )
                session.add(transaction)
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                transactions_data.append({
                    'amount': amount,
                    'type': TransactionType.EXPENSE,
                    'transaction_date': transaction_date,
                    'category_name': cat.name
                })
        
        session.commit()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(transactions_data)} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ —Ç–∏–∂–¥–µ–Ω—å")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤—ñ –æ–±'—î–∫—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        class FakeTransaction:
            def __init__(self, data):
                self.amount = data['amount']
                self.type = data['type']
                self.transaction_date = data['transaction_date']
                self.category = FakeCategory(data['category_name'])
        
        class FakeCategory:
            def __init__(self, name):
                self.name = name
        
        fake_transactions = [FakeTransaction(data) for data in transactions_data]
        return fake_transactions
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
        return []
    finally:
        session.close()

async def test_modern_bar_charts():
    """–¢–µ—Å—Ç—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Å—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    transactions = create_bar_chart_test_data()
    if not transactions:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")
        return
    
    test_cases = [
        {
            "data_type": "comparison",
            "period": "week",
            "title": "–î–æ—Ö–æ–¥–∏ vs –í–∏—Ç—Ä–∞—Ç–∏ - –¢–∏–∂–¥–µ–Ω—å",
            "filename": "test_modern_bar_chart_comparison_week.png",
            "description": "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è"
        },
        {
            "data_type": "expenses",
            "period": "week",
            "title": "–í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö - –¢–∏–∂–¥–µ–Ω—å",
            "filename": "test_modern_bar_chart_expenses.png",
            "description": "–í–∏—Ç—Ä–∞—Ç–∏ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"
        },
        {
            "data_type": "income",
            "period": "week",
            "title": "–î–æ—Ö–æ–¥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö - –¢–∏–∂–¥–µ–Ω—å",
            "filename": "test_modern_bar_chart_income.png",
            "description": "–î–æ—Ö–æ–¥–∏ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        try:
            print(f"\nüìä –¢–µ—Å—Ç {i}/{len(test_cases)}: {test_case['description']}")
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ —Ç–∏–ø–æ–º
            if test_case["data_type"] == "expenses":
                filtered_transactions = [t for t in transactions if t.type == TransactionType.EXPENSE]
            elif test_case["data_type"] == "income":
                filtered_transactions = [t for t in transactions if t.type == TransactionType.INCOME]
            else:  # comparison
                filtered_transactions = transactions
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            chart_buffer = await create_bar_chart(
                filtered_transactions, 
                test_case["data_type"], 
                test_case["title"], 
                test_case["period"]
            )
            
            if not chart_buffer:
                print(f"‚ùå –ì—Ä–∞—Ñ—ñ–∫ {i} –Ω–µ –±—É–≤ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π")
                continue
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            with open(test_case["filename"], 'wb') as f:
                f.write(chart_buffer.getvalue())
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
            file_size = os.path.getsize(test_case["filename"])
            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {test_case['filename']}")
            print(f"üìè –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç")
            
            if file_size > 100000:  # –ë—ñ–ª—å—à–µ 100KB –æ–∑–Ω–∞—á–∞—î –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å
                print("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –º–∞—î –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å")
            else:
                print("‚ö†Ô∏è –ì—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –º–∞—Ç–∏ –Ω–∏–∑—å–∫—É —è–∫—ñ—Å—Ç—å")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É {i}: {e}")
            import traceback
            traceback.print_exc()
    
    print("\nüéØ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏ - –≥—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏:")
    print("   ‚Ä¢ –í–µ–ª–∏–∫—ñ —à—Ä–∏—Ñ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–∑–∞–≥–æ–ª–æ–≤–æ–∫: 28px, –æ—Å—ñ: 24px)")
    print("   ‚Ä¢ –°—É—á–∞—Å–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ –≥—Ä–∞–¥—ñ—î–Ω—Ç–∏")
    print("   ‚Ä¢ –ó–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—Ü—è—Ö –∑ –≤–µ–ª–∏–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º (16px)")
    print("   ‚Ä¢ –ö—Ä–∞—Å–∏–≤—É –ª–µ–≥–µ–Ω–¥—É (–¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)")
    print("   ‚Ä¢ –Ø–∫—ñ—Å–Ω—É —Å—ñ—Ç–∫—É —Ç–∞ –≤—ñ–¥—Å—Ç—É–ø–∏")
    print("   ‚Ä¢ –í–∏—Å–æ–∫—É —Ä–æ–∑–¥—ñ–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å (300 DPI)")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_modern_bar_charts())
