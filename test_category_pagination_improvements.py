#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º –Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ—Ö–æ–¥–∏
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.models import TransactionType

def test_category_pagination_logic():
    """–¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º"""
    
    # –Ü–º—ñ—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    class MockCategory:
        def __init__(self, id, name, type, icon="üìÇ"):
            self.id = id
            self.name = name
            self.type = type
            self.icon = icon
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = [
        # –í–∏—Ç—Ä–∞—Ç–∏
        MockCategory(1, "–á–∂–∞", TransactionType.EXPENSE, "üçî"),
        MockCategory(2, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", TransactionType.EXPENSE, "üöó"),
        MockCategory(3, "–†–æ–∑–≤–∞–≥–∏", TransactionType.EXPENSE, "üé¨"),
        MockCategory(4, "–ó–¥–æ—Ä–æ–≤'—è", TransactionType.EXPENSE, "üíä"),
        MockCategory(5, "–û–¥—è–≥", TransactionType.EXPENSE, "üëï"),
        MockCategory(6, "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", TransactionType.EXPENSE, "üí°"),
        MockCategory(7, "–ù–∞–≤—á–∞–Ω–Ω—è", TransactionType.EXPENSE, "üìö"),
        MockCategory(8, "–ü–æ–∫—É–ø–∫–∏", TransactionType.EXPENSE, "üõí"),
        MockCategory(9, "–ü–æ–¥–∞—Ä—É–Ω–∫–∏", TransactionType.EXPENSE, "üéÅ"),
        MockCategory(10, "–Ü–Ω—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏", TransactionType.EXPENSE, "üí∏"),
        
        # –î–æ—Ö–æ–¥–∏
        MockCategory(11, "–ó–∞—Ä–ø–ª–∞—Ç–∞", TransactionType.INCOME, "üí∞"),
        MockCategory(12, "–§—Ä—ñ–ª–∞–Ω—Å", TransactionType.INCOME, "üíª"),
        MockCategory(13, "–ü—Ä–æ–¥–∞–∂", TransactionType.INCOME, "üíµ"),
        MockCategory(14, "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", TransactionType.INCOME, "üìà"),
        MockCategory(15, "–Ü–Ω—à—ñ –¥–æ—Ö–æ–¥–∏", TransactionType.INCOME, "üíé"),
    ]
    
    print(f"–í—Å—å–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(categories)}")
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ—Ö–æ–¥–∏
    expense_categories = [c for c in categories if c.type == TransactionType.EXPENSE]
    income_categories = [c for c in categories if c.type == TransactionType.INCOME]
    
    print(f"–í–∏—Ç—Ä–∞—Ç–∏: {len(expense_categories)}")
    print(f"–î–æ—Ö–æ–¥–∏: {len(income_categories)}")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    per_page = 8  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    total_categories = len(categories)
    total_pages = max(1, (total_categories + per_page - 1) // per_page)
    
    print(f"–í—Å—å–æ–≥–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {total_pages}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    all_categories_for_pagination = expense_categories + income_categories
    
    # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    for page in range(1, total_pages + 1):
        print(f"\n=== –°–¢–û–†–Ü–ù–ö–ê {page} ===")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_categories = all_categories_for_pagination[start_idx:end_idx]
        
        print(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {len(page_categories)}")
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑–∞ —Ç–∏–ø–æ–º
        page_expense_categories = [c for c in page_categories if c.type == TransactionType.EXPENSE]
        page_income_categories = [c for c in page_categories if c.type == TransactionType.INCOME]
        
        print(f"–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {len(page_expense_categories)}")
        if page_expense_categories:
            for cat in page_expense_categories:
                print(f"  - {cat.icon} {cat.name}")
        
        print(f"–î–æ—Ö–æ–¥–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {len(page_income_categories)}")
        if page_income_categories:
            for cat in page_income_categories:
                print(f"  - {cat.icon} {cat.name}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_info = []
        if page > 1:
            nav_info.append("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ")
        if page < total_pages:
            nav_info.append("–ù–∞—Å—Ç—É–ø–Ω—ñ ‚û°Ô∏è")
        
        if nav_info:
            print(f"–ù–∞–≤—ñ–≥–∞—Ü—ñ—è: {' | '.join(nav_info)}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏ ({len(expense_categories)}) —Ç–∞ –¥–æ—Ö–æ–¥–∏ ({len(income_categories)})")
    print(f"–ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ: {total_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø–æ {per_page} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")

if __name__ == "__main__":
    test_category_pagination_logic()
