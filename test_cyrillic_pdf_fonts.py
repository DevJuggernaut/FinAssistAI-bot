#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ PDF –∑–≤—ñ—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ñ —à—Ä–∏—Ñ—Ç–∏ DejaVu Sans
"""

import os
import sys
import logging
from datetime import datetime, timedelta

# –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–ø–∫—É –¥–æ sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import init_database
from models import User, Transaction, TransactionType, Category
from handlers.analytics_handler import create_pdf_report

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_cyrillic_pdf_support():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∫–∏—Ä–∏–ª–∏—Ü—ñ –≤ PDF —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ñ —à—Ä–∏—Ñ—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PDF –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É
    init_database()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    test_user = User(
        telegram_id=999999999,
        username="test_cyrillic_user",
        language_code="uk"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    now = datetime.now()
    test_transactions = [
        Transaction(
            user_id=test_user.id,
            amount=1500.50,
            type=TransactionType.EXPENSE,
            category="üõí –ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è",
            description="–ü–æ–∫—É–ø–∫–∏ –≤ –ê–¢–ë: —Ö–ª—ñ–±, –º–æ–ª–æ–∫–æ, –º'—è—Å–æ",
            date=now - timedelta(days=1)
        ),
        Transaction(
            user_id=test_user.id,
            amount=850.75,
            type=TransactionType.EXPENSE,
            category="üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            description="–ü—Ä–æ—ó–∑–¥ –≤ –º–∞—Ä—à—Ä—É—Ç—Ü—ñ —Ç–∞ –º–µ—Ç—Ä–æ",
            date=now - timedelta(days=2)
        ),
        Transaction(
            user_id=test_user.id,
            amount=2300.00,
            type=TransactionType.EXPENSE,
            category="üè† –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏",
            description="–°–ø–ª–∞—Ç–∞ –∑–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—é —Ç–∞ –≤–æ–¥—É",
            date=now - timedelta(days=3)
        ),
        Transaction(
            user_id=test_user.id,
            amount=25000.00,
            type=TransactionType.INCOME,
            category="üíº –ó–∞—Ä–ø–ª–∞—Ç–∞",
            description="–ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞ –∑–∞ —Å—ñ—á–µ–Ω—å",
            date=now - timedelta(days=5)
        ),
        Transaction(
            user_id=test_user.id,
            amount=420.30,
            type=TransactionType.EXPENSE,
            category="üé¨ –†–æ–∑–≤–∞–≥–∏",
            description="–ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä: –±—ñ–ª–µ—Ç–∏ —Ç–∞ –ø–æ–ø–∫–æ—Ä–Ω",
            date=now - timedelta(days=7)
        )
    ]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_income = sum(t.amount for t in test_transactions if t.type == TransactionType.INCOME)
    total_expenses = sum(t.amount for t in test_transactions if t.type == TransactionType.EXPENSE)
    
    category_expenses = {}
    for t in test_transactions:
        if t.type == TransactionType.EXPENSE:
            category_expenses[t.category] = category_expenses.get(t.category, 0) + t.amount
    
    stats = {
        'period': "30 –¥–Ω—ñ–≤",
        'total_income': total_income,
        'total_expenses': total_expenses,
        'balance': total_income - total_expenses,
        'category_expenses': category_expenses,
        'transaction_count': len(test_transactions)
    }
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç—É:")
    print(f"   üí∞ –î–æ—Ö–æ–¥–∏: {total_income:,.2f} –≥—Ä–Ω")
    print(f"   üí∏ –í–∏—Ç—Ä–∞—Ç–∏: {total_expenses:,.2f} –≥—Ä–Ω")
    print(f"   üìà –ë–∞–ª–∞–Ω—Å: {stats['balance']:+,.2f} –≥—Ä–Ω")
    print(f"   üì¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(test_transactions)}")
    print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(category_expenses)}")
    
    # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF
    try:
        print("\nüîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é...")
        pdf_buffer = create_pdf_report(test_user, test_transactions, stats)
        
        if pdf_buffer:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ PDF —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            test_filename = f"test_cyrillic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            with open(test_filename, 'wb') as f:
                f.write(pdf_buffer.getvalue())
            
            print(f"‚úÖ PDF —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {test_filename}")
            print(f"üìÑ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {len(pdf_buffer.getvalue())} –±–∞–π—Ç")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –º—ñ—Å—Ç–∏—Ç—å PDF –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ
            pdf_content = pdf_buffer.getvalue()
            
            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–º—ñ—Å—Ç—É
            checks = {
                "DejaVu font registration": b"DejaVu" in pdf_content,
                "Ukrainian currency symbol": "–≥—Ä–Ω".encode('utf-8') in pdf_content,
                "Ukrainian text": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π".encode('utf-8') in pdf_content,
                "Categories in Ukrainian": "–ü—Ä–æ–¥—É–∫—Ç–∏".encode('utf-8') in pdf_content,
                "PDF header": pdf_content.startswith(b'%PDF-'),
                "PDF size > 10KB": len(pdf_content) > 10240
            }
            
            print(f"\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ PDF:")
            all_passed = True
            for check_name, result in checks.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {check_name}: {result}")
                if not result:
                    all_passed = False
            
            if all_passed:
                print(f"\nüéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
                print(f"üì± –ö–∏—Ä–∏–ª–∏—Ü—è –º–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –≤ PDF!")
                print(f"üî§ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —à—Ä–∏—Ñ—Ç DejaVu Sans –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –ø–∞–ø–∫–∏ fonts/")
                return True
            else:
                print(f"\n‚ö†Ô∏è –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ PDF –≤—Ä—É—á–Ω—É.")
                return False
                
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: PDF –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def check_font_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ —à—Ä–∏—Ñ—Ç—ñ–≤"""
    print("üî§ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ —à—Ä–∏—Ñ—Ç—ñ–≤...")
    
    font_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'fonts')
    
    required_fonts = [
        'DejaVuSans.ttf',
        'DejaVuSans-Bold.ttf'
    ]
    
    all_found = True
    for font_file in required_fonts:
        font_path = os.path.join(font_dir, font_file)
        if os.path.exists(font_path):
            size = os.path.getsize(font_path)
            print(f"   ‚úÖ {font_file}: {size:,} –±–∞–π—Ç")
        else:
            print(f"   ‚ùå {font_file}: –ù–ï –ó–ù–ê–ô–î–ï–ù–û")
            all_found = False
    
    if all_found:
        print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —à—Ä–∏—Ñ—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    else:
        print("‚ùå –î–µ—è–∫—ñ —à—Ä–∏—Ñ—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é:")
        print("   curl -L -o fonts/DejaVuSans.ttf 'https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf'")
        print("   curl -L -o fonts/DejaVuSans-Bold.ttf 'https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans-Bold.ttf'")
    
    return all_found

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è PDF –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ\n")
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à—Ä–∏—Ñ—Ç–∏
    fonts_ok = check_font_files()
    
    if fonts_ok:
        # –Ø–∫—â–æ —à—Ä–∏—Ñ—Ç–∏ —î, —Ç–µ—Å—Ç—É—î–º–æ PDF
        success = test_cyrillic_pdf_support()
        
        if success:
            print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –í—ñ–¥–∫—Ä–∏–π—Ç–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π PDF —ñ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏")
        else:
            print("\nüö® –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤!")
    else:
        print("\nüö® –†–ï–ó–£–õ–¨–¢–ê–¢: –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —à—Ä–∏—Ñ—Ç–∏!")
