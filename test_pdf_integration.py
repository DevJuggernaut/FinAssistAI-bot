#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
"""

import sys
import os
sys.path.insert(0, '/Users/abobina/telegram_bot/FinAssistAI-bot')

from unittest.mock import MagicMock, patch
import asyncio
from datetime import datetime

def test_pdf_upload_flow():
    """–¢–µ—Å—Ç—É—î –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF —Ñ–∞–π–ª—É"""
    print("üîÑ –°–∏–º—É–ª—é—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
        from handlers.message_handler import handle_document_message
        from services.statement_parser import StatementParser
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
        update_mock = MagicMock()
        context_mock = MagicMock()
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
        update_mock.effective_user.id = 12345
        update_mock.message.document.file_name = "monobank_statement.pdf"
        update_mock.message.document.file_size = 1024 * 1024  # 1MB
        update_mock.message.document.file_id = "test_file_id"
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è PDF —Ñ–∞–π–ª—É –≤—ñ–¥ monobank
        context_mock.user_data = {
            'awaiting_file': 'pdf',
            'file_source': 'monobank'
        }
        
        # –ú–æ–∫–∞—î–º–æ bot.get_file
        file_mock = MagicMock()
        file_mock.download_to_drive = MagicMock()
        context_mock.bot.get_file.return_value = file_mock
        
        # –ú–æ–∫–∞—î–º–æ update.message.reply_text
        reply_mock = MagicMock()
        update_mock.message.reply_text.return_value = reply_mock
        
        # –ú–æ–∫–∞—î–º–æ get_user –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_mock = MagicMock()
        user_mock.id = 12345
        
        print("‚úÖ –ú–æ–∫ –æ–±'—î–∫—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É
        pdf_file = "/Users/abobina/telegram_bot/FinAssistAI-bot/uploads/statements/report_20-06-2025_16-12-03.pdf"
        if os.path.exists(pdf_file):
            parser = StatementParser()
            transactions = parser.parse_bank_statement(pdf_file, bank_type='monobank')
            print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –ø—Ä–∞—Ü—é—î: –∑–Ω–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            if transactions:
                print("\nüìã –ü—Ä–∏–∫–ª–∞–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
                for i, transaction in enumerate(transactions[:3]):
                    print(f"  {i+1}. {transaction['date']} | {transaction['amount']} –≥—Ä–Ω | {transaction['type']} | {transaction['description']}")
        else:
            print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {pdf_file}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()

async def test_async_flow():
    """–¢–µ—Å—Ç—É—î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ø–æ—Ç—ñ–∫"""
    print("\nüîÑ –¢–µ—Å—Ç—É—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ø–æ—Ç—ñ–∫...")
    
    try:
        from services.statement_parser import StatementParser
        
        parser = StatementParser()
        pdf_file = "/Users/abobina/telegram_bot/FinAssistAI-bot/uploads/statements/report_20-06-2025_16-12-03.pdf"
        
        if os.path.exists(pdf_file):
            # –¢–µ—Å—Ç—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫
            transactions = parser.parse_bank_statement(pdf_file, bank_type='monobank')
            print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ç–µ—Å—Ç: –∑–Ω–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
        else:
            print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {pdf_file}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É: {e}")
        import traceback
        traceback.print_exc()

def test_message_handler_integration():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –æ–±—Ä–æ–±–Ω–∏–∫–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    print("\nüîÑ –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –æ–±—Ä–æ–±–Ω–∏–∫–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—ñ
        from handlers.message_handler import handle_document_message
        from database.db_operations import get_user
        
        print("‚úÖ –ú–æ–¥—É–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print("‚úÖ PDF –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è Monobank –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        
        print("\nüìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
        print("1. –£ –±–æ—Ç—ñ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ: –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ‚Üí –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É")
        print("2. –û–±–µ—Ä—ñ—Ç—å –ú–æ–Ω–æ–ë–∞–Ω–∫")
        print("3. –û–±–µ—Ä—ñ—Ç—å PDF –≤–∏–ø–∏—Å–∫–∞")
        print("4. –ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF —Ñ–∞–π–ª –∑ –≤–∏–ø–∏—Å–∫–æ—é Monobank")
        print("5. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ –¥–æ–¥–∞—Å—Ç—å —ó—Ö")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_pdf_upload_flow()
    asyncio.run(test_async_flow())
    test_message_handler_integration()
