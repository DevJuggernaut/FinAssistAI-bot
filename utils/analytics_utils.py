"""
–£—Ç–∏–ª—ñ—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —Ç–∞ –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ.
–í–∫–ª—é—á–∞—î —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö, –æ–±—á–∏—Å–ª–µ–Ω–Ω—è KPI —Ç–∞ —ñ–Ω—à–∏—Ö –¥–æ–ø–æ–º—ñ–∂–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π.
"""

from datetime import datetime, timedelta
from typing import List, Dict, Tuple, Optional
import pandas as pd
import numpy as np
from collections import defaultdict, Counter
import calendar
import logging

logger = logging.getLogger(__name__)

class AnalyticsUtils:
    """–£—Ç–∏–ª—ñ—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    
    @staticmethod
    def format_currency(amount: float, currency: str = "–≥—Ä–Ω") -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Å—É–º—É —É –≤–∞–ª—é—Ç—ñ"""
        return f"{amount:,.2f} {currency}".replace(",", " ")
    
    @staticmethod
    def format_percentage(value: float, decimal_places: int = 1) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫"""
        return f"{value:.{decimal_places}f}%"
    
    @staticmethod
    def calculate_savings_rate(income: float, expenses: float) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å"""
        if income <= 0:
            return 0.0
        return ((income - expenses) / income) * 100
    
    @staticmethod
    def calculate_burn_rate(expenses: float, days: int) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç (burn rate) –Ω–∞ –¥–µ–Ω—å"""
        if days <= 0:
            return 0.0
        return expenses / days
    
    @staticmethod
    def get_financial_health_level(score: float) -> Tuple[str, str]:
        """–í–∏–∑–Ω–∞—á–∞—î —Ä—ñ–≤–µ–Ω—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è"""
        if score >= 90:
            return "–í—ñ–¥–º—ñ–Ω–Ω–µ", "üü¢"
        elif score >= 75:
            return "–î—É–∂–µ –¥–æ–±—Ä–µ", "üü¢"
        elif score >= 60:
            return "–î–æ–±—Ä–µ", "üü°"
        elif score >= 45:
            return "–°–µ—Ä–µ–¥–Ω—î", "üü†"
        elif score >= 30:
            return "–ù–∏–∂—á–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ", "üî¥"
        else:
            return "–ö—Ä–∏—Ç–∏—á–Ω–µ", "üî¥"
    
    @staticmethod
    def calculate_monthly_average(transactions: List[Dict], months: int = 3) -> Dict:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑–∞ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—è—Ü—ñ–≤"""
        if not transactions:
            return {"income": 0, "expenses": 0, "balance": 0}
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –º—ñ—Å—è—Ü—è—Ö
        monthly_data = defaultdict(lambda: {"income": 0, "expenses": 0})
        
        for t in transactions:
            month_key = t['transaction_date'].strftime("%Y-%m")
            if t['type'] == 'income':
                monthly_data[month_key]['income'] += t['amount']
            else:
                monthly_data[month_key]['expenses'] += t['amount']
        
        # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N –º—ñ—Å—è—Ü—ñ–≤
        recent_months = sorted(monthly_data.keys())[-months:]
        
        total_income = sum(monthly_data[month]['income'] for month in recent_months)
        total_expenses = sum(monthly_data[month]['expenses'] for month in recent_months)
        
        months_count = len(recent_months) if recent_months else 1
        
        return {
            "income": total_income / months_count,
            "expenses": total_expenses / months_count,
            "balance": (total_income - total_expenses) / months_count
        }
    
    @staticmethod
    def detect_spending_spikes(daily_expenses: List[float], threshold_multiplier: float = 2.0) -> List[int]:
        """–í–∏—è–≤–ª—è—î –¥–Ω—ñ –∑ —Ä—ñ–∑–∫–∏–º–∏ —Å—Ç—Ä–∏–±–∫–∞–º–∏ –≤–∏—Ç—Ä–∞—Ç"""
        if len(daily_expenses) < 7:
            return []
        
        expenses_array = np.array(daily_expenses)
        rolling_mean = pd.Series(expenses_array).rolling(window=7, min_periods=3).mean()
        
        spikes = []
        for i, (expense, mean_val) in enumerate(zip(expenses_array, rolling_mean)):
            if not np.isnan(mean_val) and expense > mean_val * threshold_multiplier:
                spikes.append(i)
        
        return spikes
    
    @staticmethod
    def calculate_category_concentration(category_amounts: Dict[str, float]) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—é –≤–∏—Ç—Ä–∞—Ç (Herfindahl Index)"""
        total = sum(category_amounts.values())
        if total == 0:
            return 0
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –•–µ—Ä—Ñ—ñ–Ω–¥–∞–ª—è-–•—ñ—Ä—à–º–∞–Ω–∞
        hhi = sum((amount / total) ** 2 for amount in category_amounts.values())
        return hhi * 100  # –£ –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
    
    @staticmethod
    def get_top_categories(category_amounts: Dict[str, float], top_n: int = 5) -> List[Tuple[str, float, float]]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏"""
        total = sum(category_amounts.values())
        if total == 0:
            return []
        
        sorted_categories = sorted(category_amounts.items(), key=lambda x: x[1], reverse=True)
        
        result = []
        for category, amount in sorted_categories[:top_n]:
            percentage = (amount / total) * 100
            result.append((category, amount, percentage))
        
        return result
    
    @staticmethod
    def calculate_weekly_pattern(transactions: List[Dict]) -> Dict[int, float]:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–∞—Ç—Ç–µ—Ä–Ω –≤–∏—Ç—Ä–∞—Ç –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è"""
        weekday_expenses = defaultdict(float)
        
        for t in transactions:
            if t['type'] == 'expense':
                weekday = t['transaction_date'].weekday()
                weekday_expenses[weekday] += t['amount']
        
        return dict(weekday_expenses)
    
    @staticmethod
    def generate_comparison_text(current: float, previous: float, metric_name: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–≤–æ—Ö –∑–Ω–∞—á–µ–Ω—å"""
        if previous == 0:
            if current > 0:
                return f"{metric_name} –∑'—è–≤–∏–ª–∏—Å—å: {current:.2f}"
            else:
                return f"{metric_name} –≤—ñ–¥—Å—É—Ç–Ω—ñ"
        
        change_percent = ((current - previous) / previous) * 100
        change_abs = current - previous
        
        if abs(change_percent) < 1:
            return f"{metric_name} –±–µ–∑ –∑–º—ñ–Ω: {current:.2f}"
        elif change_percent > 0:
            return f"{metric_name} –∑—Ä–æ—Å–ª–∏ –Ω–∞ {change_percent:.1f}% (+{change_abs:.2f})"
        else:
            return f"{metric_name} –∑–º–µ–Ω—à–∏–ª–∏—Å—å –Ω–∞ {abs(change_percent):.1f}% ({change_abs:.2f})"
    
    @staticmethod
    def get_month_name_ukrainian(month_num: int) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        months = {
            1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
            5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
            9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
        }
        return months.get(month_num, f"–ú—ñ—Å—è—Ü—å {month_num}")
    
    @staticmethod
    def get_weekday_name_ukrainian(weekday_num: int) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –¥–Ω—è —Ç–∏–∂–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        weekdays = {
            0: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", 1: "–í—ñ–≤—Ç–æ—Ä–æ–∫", 2: "–°–µ—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä",
            4: "–ü'—è—Ç–Ω–∏—Ü—è", 5: "–°—É–±–æ—Ç–∞", 6: "–ù–µ–¥—ñ–ª—è"
        }
        return weekdays.get(weekday_num, f"–î–µ–Ω—å {weekday_num}")

class FinancialKPICalculator:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (KPI)"""
    
    @staticmethod
    def calculate_all_kpis(user_data: Dict) -> Dict:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ KPI"""
        try:
            kpis = {}
            
            # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
            total_income = user_data.get("total_income", 0)
            total_expenses = user_data.get("total_expenses", 0)
            monthly_budget = user_data.get("monthly_budget", 0)
            
            # 1. –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å
            kpis["savings_rate"] = AnalyticsUtils.calculate_savings_rate(total_income, total_expenses)
            
            # 2. –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç
            days_in_period = user_data.get("days_in_period", 30)
            kpis["burn_rate"] = AnalyticsUtils.calculate_burn_rate(total_expenses, days_in_period)
            
            # 3. –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
            if monthly_budget > 0:
                kpis["budget_utilization"] = (total_expenses / monthly_budget) * 100
            else:
                kpis["budget_utilization"] = 0
            
            # 4. –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            transaction_count = user_data.get("transaction_count", 0)
            if transaction_count > 0:
                kpis["avg_transaction_size"] = total_expenses / transaction_count
            else:
                kpis["avg_transaction_size"] = 0
            
            # 5. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
            category_amounts = user_data.get("category_amounts", {})
            if category_amounts:
                kpis["category_concentration"] = AnalyticsUtils.calculate_category_concentration(category_amounts)
            else:
                kpis["category_concentration"] = 0
            
            # 6. –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç—ñ–π–∫—ñ—Å—Ç—å (–º—ñ—Å—è—Ü—ñ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ —Ñ–æ–Ω–¥—É)
            monthly_expenses = total_expenses * (30 / days_in_period)  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ –º—ñ—Å—è—Ü—è
            emergency_fund = user_data.get("emergency_fund", 0)
            if monthly_expenses > 0:
                kpis["emergency_fund_months"] = emergency_fund / monthly_expenses
            else:
                kpis["emergency_fund_months"] = 0
            
            return kpis
            
        except Exception as e:
            logger.error(f"Error calculating KPIs: {e}")
            return {}
    
    @staticmethod
    def interpret_kpis(kpis: Dict) -> List[str]:
        """–Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É—î KPI —Ç–∞ –≥–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
        interpretations = []
        
        # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å
        savings_rate = kpis.get("savings_rate", 0)
        if savings_rate >= 20:
            interpretations.append("üí∞ –í—ñ–¥–º—ñ–Ω–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å! –í–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É.")
        elif savings_rate >= 10:
            interpretations.append("üëç –•–æ—Ä–æ—à–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 20%.")
        elif savings_rate >= 0:
            interpretations.append("‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏.")
        else:
            interpretations.append("üö® –í–∏—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –¥–æ—Ö–æ–¥–∏! –ü–æ—Ç—Ä—ñ–±–µ–Ω –ø–ª–∞–Ω –µ–∫–æ–Ω–æ–º—ñ—ó.")
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
        budget_util = kpis.get("budget_utilization", 0)
        if budget_util > 0:
            if budget_util <= 80:
                interpretations.append("üéØ –ß—É–¥–æ–≤–æ! –í–∏ —Ç—Ä–∏–º–∞—î—Ç–µ—Å—å –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É.")
            elif budget_util <= 100:
                interpretations.append("üìä –ú–∞–π–∂–µ –≤–∏—á–µ—Ä–ø–∞–ª–∏ –±—é–¥–∂–µ—Ç. –ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ –¥–æ –∫—ñ–Ω—Ü—è –º—ñ—Å—è—Ü—è.")
            else:
                interpretations.append(f"üìà –ü–µ—Ä–µ–≤–∏—â–∏–ª–∏ –±—é–¥–∂–µ—Ç –Ω–∞ {budget_util - 100:.1f}%. –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏.")
        
        # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç
        concentration = kpis.get("category_concentration", 0)
        if concentration > 50:
            interpretations.append("üéØ –í–∏—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç –≤ –æ–¥–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é.")
        elif concentration < 20:
            interpretations.append("üìä –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö.")
        
        # –ê–≤–∞—Ä—ñ–π–Ω–∏–π —Ñ–æ–Ω–¥
        emergency_months = kpis.get("emergency_fund_months", 0)
        if emergency_months >= 6:
            interpretations.append("üõ°Ô∏è –í—ñ–¥–º—ñ–Ω–Ω–∏–π –∞–≤–∞—Ä—ñ–π–Ω–∏–π —Ñ–æ–Ω–¥! –í–∏ –∑–∞—Ö–∏—â–µ–Ω—ñ –≤—ñ–¥ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç.")
        elif emergency_months >= 3:
            interpretations.append("üí™ –•–æ—Ä–æ—à–∏–π –∞–≤–∞—Ä—ñ–π–Ω–∏–π —Ñ–æ–Ω–¥. –ù–∞–º–∞–≥–∞–π—Ç–µ—Å—å –∑–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 6 –º—ñ—Å—è—Ü—ñ–≤.")
        elif emergency_months >= 1:
            interpretations.append("‚ö†Ô∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∞–≤–∞—Ä—ñ–π–Ω–∏–π —Ñ–æ–Ω–¥. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–±—ñ–ª—å—à–∏—Ç–∏.")
        else:
            interpretations.append("üö® –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–≤–∞—Ä—ñ–π–Ω–∏–π —Ñ–æ–Ω–¥. –¶–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –±–µ–∑–ø–µ–∫–∏!")
        
        return interpretations

# –ì–ª–æ–±–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
analytics_utils = AnalyticsUtils()
kpi_calculator = FinancialKPICalculator()
