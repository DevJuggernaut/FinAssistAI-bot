#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ UX –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—î—é
"""

import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.ml_categorizer import TransactionCategorizer

def test_ml_categorizer():
    """–¢–µ—Å—Ç—É—î ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä"""
    print("üî¨ –¢–µ—Å—Ç—É—î–º–æ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä...")
    
    categorizer = TransactionCategorizer()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    test_transactions = [
        {"description": "–ê–¢–ë –ø—Ä–æ–¥—É–∫—Ç–∏", "amount": 450, "type": "expense"},
        {"description": "–ø—Ä–æ—ó–∑–¥ —É –º–µ—Ç—Ä–æ", "amount": 50, "type": "expense"},
        {"description": "–æ–±—ñ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ", "amount": 1200, "type": "expense"},
        {"description": "–∑–∞—Ä–ø–ª–∞—Ç–∞", "amount": 15000, "type": "income"},
        {"description": "—Ñ—Ä–∏–ª–∞–Ω—Å –ø—Ä–æ–µ–∫—Ç", "amount": 5000, "type": "income"},
        {"description": "–∞–ø—Ç–µ–∫–∞ –ª—ñ–∫–∏", "amount": 300, "type": "expense"},
        {"description": "–∫—ñ–Ω–æ –∫–≤–∏—Ç–∫–∏", "amount": 800, "type": "expense"},
    ]
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó:")
    print("-" * 70)
    
    for transaction in test_transactions:
        result = categorizer.categorize_transaction(
            description=transaction["description"],
            amount=transaction["amount"],
            transaction_type=transaction["type"]
        )
        
        type_icon = "üí∏" if transaction["type"] == "expense" else "üí∞"
        print(f"{type_icon} {transaction['amount']}‚Ç¥ ‚Ä¢ {transaction['description']}")
        print(f"   üìç –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {result['icon']} {result['name']} (ID: {result['id']})")
        print()

def test_transaction_flow():
    """–Ü–º—ñ—Ç—É—î –ø–æ—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    print("üõ†Ô∏è –¢–µ—Å—Ç—É—î–º–æ –ø–æ—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...")
    
    # –Ü–º—ñ—Ç—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_inputs = [
        "450 –ê–¢–ë –ø—Ä–æ–¥—É–∫—Ç–∏",
        "1200 –æ–±—ñ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ",
        "50 –ø—Ä–æ—ó–∑–¥",
        "15000 –∑–∞—Ä–ø–ª–∞—Ç–∞",
        "300 –∞–ø—Ç–µ–∫–∞",
    ]
    
    print("\n‚úÖ –Ü–º—ñ—Ç–∞—Ü—ñ—è UX –ø–æ—Ç–æ–∫—É:")
    print("-" * 70)
    
    categorizer = TransactionCategorizer()
    
    for input_text in user_inputs:
        print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å: '{input_text}'")
        
        # –ü–∞—Ä—Å–∏–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è
        parts = input_text.split(' ', 1)
        if len(parts) >= 2:
            amount = float(parts[0])
            description = parts[1]
        else:
            amount = float(parts[0])
            description = "–ë–µ–∑ –æ–ø–∏—Å—É"
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ - —è–∫—â–æ —Å—É–º–∞ > 5000, —Ç–æ –¥–æ—Ö—ñ–¥)
        transaction_type = "income" if amount > 5000 else "expense"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        category = categorizer.categorize_transaction(
            description=description,
            amount=amount,
            transaction_type=transaction_type
        )
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —É –±–æ—Ç—ñ
        type_icon = "üí∏" if transaction_type == "expense" else "üí∞"
        amount_str = f"-{amount:.0f}‚Ç¥" if transaction_type == "expense" else f"+{amount:.0f}‚Ç¥"
        
        print(f"ü§ñ –Ø –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞–≤ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü—ñ—é:")
        print(f"   {type_icon} {amount_str} ‚Ä¢ {description}")
        print(f"   üìç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–Ω–µ—Å–µ–Ω–æ –¥–æ: {category['icon']} {category['name']}")
        print(f"   –¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? [‚úÖ –¢–∞–∫] [‚ùå –ù—ñ, –∑–º—ñ–Ω–∏—Ç–∏]")
        print()

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ UX –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
    print("=" * 70)
    
    try:
        test_ml_categorizer()
        test_transaction_flow()
        
        print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("\nüìù –†–µ–∑—é–º–µ –Ω–æ–≤–æ–≥–æ UX:")
        print("1. üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó (–≤–∏—Ç—Ä–∞—Ç–∞/–¥–æ—Ö—ñ–¥)")
        print("2. üìù –í–≤–æ–¥–∏—Ç—å —Å—É–º—É —Ç–∞ –æ–ø–∏—Å –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º")
        print("3. ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
        print("4. ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∞–±–æ –∑–º—ñ–Ω—é—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
        print("5. üíæ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()
