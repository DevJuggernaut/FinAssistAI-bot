#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—î—é —á–µ–∫–∞
"""
import os
import asyncio
from datetime import datetime
from services.free_receipt_parser import free_receipt_parser

async def test_receipt_parsing():
    """–¢–µ—Å—Ç—É—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ–∫–∞"""
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ–∫–∞ ===\n")
    
    # –®—É–∫–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —á–µ–∫
    test_receipt_path = "/Users/abobina/telegram_bot/FinAssistAI-bot/test_receipt.jpg"
    
    if os.path.exists(test_receipt_path):
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —á–µ–∫: {test_receipt_path}")
        
        try:
            # –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
            receipt_data = free_receipt_parser.parse_receipt(test_receipt_path)
            
            if receipt_data:
                print("\n‚úÖ –ß–µ–∫ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ!")
                print(f"–°—É–º–∞: {receipt_data.get('total_amount', '–Ω–µ–≤—ñ–¥–æ–º–æ')}")
                print(f"–ú–∞–≥–∞–∑–∏–Ω: {receipt_data.get('store_name', '–Ω–µ–≤—ñ–¥–æ–º–æ')}")
                print(f"–î–∞—Ç–∞: {receipt_data.get('date', '–Ω–µ–≤—ñ–¥–æ–º–æ')}")
                print(f"–°–∏—Ä–∏–π —Ç–µ–∫—Å—Ç: {receipt_data.get('raw_text', '–Ω–µ–º–∞—î')[:100]}...")
                
                # –Ü–º—ñ—Ç—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö, —â–æ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
                pending_receipt = {
                    'amount': receipt_data['total_amount'],
                    'description': f"–ü–æ–∫—É–ø–∫–∞ –≤ {receipt_data.get('store_name', '–º–∞–≥–∞–∑–∏–Ω—ñ')}",
                    'category_id': None,  # –ë—É–¥–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
                    'transaction_date': receipt_data.get('date', datetime.now()),
                    'file_path': test_receipt_path,
                    'store_name': receipt_data.get('store_name', '–ù–µ–≤—ñ–¥–æ–º–æ'),
                    'category': 'uncategorized',  # –ë—É–¥–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ ML –º–æ–¥–µ–ª–ª—é
                    'confidence': 0.0
                }
                
                print(f"\nüìã –î–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ:")
                for key, value in pending_receipt.items():
                    print(f"  {key}: {value}")
                
                # –Ü–º—ñ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ–±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                print(f"\nüì± –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
                print(f"‚úÖ –ß–µ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ!\n")
                print(f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {pending_receipt['store_name']}")
                print(f"üí∞ –°—É–º–∞: {pending_receipt['amount']:.2f} –≥—Ä–Ω")
                print(f"üìÖ –î–∞—Ç–∞: {pending_receipt['transaction_date'].strftime('%d.%m.%Y')}")
                print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {pending_receipt['category']}")
                print(f"üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {pending_receipt['confidence']:.1%}")
                print(f"\n[–ö–Ω–æ–ø–∫–∞: ‚úÖ –î–æ–¥–∞—Ç–∏] [–ö–Ω–æ–ø–∫–∞: ‚ùå –ù–∞–∑–∞–¥]")
                
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–µ–∫")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–∏–π —á–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {test_receipt_path}")
        
        # –ü–æ–∫–∞–∂–µ–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ–∞–π–ª–∏
        print("\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:")
        for file in os.listdir("/Users/abobina/telegram_bot/FinAssistAI-bot"):
            if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                print(f"  - {file}")

if __name__ == "__main__":
    asyncio.run(test_receipt_parsing())
