#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–±—ñ–ª—å—à–µ–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ç–µ–∫—Å—Ç—É –Ω–∞ –∫—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º—ñ
"""

import sys
import asyncio
from unittest.mock import MagicMock, AsyncMock

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/abobina/telegram_bot/FinAssistAI-bot')

async def test_bigger_font_sizes():
    """–¢–µ—Å—Ç—É—î –∫—Ä—É–≥–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É –∑ –∑–±—ñ–ª—å—à–µ–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ —Ç–µ–∫—Å—Ç—É"""
    print("üîç –¢–ï–°–¢: –ó–±—ñ–ª—å—à–µ–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–µ–∫—Å—Ç—É")
    print("=" * 50)
    
    try:
        from handlers.analytics_handler import create_pie_chart
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        class MockCategory:
            def __init__(self, name):
                self.name = name
        
        class MockTransaction:
            def __init__(self, amount, category_name):
                self.amount = amount
                self.category = MockCategory(category_name)
        
        # –¢–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        test_transactions = [
            MockTransaction(1500, "–ü—Ä–æ–¥—É–∫—Ç–∏"),
            MockTransaction(800, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), 
            MockTransaction(600, "–†–æ–∑–≤–∞–≥–∏"),
            MockTransaction(400, "–û–¥—è–≥"),
            MockTransaction(300, "–ó–¥–æ—Ä–æ–≤'—è"),
            MockTransaction(200, "–ö–∞—Ñ–µ"),
            MockTransaction(150, "–ö–Ω–∏–≥–∏"),
            MockTransaction(100, "–°–ø–æ—Ä—Ç")
        ]
        
        print("üìä –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É –∑ –∑–±—ñ–ª—å—à–µ–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏...")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
        chart_buffer = await create_pie_chart(
            test_transactions, 
            "expenses", 
            "–¢–µ—Å—Ç–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ - –≤–µ–ª–∏–∫–∏–π —Ç–µ–∫—Å—Ç"
        )
        
        print("‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üìè –†–æ–∑–º—ñ—Ä –±—É—Ñ–µ—Ä–∞: {len(chart_buffer.getvalue())} –±–∞–π—Ç")
        
        print("\nüé® –ù–û–í–Ü –†–û–ó–ú–Ü–†–ò –®–†–ò–§–¢–Ü–í:")
        print("=" * 35)
        print("üìä –í—ñ–¥—Å–æ—Ç–∫–∏ –Ω–∞ –¥—ñ–∞–≥—Ä–∞–º—ñ: 16px (–±—É–ª–æ 11px)")
        print("üí∞ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —Å—É–º–∞: 24px (–±—É–ª–æ 16px)")
        print("üè∑Ô∏è –ü—ñ–¥–ø–∏—Å –≤–∞–ª—é—Ç–∏: 18px (–±—É–ª–æ 12px)")
        print("üìã –õ–µ–≥–µ–Ω–¥–∞: 14px (–±—É–ª–æ 10px)")
        print("üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: 20px (–±—É–ª–æ 16px)")
        print("üìê –†–æ–∑–º—ñ—Ä –¥—ñ–∞–≥—Ä–∞–º–∏: 14x12 (–±—É–ª–æ 12x10)")
        
        print("\nüí° –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("‚îÄ" * 15)
        print("‚úÖ –¢–µ–∫—Å—Ç —Å—Ç–∞–≤ –Ω–∞–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–∏–º")
        print("‚úÖ –ö—Ä–∞—â–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö")
        print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –≤–∏–≥–ª—è–¥")
        print("‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω—ñ—Å—Ç—å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def demo_font_comparison():
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ —à—Ä–∏—Ñ—Ç—ñ–≤"""
    print("\nüìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –†–û–ó–ú–Ü–†–Ü–í –®–†–ò–§–¢–Ü–í")
    print("=" * 45)
    
    print("\nüîç –î–û (—Å—Ç–∞—Ä—ñ —Ä–æ–∑–º—ñ—Ä–∏):")
    print("‚îÄ" * 25)
    print("‚Ä¢ –í—ñ–¥—Å–æ—Ç–∫–∏: 11px")
    print("‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —Å—É–º–∞: 16px") 
    print("‚Ä¢ –í–∞–ª—é—Ç–∞: 12px")
    print("‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞: 10px")
    print("‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: 16px")
    print("‚Ä¢ –î—ñ–∞–≥—Ä–∞–º–∞: 12x10")
    
    print("\nüéØ –ü–Ü–°–õ–Ø (–Ω–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏):")
    print("‚îÄ" * 28)
    print("‚Ä¢ –í—ñ–¥—Å–æ—Ç–∫–∏: 16px (+45%)")
    print("‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —Å—É–º–∞: 24px (+50%)")
    print("‚Ä¢ –í–∞–ª—é—Ç–∞: 18px (+50%)")
    print("‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞: 14px (+40%)")
    print("‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: 20px (+25%)")
    print("‚Ä¢ –î—ñ–∞–≥—Ä–∞–º–∞: 14x12 (+17%)")
    
    print("\nüåü –ü–ï–†–ï–í–ê–ì–ò –ó–ë–Ü–õ–¨–®–ï–ù–ù–Ø:")
    print("‚îÄ" * 30)
    print("üì± –ö—Ä–∞—â–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö")
    print("üëÅÔ∏è –ú–µ–Ω—à–µ –Ω–∞–ø—Ä—É–∂–µ–Ω–Ω—è –æ—á–µ–π")
    print("üìä –õ–µ–≥—à–µ —Å–ø—Ä–∏–π–º–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ç–∫–∏")
    print("üí∞ –ß—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ —Å—É–º–∏")
    print("üé® –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ—à–∏–π –≤–∏–≥–ª—è–¥")
    
    print("\nüéâ –ì–û–¢–û–í–û!")
    print("–¢–µ–ø–µ—Ä —Ç–µ–∫—Å—Ç –Ω–∞ –¥—ñ–∞–≥—Ä–∞–º—ñ –Ω–∞–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–∏–π —ñ –∑—Ä–æ–∑—É–º—ñ–ª—ñ—à–∏–π!")

if __name__ == "__main__":
    async def main():
        success = await test_bigger_font_sizes()
        if success:
            await demo_font_comparison()
        else:
            print("‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–æ")
    
    asyncio.run(main())
