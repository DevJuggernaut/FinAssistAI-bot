#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∏–ª—É—á–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ–∞–π–ª—ñ–≤ –±–∞–Ω–∫—ñ–≤
"""

import sys
import os
import asyncio
from unittest.mock import AsyncMock, MagicMock

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç—É –¥–æ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_hide_edit_button():
    """–¢–µ—Å—Ç—É—î –ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ–∞–π–ª—ñ–≤ –±–∞–Ω–∫—ñ–≤"""
    
    print("üß™ –¢–ï–°–¢ –ü–†–ò–•–û–í–ê–ù–ù–Ø –ö–ù–û–ü–ö–ò –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø")
    print("=" * 50)
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
    from handlers.message_handler import show_transactions_preview
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
    mock_message = MagicMock()
    mock_message.edit_text = AsyncMock()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    test_transactions = [
        {
            'date': '2025-06-25',
            'amount': 150.0,
            'description': '–¢–µ—Å—Ç–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è',
            'type': 'expense'
        }
    ]
    
    # –¢–µ—Å—Ç 1: –ó–≤–∏—á–∞–π–Ω–∏–π —Ñ–∞–π–ª (–ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)
    print("üîç –¢–µ—Å—Ç 1: –ó–≤–∏—á–∞–π–Ω–∏–π —Ñ–∞–π–ª")
    context1 = MagicMock()
    context1.user_data = {
        'file_source': 'unknown',
        'awaiting_file': 'unknown'
    }
    
    await show_transactions_preview(mock_message, context1, test_transactions)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ edit_text —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    call_args = mock_message.edit_text.call_args
    if call_args:
        text = call_args[0][0]  # –ü–µ—Ä—à–∏–π –ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        reply_markup = call_args[1]['reply_markup']  # Keyword –∞—Ä–≥—É–º–µ–Ω—Ç
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        has_edit_button = any("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in str(button) for row in reply_markup.inline_keyboard for button in row)
        print(f"   ‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è {'–ø—Ä–∏—Å—É—Ç–Ω—è' if has_edit_button else '–≤—ñ–¥—Å—É—Ç–Ω—è'}")
        
        if has_edit_button:
            print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤")
        else:
            print("   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å")
    
    # –°–∫–∏–¥–∞—î–º–æ –º–æ–∫
    mock_message.edit_text.reset_mock()
    
    # –¢–µ—Å—Ç 2: –§–∞–π–ª –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É (–ø—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É)
    print("\nüîç –¢–µ—Å—Ç 2: Excel —Ñ–∞–π–ª –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É")
    context2 = MagicMock()
    context2.user_data = {
        'file_source': 'privatbank',
        'awaiting_file': 'excel'
    }
    
    await show_transactions_preview(mock_message, context2, test_transactions)
    
    call_args = mock_message.edit_text.call_args
    if call_args:
        reply_markup = call_args[1]['reply_markup']
        has_edit_button = any("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in str(button) for row in reply_markup.inline_keyboard for button in row)
        print(f"   ‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è {'–ø—Ä–∏—Å—É—Ç–Ω—è' if has_edit_button else '–≤—ñ–¥—Å—É—Ç–Ω—è'}")
        
        if not has_edit_button:
            print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É")
        else:
            print("   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å")
    
    # –°–∫–∏–¥–∞—î–º–æ –º–æ–∫
    mock_message.edit_text.reset_mock()
    
    # –¢–µ—Å—Ç 3: CSV —Ñ–∞–π–ª –ú–æ–Ω–æ–ë–∞–Ω–∫—É (–ø—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É)
    print("\nüîç –¢–µ—Å—Ç 3: CSV —Ñ–∞–π–ª –ú–æ–Ω–æ–ë–∞–Ω–∫—É")
    context3 = MagicMock()
    context3.user_data = {
        'file_source': 'monobank',
        'awaiting_file': 'csv'
    }
    
    await show_transactions_preview(mock_message, context3, test_transactions)
    
    call_args = mock_message.edit_text.call_args
    if call_args:
        reply_markup = call_args[1]['reply_markup']
        has_edit_button = any("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in str(button) for row in reply_markup.inline_keyboard for button in row)
        print(f"   ‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è {'–ø—Ä–∏—Å—É—Ç–Ω—è' if has_edit_button else '–≤—ñ–¥—Å—É—Ç–Ω—è'}")
        
        if not has_edit_button:
            print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ú–æ–Ω–æ–ë–∞–Ω–∫—É")
        else:
            print("   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å")
    
    # –°–∫–∏–¥–∞—î–º–æ –º–æ–∫
    mock_message.edit_text.reset_mock()
    
    # –¢–µ—Å—Ç 4: PDF —Ñ–∞–π–ª –ú–æ–Ω–æ–ë–∞–Ω–∫—É (–ø—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É)
    print("\nüîç –¢–µ—Å—Ç 4: PDF —Ñ–∞–π–ª –ú–æ–Ω–æ–ë–∞–Ω–∫—É")
    context4 = MagicMock()
    context4.user_data = {
        'file_source': 'monobank',
        'awaiting_file': 'pdf'
    }
    
    await show_transactions_preview(mock_message, context4, test_transactions)
    
    call_args = mock_message.edit_text.call_args
    if call_args:
        reply_markup = call_args[1]['reply_markup']
        has_edit_button = any("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in str(button) for row in reply_markup.inline_keyboard for button in row)
        print(f"   ‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è {'–ø—Ä–∏—Å—É—Ç–Ω—è' if has_edit_button else '–≤—ñ–¥—Å—É—Ç–Ω—è'}")
        
        if not has_edit_button:
            print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è –¥–ª—è PDF –ú–æ–Ω–æ–ë–∞–Ω–∫—É")
        else:
            print("   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤: –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å")
    
    print("\n" + "=" * 50)
    print("üèÜ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
    print("‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ø–µ—Ä –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ñ–∞–π–ª—ñ–≤ –±–∞–Ω–∫—ñ–≤!")

if __name__ == "__main__":
    asyncio.run(test_hide_edit_button())
