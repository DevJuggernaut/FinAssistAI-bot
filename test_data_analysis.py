#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞ –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
"""

from sqlalchemy.orm import sessionmaker
from database.config import DATABASE_URL
from database.models import User, Transaction, Category, BudgetPlan, TransactionType
from sqlalchemy import create_engine, func
from datetime import datetime, timedelta
import sys

def create_session():
    """–°—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    engine_test = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine_test)
    return Session()

def test_user_data(telegram_id):
    """–¢–µ—Å—Ç—É—î –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    session = create_session()
    
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if not user:
            print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        print(f"üë§ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.first_name} {user.last_name}")
        print(f"   Telegram ID: {user.telegram_id}")
        print(f"   Username: @{user.username}")
        print(f"   –ë–∞–ª–∞–Ω—Å: {user.initial_balance} {user.currency}")
        print(f"   –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: {user.monthly_budget} {user.currency}")
        print(f"   –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {'‚úÖ' if user.is_setup_completed else '‚ùå'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è—Ö
        print("\nüí∞ –¢–†–ê–ù–ó–ê–ö–¶–Ü–á:")
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_transactions = session.query(Transaction).filter_by(user_id=user.id).count()
        total_income = session.query(func.sum(Transaction.amount)).filter_by(
            user_id=user.id, type=TransactionType.INCOME
        ).scalar() or 0
        total_expenses = session.query(func.sum(Transaction.amount)).filter_by(
            user_id=user.id, type=TransactionType.EXPENSE
        ).scalar() or 0
        
        print(f"   –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {total_transactions}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_income:.2f} {user.currency}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_expenses:.2f} {user.currency}")
        print(f"   –†—ñ–∑–Ω–∏—Ü—è: {total_income - total_expenses:.2f} {user.currency}")
        
        # –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        recent_transactions = session.query(Transaction).filter_by(user_id=user.id)\
            .order_by(Transaction.transaction_date.desc()).limit(5).all()
        
        print(f"\n   üìù –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
        for t in recent_transactions:
            type_icon = "üìà" if t.type == TransactionType.INCOME else "üìâ"
            category_name = t.category.name if t.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
            print(f"      {type_icon} {t.amount:.2f} {user.currency} - {category_name}")
            print(f"         {t.description} ({t.transaction_date.strftime('%d.%m.%Y')})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        print("\nüìÇ –ö–ê–¢–ï–ì–û–†–Ü–á:")
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        top_expense_categories = session.query(
            Category.name,
            func.sum(Transaction.amount).label('total'),
            func.count(Transaction.id).label('count')
        ).join(Transaction)\
        .filter(Transaction.user_id == user.id, Transaction.type == TransactionType.EXPENSE)\
        .group_by(Category.name)\
        .order_by(func.sum(Transaction.amount).desc())\
        .limit(5).all()
        
        print("   üí∏ –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç:")
        for cat_name, total, count in top_expense_categories:
            print(f"      {cat_name}: {total:.2f} {user.currency} ({count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π)")
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
        top_income_categories = session.query(
            Category.name,
            func.sum(Transaction.amount).label('total'),
            func.count(Transaction.id).label('count')
        ).join(Transaction)\
        .filter(Transaction.user_id == user.id, Transaction.type == TransactionType.INCOME)\
        .group_by(Category.name)\
        .order_by(func.sum(Transaction.amount).desc())\
        .limit(3).all()
        
        print("   üí∞ –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:")
        for cat_name, total, count in top_income_categories:
            print(f"      {cat_name}: {total:.2f} {user.currency} ({count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
        print("\nüìä –ü–û–¢–û–ß–ù–ò–ô –ú–Ü–°–Ø–¶–¨:")
        current_month_start = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        
        month_income = session.query(func.sum(Transaction.amount)).filter(
            Transaction.user_id == user.id,
            Transaction.type == TransactionType.INCOME,
            Transaction.transaction_date >= current_month_start
        ).scalar() or 0
        
        month_expenses = session.query(func.sum(Transaction.amount)).filter(
            Transaction.user_id == user.id,
            Transaction.type == TransactionType.EXPENSE,
            Transaction.transaction_date >= current_month_start
        ).scalar() or 0
        
        print(f"   –î–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å: {month_income:.2f} {user.currency}")
        print(f"   –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses:.2f} {user.currency}")
        if user.monthly_budget:
            remaining_budget = user.monthly_budget - month_expenses
            budget_usage = (month_expenses / user.monthly_budget) * 100
            print(f"   –ó–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É: {remaining_budget:.2f} {user.currency}")
            print(f"   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –±—é–¥–∂–µ—Ç—É: {budget_usage:.1f}%")
        
        # –ë—é–¥–∂–µ—Ç–Ω—ñ –ø–ª–∞–Ω–∏
        budget_plans = session.query(BudgetPlan).filter_by(user_id=user.id).count()
        print(f"\nüìã –ë–Æ–î–ñ–ï–¢–ù–Ü –ü–õ–ê–ù–ò: {budget_plans}")
        
        print("\n" + "="*60)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –¥–∞–Ω–∏—Ö: {e}")
        import traceback
        traceback.print_exc()
    finally:
        session.close()

def list_all_test_users():
    """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    session = create_session()
    
    try:
        test_ids = [123456789, 987654321, 555666777]
        users = session.query(User).filter(User.telegram_id.in_(test_ids)).all()
        
        if not users:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_test_data.py")
            return
        
        print("üß™ –¢–ï–°–¢–û–í–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–Ü:")
        print("="*60)
        for user in users:
            transaction_count = session.query(Transaction).filter_by(user_id=user.id).count()
            print(f"ID: {user.telegram_id} | @{user.username} | {user.first_name} {user.last_name}")
            print(f"–ë–∞–ª–∞–Ω—Å: {user.initial_balance} UAH | –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {transaction_count}")
            print("-" * 60)
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö FinAssistAI –±–æ—Ç–∞\n")
    
    if len(sys.argv) > 1:
        try:
            telegram_id = int(sys.argv[1])
            test_user_data(telegram_id)
        except ValueError:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç Telegram ID")
    else:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("  python test_data_analysis.py [TELEGRAM_ID]")
        print("\n–ê–±–æ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        print()
        list_all_test_users()
        print("\n–ü—Ä–∏–∫–ª–∞–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:")
        print("  python test_data_analysis.py 123456789")

if __name__ == "__main__":
    main()
