#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
"""

import sys
import os
import asyncio

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç—É –¥–æ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_operations import (
    get_or_create_user, 
    get_user_accounts, 
    add_transaction,
    get_user_main_account_id,
    create_account,
    get_user_categories,
    get_user_transactions
)
from database.models import TransactionType, AccountType

async def test_complete_integration():
    """–ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ —Ä–∞—Ö—É–Ω–∫—ñ–≤ —ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á")
    print("=" * 60)
    
    # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    test_telegram_id = 777777777
    user = get_or_create_user(
        telegram_id=test_telegram_id,
        username="integration_test",
        first_name="Integration",
        last_name="Test"
    )
    print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: ID={user.id}")
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏
    accounts = get_user_accounts(user.id)
    print(f"üìä –†–∞—Ö—É–Ω–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {len(accounts)}")
    
    if not accounts:
        print("üîß –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ä–∞—Ö—É–Ω–∫–∏...")
        main_account = create_account(
            user_id=user.id,
            name="–ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
            account_type=AccountType.BANK_CARD,
            balance=10000.0,
            is_main=True,
            icon='üí≥'
        )
        
        cash_account = create_account(
            user_id=user.id,
            name="–ì–æ—Ç—ñ–≤–∫–∞",
            account_type=AccountType.CASH,
            balance=2000.0,
            icon='üíµ'
        )
        
        accounts = get_user_accounts(user.id)
        print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤: {len(accounts)}")
    
    # 3. –ü–æ–∫–∞–∑—É—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏
    for account in accounts:
        main_mark = " ‚≠ê" if account.is_main else ""
        print(f"  {account.icon} {account.name} - {account.balance} {account.currency}{main_mark}")
    
    # 4. –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
    main_account_id = get_user_main_account_id(user.id)
    print(f"üéØ ID –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É: {main_account_id}")
    
    # 5. –¢–µ—Å—Ç—É—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–æ —Ä—ñ–∑–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
    print("\nüìù –¢–ï–°–¢–£–í–ê–ù–ù–Ø –î–û–î–ê–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô:")
    
    # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
    transaction1 = add_transaction(
        user_id=user.id,
        amount=500.0,
        description="–¢–µ—Å—Ç –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
        category_id=1,  # –ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —è–∫—â–æ –Ω–µ–º–∞—î
        transaction_type=TransactionType.EXPENSE,
        account_id=main_account_id
    )
    print(f"  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è 1: ID={transaction1.id}, –†–∞—Ö—É–Ω–æ–∫={transaction1.account_id}")
    
    # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –±–µ–∑ –≤–∫–∞–∑—ñ–≤–∫–∏ —Ä–∞—Ö—É–Ω–∫—É (–º–∞—î –ø—ñ—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π)
    transaction2 = add_transaction(
        user_id=user.id,
        amount=200.0,
        description="–¢–µ—Å—Ç –±–µ–∑ —Ä–∞—Ö—É–Ω–∫—É",
        category_id=1,
        transaction_type=TransactionType.INCOME
    )
    print(f"  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è 2: ID={transaction2.id}, –†–∞—Ö—É–Ω–æ–∫={transaction2.account_id}")
    
    # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –Ω–∞ —ñ–Ω—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫
    cash_account = next((acc for acc in accounts if acc.account_type == AccountType.CASH), None)
    if cash_account:
        transaction3 = add_transaction(
            user_id=user.id,
            amount=100.0,
            description="–¢–µ—Å—Ç –Ω–∞ –≥–æ—Ç—ñ–≤–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
            category_id=1,
            transaction_type=TransactionType.EXPENSE,
            account_id=cash_account.id
        )
        print(f"  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è 3: ID={transaction3.id}, –†–∞—Ö—É–Ω–æ–∫={transaction3.account_id}")
    
    # 6. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_transactions = get_user_transactions(user.id)
    print(f"\nüìä –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {len(user_transactions)}")
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ä–∞—Ö—É–Ω–∫–∞—Ö
    by_account = {}
    for trans in user_transactions:
        account_id = trans.account_id or "–ë–µ–∑ —Ä–∞—Ö—É–Ω–∫—É"
        if account_id not in by_account:
            by_account[account_id] = []
        by_account[account_id].append(trans)
    
    print("\nüìà –†–û–ó–ü–û–î–Ü–õ –ü–û –†–ê–•–£–ù–ö–ê–•:")
    for account_id, transactions in by_account.items():
        if account_id == "–ë–µ–∑ —Ä–∞—Ö—É–Ω–∫—É":
            account_name = "–ë–µ–∑ —Ä–∞—Ö—É–Ω–∫—É"
        else:
            account = next((acc for acc in accounts if acc.id == account_id), None)
            account_name = f"{account.icon} {account.name}" if account else f"–†–∞—Ö—É–Ω–æ–∫ #{account_id}"
        
        print(f"  {account_name}: {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
    
    print("\n" + "=" * 60)
    print("üèÜ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –ø—Ä–∞—Ü—é—î!")
    print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø—Ä–∏–≤'—è–∑—É—é—Ç—å—Å—è –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤!")
    print("‚úÖ –ê–≤—Ç–æ–≤–∏–±—ñ—Ä –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∞—Ü—é—î!")
    print("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∞!")

if __name__ == "__main__":
    asyncio.run(test_complete_integration())
