#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
"""

import sys
import os
sys.path.insert(0, os.path.abspath('.'))

def test_button_structure_after_chart():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É"""
    
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É...")
    
    with open('handlers/analytics_handler.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –®—É–∫–∞—î–º–æ –±–ª–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ—ñ–∫—É
    photo_section = content.find('await context.bot.send_photo(')
    if photo_section == -1:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫ send_photo")
        return False
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ reply_markup –ø—ñ—Å–ª—è send_photo
    reply_markup_start = content.find('reply_markup=InlineKeyboardMarkup([', photo_section)
    if reply_markup_start == -1:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ reply_markup –ø—ñ—Å–ª—è send_photo")
        return False
    
    # –í–∏—Ç—è–≥—É—î–º–æ –±–ª–æ–∫ –∫–Ω–æ–ø–æ–∫
    lines = content[reply_markup_start:].split('\n')
    button_lines = []
    bracket_count = 0
    
    for line in lines:
        button_lines.append(line)
        bracket_count += line.count('[') - line.count(']')
        if 'reply_markup=InlineKeyboardMarkup([' in line:
            bracket_count = 1
        elif bracket_count == 0 and '])' in line:
            break
    
    button_code = '\n'.join(button_lines)
    print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É:")
    print(button_code)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –Ω–µ–º–∞—î –∫–Ω–æ–ø–∫–∏ "–Ü–Ω—à–∏–π –≥—Ä–∞—Ñ—ñ–∫"
    if '–Ü–Ω—à–∏–π –≥—Ä–∞—Ñ—ñ–∫' in button_code:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ö–Ω–æ–ø–∫–∞ '–Ü–Ω—à–∏–π –≥—Ä–∞—Ñ—ñ–∫' –≤—Å–µ —â–µ –ø—Ä–∏—Å—É—Ç–Ω—è")
        return False
    else:
        print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∞ '–Ü–Ω—à–∏–π –≥—Ä–∞—Ñ—ñ–∫' –≤–∏–¥–∞–ª–µ–Ω–∞")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –∫–Ω–æ–ø–∫–∞ "–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥"
    if '–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥' in button_code:
        print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∞ '–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥' –ø—Ä–∏—Å—É—Ç–Ω—è")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ö–Ω–æ–ø–∫–∞ '–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥' –≤—ñ–¥—Å—É—Ç–Ω—è")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥"
    if 'chart_data_{data_type}_{chart_type}' in button_code:
        print("‚úÖ –£–°–ü–Ü–•: Callback –¥–ª—è '–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥' –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π callback –¥–ª—è '–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥'")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if '–î–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤' in button_code:
        print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∞ '–î–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤' –ø—Ä–∏—Å—É—Ç–Ω—è")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ö–Ω–æ–ø–∫–∞ '–î–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤' –≤—ñ–¥—Å—É—Ç–Ω—è")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if '"analytics_charts"' in button_code:
        print("‚úÖ –£–°–ü–Ü–•: Callback –¥–ª—è '–î–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤' –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π callback –¥–ª—è '–î–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤'")
        return False
    
    return True

def test_callback_handler():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ callback_handler –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—î chart_data_"""
    
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±—Ä–æ–±–∫—É callback'—ñ–≤...")
    
    with open('handlers/callback_handler.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –æ–±—Ä–æ–±–∫–∞ chart_data_
    if 'elif callback_data.startswith("chart_data_"):' in content:
        print("‚úÖ –£–°–ü–Ü–•: –û–±—Ä–æ–±–Ω–∏–∫ chart_data_ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –û–±—Ä–æ–±–Ω–∏–∫ chart_data_ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è show_chart_period_selection
    if 'await show_chart_period_selection(query, context, chart_type, data_type)' in content:
        print("‚úÖ –£–°–ü–Ü–•: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è show_chart_period_selection")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ show_chart_period_selection")
        return False
    
    return True

def test_navigation_flow():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
    
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó...")
    
    flow_steps = [
        "analytics_charts -> chart_type_pie/bar",
        "chart_type_* -> chart_data_expenses/income/comparison_*",
        "chart_data_*_* -> generate_chart_*_*_*",
        "generate_chart -> button: chart_data_*_* (–Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥)",
        "generate_chart -> button: analytics_charts (–î–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤)"
    ]
    
    print("üìã –õ–æ–≥—ñ–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:")
    for step in flow_steps:
        print(f"  {step}")
    
    print("‚úÖ –£–°–ü–Ü–•: –õ–æ–≥—ñ–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø—Ä–∞–≤–∏–ª—å–Ω–∞")
    return True

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É\n")
    
    result1 = test_button_structure_after_chart()
    result2 = test_callback_handler()
    result3 = test_navigation_flow()
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if result1 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"  –û–±—Ä–æ–±–∫–∞ callback'—ñ–≤: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if result2 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"  –õ–æ–≥—ñ–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if result3 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
    
    if result1 and result2 and result3:
        print(f"\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ö–Ω–æ–ø–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    else:
        print(f"\nüí• –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
