#!/usr/bin/env python3

"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç –≤—Å—ñ—Ö –∑–º—ñ–Ω –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
"""

import asyncio
import logging
from unittest.mock import Mock, AsyncMock, patch

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_complete_workflow():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ workflow –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    try:
        print("üß™ === –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ –°–¢–û–í–ü–ß–ê–°–¢–ò–• –ì–†–ê–§–Ü–ö–Ü–í ===")
        
        from handlers.callback_handler import handle_callback
        from handlers.analytics_handler import show_chart_period_selection
        
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç: chart_type_bar ‚Üí –ø—Ä—è–º–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É")
        
        # –ú–æ–∫–∞—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        with patch('handlers.callback_handler.get_user') as mock_get_user, \
             patch('handlers.callback_handler.show_chart_period_selection') as mock_show_period:
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            mock_user = Mock()
            mock_user.id = 12345
            mock_get_user.return_value = mock_user
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
            mock_show_period.return_value = None
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ update —Ç–∞ context –¥–ª—è chart_type_bar
            update = Mock()
            update.effective_user = Mock()
            update.effective_user.id = 12345
            
            query = Mock()
            query.data = "chart_type_bar"
            query.answer = AsyncMock()
            update.callback_query = query
            
            context = Mock()
            context.user_data = {}
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
            await handle_callback(update, context)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–ª–∏–∫ show_chart_period_selection
            mock_show_period.assert_called_once_with(query, context, "bar", "comparison")
            print("‚úÖ chart_type_bar –≤–∏–∫–ª–∏–∫–∞—î show_chart_period_selection –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ —É –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å–∞–º—É —Ñ—É–Ω–∫—Ü—ñ—é show_chart_period_selection
        query_test = Mock()
        query_test.edit_message_text = AsyncMock()
        context_test = Mock()
        context_test.user_data = {}
        
        await show_chart_period_selection(query_test, context_test, "bar", "comparison")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–∏–∫–ª–∏–∫
        call_args = query_test.edit_message_text.call_args
        reply_markup = call_args.kwargs.get('reply_markup')
        keyboard = reply_markup.inline_keyboard
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert len(keyboard) == 2, f"–û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 2 —Ä—è–¥–∫–∏, –æ—Ç—Ä–∏–º–∞–Ω–æ {len(keyboard)}"
        
        # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫: –ú—ñ—Å—è—Ü—å, –¢–∏–∂–¥–µ–Ω—å
        first_row = keyboard[0]
        assert len(first_row) == 2, "–ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 2 –∫–Ω–æ–ø–∫–∏"
        assert "–ú—ñ—Å—è—Ü—å" in first_row[0].text
        assert "–¢–∏–∂–¥–µ–Ω—å" in first_row[1].text
        assert first_row[0].callback_data == "generate_chart_bar_comparison_month"
        assert first_row[1].callback_data == "generate_chart_bar_comparison_week"
        
        # –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫: –î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (–Ω–µ –¥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö!)
        second_row = keyboard[1]
        assert len(second_row) == 1, "–î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 1 –∫–Ω–æ–ø–∫—É"
        assert "–≥—Ä–∞—Ñ—ñ–∫—ñ–≤" in second_row[0].text.lower()
        assert second_row[0].callback_data == "analytics_charts"
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∞: [–ú—ñ—Å—è—Ü—å, –¢–∏–∂–¥–µ–Ω—å] + [–î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤]")
        
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç: –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –±–µ–∑ –∑–º—ñ–Ω")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏ –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—é—Ç—å –ø–æ-—Å—Ç–∞—Ä–æ–º—É
        with patch('handlers.callback_handler.get_user') as mock_get_user, \
             patch('handlers.callback_handler.show_chart_data_type_selection') as mock_show_data_type:
            
            mock_user = Mock()
            mock_user.id = 12345
            mock_get_user.return_value = mock_user
            mock_show_data_type.return_value = None
            
            update = Mock()
            update.effective_user = Mock()
            update.effective_user.id = 12345
            
            query = Mock()
            query.data = "chart_type_pie"
            query.answer = AsyncMock()
            update.callback_query = query
            
            context = Mock()
            context.user_data = {}
            
            await handle_callback(update, context)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è show_chart_data_type_selection
            mock_show_data_type.assert_called_once_with(query, context, "pie")
            print("‚úÖ –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏ –≤—Å–µ —â–µ –ø–æ–∫–∞–∑—É—é—Ç—å –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–∞–Ω–∏—Ö")
        
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç: –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏
        query_pie = Mock()
        query_pie.edit_message_text = AsyncMock()
        context_pie = Mock()
        context_pie.user_data = {}
        
        await show_chart_period_selection(query_pie, context_pie, "pie", "expenses")
        
        call_args = query_pie.edit_message_text.call_args
        reply_markup = call_args.kwargs.get('reply_markup')
        keyboard = reply_markup.inline_keyboard
        
        # –î–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ–≤–∏–Ω–Ω–∞ –≤–µ—Å—Ç–∏ –¥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
        back_button = keyboard[1][0]
        assert "—Ç–∏–ø—É –¥–∞–Ω–∏—Ö" in back_button.text.lower()
        assert back_button.callback_data == "chart_type_pie"
        
        print("‚úÖ –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏: –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –≤–µ–¥–µ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–∞–Ω–∏—Ö")
        
        print("\nüéâ === –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û! ===")
        print("\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–º—ñ–Ω:")
        print("‚Ä¢ –°—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –≥—Ä–∞—Ñ—ñ–∫–∏: –ø—Ä—è–º–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É")
        print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö 'comparison' –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
        print("‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'")
        print("‚Ä¢ –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –±–µ–∑ –∑–º—ñ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")
    
    result = await test_complete_workflow()
    
    if result:
        print("\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ –£–°–ü–Ü–®–ù–ò–ô!")
        print("üöÄ –ó–º—ñ–Ω–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
    else:
        print("\n‚ùå –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–®–û–í!")

if __name__ == "__main__":
    asyncio.run(main())
