#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ workflow –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
"""

import asyncio
import sys
import os
from unittest.mock import Mock, AsyncMock
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from handlers.transaction_handler import (
    show_add_transaction_menu,
    show_upload_statement_form,
    handle_remove_duplicates,
    handle_set_import_period
)
from handlers.message_handler import handle_document_message, show_transactions_preview

async def demo_transaction_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è workflow –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ '–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó'")
    print("=" * 60)
    
    # –Ü–º—ñ—Ç—É—î–º–æ Telegram –æ–±—ä–µ–∫—Ç–∏
    mock_query = Mock()
    mock_query.edit_message_text = AsyncMock()
    mock_query.message = Mock()
    mock_query.message.reply_text = AsyncMock()
    mock_query.message.edit_text = AsyncMock()
    
    mock_context = Mock()
    mock_context.user_data = {}
    
    # 1. –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    print("1Ô∏è‚É£ –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
    await show_add_transaction_menu(mock_query, mock_context)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ mock –æ–±'—î–∫—Ç–∞
    call_args = mock_query.edit_message_text.call_args
    if call_args:
        message_text = call_args[0][0] if call_args[0] else call_args[1].get('text', '')
        print(f"üì± –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É:\n{message_text}")
    
    print("\n" + "-" * 40)
    
    # 2. –ü–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ä–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏
    print("2Ô∏è‚É£ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É':")
    await show_upload_statement_form(mock_query, mock_context)
    
    call_args = mock_query.edit_message_text.call_args
    if call_args:
        message_text = call_args[0][0] if call_args[0] else call_args[1].get('text', '')
        print(f"üì± –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É:\n{message_text}")
    
    print("\n" + "-" * 40)
    
    # 3. –Ü–º—ñ—Ç—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    print("3Ô∏è‚É£ –Ü–º—ñ—Ç—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ñ–∞–π–ª—É:")
    
    mock_transactions = [
        {
            'date': datetime(2024, 5, 20),
            'amount': 150.75,
            'description': '–ü–æ–∫—É–ø–∫–∏ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ',
            'type': 'expense',
            'category': '–ü—Ä–æ–¥—É–∫—Ç–∏'
        },
        {
            'date': datetime(2024, 5, 21),
            'amount': 3000.00,
            'description': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
            'type': 'income',
            'category': '–î–æ—Ö—ñ–¥'
        },
        {
            'date': datetime(2024, 5, 22),
            'amount': 89.50,
            'description': '–ö–∞—Ñ–µ –Ω–∞ —Ä–æ–±–æ—Ç—ñ',
            'type': 'expense',
            'category': '–ö–∞—Ñ–µ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏'
        }
    ]
    
    mock_context.user_data['parsed_transactions'] = mock_transactions
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
    await show_transactions_preview(mock_query.message, mock_context, mock_transactions)
    
    call_args = mock_query.message.edit_text.call_args
    if call_args:
        message_text = call_args[0][0] if call_args[0] else call_args[1].get('text', '')
        print(f"üì± –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:\n{message_text}")
    
    print("\n" + "-" * 40)
    
    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    print("4Ô∏è‚É£ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î '–í–∏–∫–ª—é—á–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏':")
    
    # –î–æ–¥–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç
    mock_transactions.append({
        'date': datetime(2024, 5, 20),
        'amount': 150.75,
        'description': '–ü–æ–∫—É–ø–∫–∏ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ (–¥—É–±–ª—ñ–∫–∞—Ç)',
        'type': 'expense',
        'category': '–ü—Ä–æ–¥—É–∫—Ç–∏'
    })
    
    mock_context.user_data['parsed_transactions'] = mock_transactions
    
    mock_query.data = "remove_duplicates"
    await handle_remove_duplicates(mock_query, mock_context)
    
    print(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤. –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(mock_context.user_data['parsed_transactions'])}")
    
    print("\n" + "-" * 40)
    
    # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É
    print("5Ô∏è‚É£ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –ø–µ—Ä—ñ–æ–¥ —ñ–º–ø–æ—Ä—Ç—É:")
    
    await handle_set_import_period(mock_query, mock_context)
    
    call_args = mock_query.edit_message_text.call_args
    if call_args:
        message_text = call_args[0][0] if call_args[0] else call_args[1].get('text', '')
        print(f"üì± –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É:\n{message_text}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüéâ –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ '–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó':")
    print("  ‚úì –¢—Ä–∏ —Å–ø–æ—Å–æ–±–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: —Ä—É—á–Ω–µ, –≤–∏–ø–∏—Å–∫–∞, —Ñ–æ—Ç–æ —á–µ–∫—É")
    print("  ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ PDF, Excel, CSV —Ñ–∞–π–ª—ñ–≤")
    print("  ‚úì –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
    print("  ‚úì –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
    print("  ‚úì –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É —ñ–º–ø–æ—Ä—Ç—É")
    print("  ‚úì –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è")

def main():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    asyncio.run(demo_transaction_workflow())

if __name__ == "__main__":
    main()
