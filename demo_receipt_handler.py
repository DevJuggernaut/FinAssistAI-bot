#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∞ –≤–µ—Ä—Å—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
"""

import os
import logging
from datetime import datetime
from typing import Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database.models import TransactionType
from database.db_operations import get_user, add_transaction, get_user_categories

logger = logging.getLogger(__name__)

def create_demo_receipt_result() -> Dict:
    """–°—Ç–≤–æ—Ä—é—î —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    
    # –ê–Ω–∞–ª—ñ–∑—É—é—á–∏ —Ñ–æ—Ç–æ —á–µ–∫—É, —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    items = [
        {
            'name': 'Sprite 0.5 –ª',
            'price': 59.90,
            'quantity': 1,
            'category': '–Ω–∞–ø–æ—ó'
        },
        {
            'name': '–ü–∏–≤–æ Corona Extra 0.33 –ª',
            'price': 145.80,
            'quantity': 1,
            'category': '–∞–ª–∫–æ–≥–æ–ª—å'
        },
        {
            'name': '–õ–∏–º–æ–Ω–∞–¥ –ù–∞—Ç–∞—à—Ç–∞—Ä—ñ 0.5 –ª',
            'price': 64.00,
            'quantity': 1,
            'category': '–Ω–∞–ø–æ—ó'
        },
        {
            'name': 'Coca-Cola 0.33 –ª',
            'price': 37.80,
            'quantity': 1,
            'category': '–Ω–∞–ø–æ—ó'
        },
        {
            'name': '–Ø—î—á–Ω–∞ –ø–∞—Å—Ç–∞ –∑ —Ç—É–Ω—Ü–µ–º',
            'price': 30.50,
            'quantity': 1,
            'category': '–≥–æ—Ç–æ–≤—ñ —Å—Ç—Ä–∞–≤–∏'
        },
        {
            'name': '–°–º–µ—Ç–∞–Ω–∞ –∫–ª–∞—Å–∏–∫ 15%',
            'price': 97.00,
            'quantity': 1,
            'category': '–º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏'
        },
        {
            'name': '–ê—Å–æ—Ä—Ç—ñ –º–µ—Ä 500 –≥',
            'price': 149.30,
            'quantity': 1,
            'category': '–º\'—è—Å–æ —Ç–∞ –∫–æ–≤–±–∞—Å–∏'
        },
        {
            'name': '–û–±—Å—è–Ω–æ—á–∫–∞ –∫–∞—à–∞',
            'price': 113.50,
            'quantity': 1,
            'category': '–∫—Ä—É–ø–∏ —Ç–∞ –∫–∞—à—ñ'
        },
        {
            'name': '–ë—ñ—Ñ—ñ–¥–æ–π–æ–≥—É—Ä—Ç –ê–∫—Ç–∏–≤—ñ–∞',
            'price': 30.50,
            'quantity': 1,
            'category': '–º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏'
        }
    ]
    
    # –ì—Ä—É–ø—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categorized_items = {}
    for item in items:
        category = item['category']
        if category not in categorized_items:
            categorized_items[category] = {
                'items': [],
                'total_amount': 0.0,
                'item_count': 0
            }
        
        categorized_items[category]['items'].append({
            'name': item['name'],
            'price': item['price'],
            'quantity': item['quantity']
        })
        categorized_items[category]['total_amount'] += item['price']
        categorized_items[category]['item_count'] += 1
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞
    total_amount = sum(item['price'] for item in items)
    
    return {
        'store_name': '–¢–ê–í–†–Ü–Ø –í',
        'total_amount': total_amount,
        'date': datetime(2025, 6, 24, 21, 9),
        'items': items,
        'categorized_items': categorized_items,
        'item_count': len(items),
        'raw_text': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —á–µ–∫ –∑ —ñ–¥–µ–∞–ª—å–Ω–∏–º —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º'
    }

async def handle_photo_demo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–ê –≤–µ—Ä—Å—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —á–µ–∫—ñ–≤ –∑ —ñ–¥–µ–∞–ª—å–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        os.makedirs('uploads', exist_ok=True)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
        file_path = f'uploads/receipt_demo_{user.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'
        await file.download_to_drive(file_path)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        processing_message = await update.message.reply_text(
            "üîç –†–æ–∑–ø—ñ–∑–Ω–∞—é —á–µ–∫...\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥"
        )
        
        # –Ü–º—ñ—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É (–ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ)
        import asyncio
        await asyncio.sleep(2)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        receipt_data = create_demo_receipt_result()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await processing_message.edit_text(f"‚úÖ –ß–µ–∫ {receipt_data['store_name']} —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await send_demo_receipt_summary(update, receipt_data, user)
        
    except Exception as e:
        logger.error(f"Error in demo photo handler: {str(e)}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —á–µ–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def send_demo_receipt_summary(update: Update, receipt_data: Dict, user):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ —á–µ–∫—É –∑ —ñ–¥–µ–∞–ª—å–Ω–∏–º —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º"""
    try:
        categorized_items = receipt_data.get('categorized_items', {})
        
        # –§–æ—Ä–º—É—î–º–æ –∫—Ä–∞—Å–∏–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_parts = [
            "üõí **–¢–ê–í–†–Ü–Ø –í - –ß–µ–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —ñ–¥–µ–∞–ª—å–Ω–æ!**",
            f"üí∞ **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:** {receipt_data['total_amount']:.2f} –≥—Ä–Ω",
            f"üìÖ **–î–∞—Ç–∞:** {receipt_data.get('date', datetime.now()).strftime('%d.%m.%Y %H:%M')}",
            f"üõçÔ∏è **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤:** {receipt_data['item_count']}",
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ–π:** {len(categorized_items)}",
            ""
        ]
        
        # –Ü–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        category_icons = {
            '–Ω–∞–ø–æ—ó': 'ü•§',
            '–∞–ª–∫–æ–≥–æ–ª—å': 'üç∫',
            '–≥–æ—Ç–æ–≤—ñ —Å—Ç—Ä–∞–≤–∏': 'üçΩÔ∏è',
            '–º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏': 'ü•õ',
            '–º\'—è—Å–æ —Ç–∞ –∫–æ–≤–±–∞—Å–∏': 'ü•ì',
            '–∫—Ä—É–ø–∏ —Ç–∞ –∫–∞—à—ñ': 'üåæ'
        }
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
        total_saved = 0
        for category, data in categorized_items.items():
            icon = category_icons.get(category, 'üì¶')
            items = data['items']
            category_total = data['total_amount']
            item_count = data['item_count']
            
            message_parts.append(f"{icon} **{category.title()}** ({item_count} –ø–æ–∑.): {category_total:.2f} –≥—Ä–Ω")
            
            # –î–æ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 3 –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è)
            for i, item in enumerate(items[:3]):
                message_parts.append(f"   ‚Ä¢ {item['name']}: {item['price']:.2f} –≥—Ä–Ω")
            
            if len(items) > 3:
                message_parts.append(f"   ‚Ä¢ ... —Ç–∞ —â–µ {len(items) - 3} —Ç–æ–≤–∞—Ä—ñ–≤")
            
            message_parts.append("")  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            user_categories = get_user_categories(user.id)
            category_id = None
            for cat in user_categories:
                if cat.name.lower() == category.lower():
                    category_id = cat.id
                    break
            
            # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É
            if not category_id and user_categories:
                category_id = user_categories[0].id
            
            # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            add_transaction(
                user_id=user.id,
                amount=category_total,
                description=f"–¢–ê–í–†–Ü–Ø –í - {category} ({item_count} —Ç–æ–≤–∞—Ä—ñ–≤)",
                category_id=category_id,
                transaction_type=TransactionType.EXPENSE,
                transaction_date=receipt_data.get('date', datetime.now()),
                source='tavria_receipt_demo'
            )
            total_saved += category_total
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        message_parts.extend([
            "‚ú® **–†–ï–ó–£–õ–¨–¢–ê–¢ –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø:**",
            f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—É–º—É: **{total_saved:.2f} –≥—Ä–Ω**",
            f"üìä –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö: **{len(categorized_items)}**",
            f"üéØ –¢–æ—á–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: **100%**",
            "",
            "üî• **–í—Å—ñ —Ç–æ–≤–∞—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —ñ–¥–µ–∞–ª—å–Ω–æ!**"
        ])
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await update.message.reply_text(
            "\n".join(message_parts),
            parse_mode="Markdown"
        )
        
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó
        keyboard = [
            [
                InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats"),
                InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç", callback_data="show_charts")
            ],
            [
                InlineKeyboardButton("üõí –î–æ–¥–∞—Ç–∏ —â–µ —á–µ–∫", callback_data="add_receipt"),
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéâ **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            "–Ø–∫ –±–∞—á–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î:\n"
            "‚Ä¢ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —á–µ–∫—É\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ —Ü—ñ–Ω–∏\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—é\n"
            "‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—É —Å—É–º—É\n\n"
            "**–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?**",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error sending demo receipt summary: {str(e)}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.")

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
def test_demo_result():
    """–¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
    result = create_demo_receipt_result()
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 50)
    print(f"–ú–∞–≥–∞–∑–∏–Ω: {result['store_name']}")
    print(f"–°—É–º–∞: {result['total_amount']:.2f} –≥—Ä–Ω")
    print(f"–¢–æ–≤–∞—Ä—ñ–≤: {result['item_count']}")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(result['categorized_items'])}")
    
    for category, data in result['categorized_items'].items():
        print(f"\n{category}: {data['total_amount']:.2f} –≥—Ä–Ω ({data['item_count']} —Ç–æ–≤–∞—Ä—ñ–≤)")
        for item in data['items']:
            print(f"  - {item['name']}: {item['price']:.2f} –≥—Ä–Ω")

if __name__ == "__main__":
    test_demo_result()
