#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü—ñ—ó —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
"""

import sys
import os
import asyncio
from unittest.mock import AsyncMock, MagicMock

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç—É –¥–æ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_real_workflow():
    """–¢–µ—Å—Ç—É—î —Ä–µ–∞–ª—å–Ω–∏–π –≤–æ—Ä–∫—Ñ–ª–æ–≤ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    
    print("üîÑ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –í–û–†–ö–§–õ–û–í–£")
    print("=" * 50)
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    from handlers.message_handler import show_transactions_preview
    from handlers.transaction_handler import show_privatbank_excel_guide, show_monobank_excel_guide
    from handlers.callback_handler import handle_callback
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
    mock_message = MagicMock()
    mock_message.edit_text = AsyncMock()
    mock_query = MagicMock()
    mock_query.edit_message_text = AsyncMock()
    mock_query.data = ""
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    test_transactions = [
        {
            'date': '2025-06-25',
            'amount': 150.0,
            'description': '–ê–¢–ë –ø—Ä–æ–¥—É–∫—Ç–∏',
            'type': 'expense'
        },
        {
            'date': '2025-06-24',
            'amount': 50.0,
            'description': '–ö–∞—Ñ–µ',
            'type': 'expense'
        }
    ]
    
    # –°–∏–º—É–ª—è—Ü—ñ—è 1: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ Excel
    print("üîç –°–∏–º—É–ª—è—Ü—ñ—è 1: –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ Excel")
    context1 = MagicMock()
    context1.user_data = {}
    
    # –ö—Ä–æ–∫ 1: –û–±–∏—Ä–∞—î–º–æ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ Excel (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ file_source)
    mock_query.data = "privatbank_excel_guide"
    await show_privatbank_excel_guide(mock_query, context1)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ file_source –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    print(f"   file_source: {context1.user_data.get('file_source', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
    
    # –ö—Ä–æ–∫ 2: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª —ñ –±–∞—á–∏–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)
    context1.user_data['awaiting_file'] = 'excel'
    await show_transactions_preview(mock_message, context1, test_transactions)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    call_args = mock_message.edit_text.call_args
    if call_args:
        reply_markup = call_args[1]['reply_markup']
        has_edit_button = any("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in str(button) for row in reply_markup.inline_keyboard for button in row)
        print(f"   –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {'–ø—Ä–∏—Å—É—Ç–Ω—è' if has_edit_button else '–≤—ñ–¥—Å—É—Ç–Ω—è'} ‚úÖ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ –ø–µ—Ä—à–æ–º—É —Ä—è–¥—É
        first_row_buttons = len(reply_markup.inline_keyboard[0])
        print(f"   –ö–Ω–æ–ø–æ–∫ —É –ø–µ—Ä—à–æ–º—É —Ä—è–¥—É: {first_row_buttons} (–æ—á—ñ–∫—É—î—Ç—å—Å—è 1)")
        
        if not has_edit_button and first_row_buttons == 1:
            print("   ‚úÖ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ Excel: –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è")
        else:
            print("   ‚ùå –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ Excel: –ø–æ–º–∏–ª–∫–∞ –∑ –∫–Ω–æ–ø–∫–æ—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
    
    # –°–∫–∏–¥–∞—î–º–æ –º–æ–∫
    mock_message.edit_text.reset_mock()
    
    # –°–∏–º—É–ª—è—Ü—ñ—è 2: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î –ú–æ–Ω–æ–ë–∞–Ω–∫ CSV
    print("\nüîç –°–∏–º—É–ª—è—Ü—ñ—è 2: –ú–æ–Ω–æ–ë–∞–Ω–∫ CSV")
    context2 = MagicMock()
    context2.user_data = {'file_source': 'monobank', 'awaiting_file': 'csv'}
    
    await show_transactions_preview(mock_message, context2, test_transactions)
    
    call_args = mock_message.edit_text.call_args
    if call_args:
        reply_markup = call_args[1]['reply_markup']
        has_edit_button = any("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in str(button) for row in reply_markup.inline_keyboard for button in row)
        first_row_buttons = len(reply_markup.inline_keyboard[0])
        
        print(f"   file_source: {context2.user_data.get('file_source')}")
        print(f"   awaiting_file: {context2.user_data.get('awaiting_file')}")
        print(f"   –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {'–ø—Ä–∏—Å—É—Ç–Ω—è' if has_edit_button else '–≤—ñ–¥—Å—É—Ç–Ω—è'} ‚úÖ")
        print(f"   –ö–Ω–æ–ø–æ–∫ —É –ø–µ—Ä—à–æ–º—É —Ä—è–¥—É: {first_row_buttons} (–æ—á—ñ–∫—É—î—Ç—å—Å—è 1)")
        
        if not has_edit_button and first_row_buttons == 1:
            print("   ‚úÖ –ú–æ–Ω–æ–ë–∞–Ω–∫ CSV: –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è")
        else:
            print("   ‚ùå –ú–æ–Ω–æ–ë–∞–Ω–∫ CSV: –ø–æ–º–∏–ª–∫–∞ –∑ –∫–Ω–æ–ø–∫–æ—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
    
    # –°–∫–∏–¥–∞—î–º–æ –º–æ–∫
    mock_message.edit_text.reset_mock()
    
    # –°–∏–º—É–ª—è—Ü—ñ—è 3: –ó–≤–∏—á–∞–π–Ω–∏–π —Ñ–∞–π–ª (–Ω–µ –±–∞–Ω–∫)
    print("\nüîç –°–∏–º—É–ª—è—Ü—ñ—è 3: –ó–≤–∏—á–∞–π–Ω–∏–π —Ñ–∞–π–ª")
    context3 = MagicMock()
    context3.user_data = {'file_source': 'manual', 'awaiting_file': 'unknown'}
    
    await show_transactions_preview(mock_message, context3, test_transactions)
    
    call_args = mock_message.edit_text.call_args
    if call_args:
        reply_markup = call_args[1]['reply_markup']
        has_edit_button = any("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in str(button) for row in reply_markup.inline_keyboard for button in row)
        first_row_buttons = len(reply_markup.inline_keyboard[0])
        
        print(f"   file_source: {context3.user_data.get('file_source')}")
        print(f"   awaiting_file: {context3.user_data.get('awaiting_file')}")
        print(f"   –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {'–ø—Ä–∏—Å—É—Ç–Ω—è' if has_edit_button else '–≤—ñ–¥—Å—É—Ç–Ω—è'} ‚úÖ")
        print(f"   –ö–Ω–æ–ø–æ–∫ —É –ø–µ—Ä—à–æ–º—É —Ä—è–¥—É: {first_row_buttons} (–æ—á—ñ–∫—É—î—Ç—å—Å—è 2)")
        
        if has_edit_button and first_row_buttons == 2:
            print("   ‚úÖ –ó–≤–∏—á–∞–π–Ω–∏–π —Ñ–∞–π–ª: –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è")
        else:
            print("   ‚ùå –ó–≤–∏—á–∞–π–Ω–∏–π —Ñ–∞–π–ª: –ø–æ–º–∏–ª–∫–∞ –∑ –∫–Ω–æ–ø–∫–æ—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
    
    print("\n" + "=" * 50)
    print("üèÜ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –í–û–†–ö–§–õ–û–í–£ –ó–ê–í–ï–†–®–ï–ù–û")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_real_workflow())
