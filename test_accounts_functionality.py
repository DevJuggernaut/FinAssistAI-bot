#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É —Ä–∞—Ö—É–Ω–∫—ñ–≤ –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó.
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.db_operations import *
from database.models import AccountType

def test_accounts_functionality():
    """–¢–µ—Å—Ç—É—î –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ä–∞—Ö—É–Ω–∫—ñ–≤"""
    
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–û–ù–ê–õ–£ –†–ê–•–£–ù–ö–Ü–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID 580683833 –≤–∂–µ —ñ—Å–Ω—É—î)
    test_user_telegram_id = 580683833
    user = get_user(test_user_telegram_id)
    
    if not user:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        return False
    
    print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: {user.first_name} (ID: {user.id})")
    
    # 1. –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤
    print("\nüìã –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    accounts = get_user_accounts(user.id)
    print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤: {len(accounts)}")
    
    for account in accounts:
        print(f"   ‚Ä¢ {account.name} ({account.account_type.value}): {account.balance} {account.currency}")
        if account.is_main:
            print("     ‚≠ê –ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫")
    
    # 2. –¢–µ—Å—Ç –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
    print("\nüí∞ –¢–µ—Å—Ç 2: –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å")
    total = get_total_balance(user.id)
    print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total}")
    
    # 3. –¢–µ—Å—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
    print("\nüè¶ –¢–µ—Å—Ç 3: –ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫")
    main_account = get_main_account(user.id)
    if main_account:
        print(f"   –ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {main_account.name}")
        print(f"   –ë–∞–ª–∞–Ω—Å: {main_account.balance} {main_account.currency}")
        print(f"   –¢–∏–ø: {main_account.account_type.value}")
    else:
        print("   ‚ùå –ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
    
    # 4. –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
    print("\n‚ûï –¢–µ—Å—Ç 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É")
    try:
        new_account = create_account(
            user_id=user.id,
            name="–¢–µ—Å—Ç–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
            account_type=AccountType.BANK_CARD,
            balance=1000.0,
            currency="UAH",
            is_main=False,
            description="–¢–µ—Å—Ç–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
        )
        print(f"   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫: {new_account.name} (ID: {new_account.id})")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {str(e)}")
    
    # 5. –¢–µ—Å—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–∞—Ö—É–Ω–∫—ñ–≤
    print("\nüìä –¢–µ—Å—Ç 5: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—Ö—É–Ω–∫—ñ–≤")
    count = get_accounts_count(user.id)
    print(f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤: {count}")
    
    # 6. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Ö—É–Ω–∫—ñ–≤
    print("\nüìà –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Ö—É–Ω–∫—ñ–≤")
    try:
        stats = get_accounts_statistics(user.id)
        print(f"   –í—Å—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤: {stats['total_accounts']}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']}")
        print(f"   –ú—ñ—Å—è—á–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {stats['monthly_transactions']}")
        print(f"   –ú—ñ—Å—è—á–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è: {stats['monthly_growth']}")
        
        print("   –ü–æ —Ç–∏–ø–∞—Ö:")
        for type_name, data in stats['by_type'].items():
            print(f"     ‚Ä¢ {type_name}: {data['count']} —à—Ç., {data['balance']} –≥—Ä–Ω")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

def test_setup_process_simulation():
    """–°–∏–º—É–ª—é—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ"""
    
    print("\nüöÄ –°–ò–ú–£–õ–Ø–¶–Ü–Ø –ü–†–û–¶–ï–°–£ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø")
    print("=" * 50)
    
    # –°–∏–º—É–ª—é—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
    fake_user_id = 999999  # –ù–µ —ñ—Å–Ω—É—î –≤ –ë–î
    balance = 5000.0
    currency = "UAH"
    
    print(f"–°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {fake_user_id}")
    print(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balance} {currency}")
    
    try:
        account = create_account(
            user_id=fake_user_id,
            name="–ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
            account_type=AccountType.CASH,
            balance=balance,
            currency=currency,
            is_main=True,
            icon='üí∞',
            description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≥–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"
        )
        print(f"‚úÖ –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {account.name} (ID: {account.id})")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    success1 = test_accounts_functionality()
    success2 = test_setup_process_simulation()
    
    if success1 and success2:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏.")
