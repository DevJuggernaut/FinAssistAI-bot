#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –≤–∏–ø–∏—Å–æ–∫
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
from services.statement_parser import statement_parser
from services.ml_categorizer import transaction_categorizer

def test_category_assignment():
    """–¢–µ—Å—Ç—É—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–ø–∏—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∫–µ–π—Å–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó
    test_cases = [
        # –í–∏—Ç—Ä–∞—Ç–∏
        ("–ü–æ–∫—É–ø–∫–∞ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ –°—ñ–ª—å–ø–æ", "expense", "groceries"),
        ("–û–ø–ª–∞—Ç–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ McDonald's", "expense", "restaurants"),
        ("–ó–∞–ø—Ä–∞–≤–∫–∞ WOG", "expense", "transport"),
        ("Uber –ø–æ—ó–∑–¥–∫–∞", "expense", "transport"),
        ("–û–ø–ª–∞—Ç–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É", "expense", "utilities"),
        ("–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "expense", "utilities"),
        ("–ü–æ–∫—É–ø–∫–∞ –≤ –∞–ø—Ç–µ—Ü—ñ", "expense", "health"),
        ("–†–æ–∑–µ—Ç–∫–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", "expense", "shopping"),
        ("Apple Store", "expense", "shopping"),
        ("–ö—É—Ä—Å–∏ –Ω–∞–≤—á–∞–Ω–Ω—è", "expense", "education"),
        ("–°–∞–ª–æ–Ω –∫—Ä–∞—Å–∏", "expense", "beauty"),
        ("–ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä", "expense", "entertainment"),
        ("Netflix –ø—ñ–¥–ø–∏—Å–∫–∞", "expense", "entertainment"),
        ("–î–∏—Ç—è—á—ñ —Ç–æ–≤–∞—Ä–∏", "expense", "kids"),
        
        # –î–æ—Ö–æ–¥–∏
        ("–ó–∞—Ä–ø–ª–∞—Ç–∞", "income", "salary"),
        ("–ê–≤–∞–Ω—Å", "income", "salary"),
        ("–ö–µ—à–±–µ–∫ –≤—ñ–¥ –±–∞–Ω–∫—É", "income", "cashback"),
        ("–ë–æ–Ω—É—Å –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", "income", "cashback"),
        ("–§—Ä—ñ–ª–∞–Ω—Å–µ—Ä—Å—å–∫–∞ —Ä–æ–±–æ—Ç–∞", "income", "freelance"),
        ("–ü—ñ–¥—Ä–æ–±—ñ—Ç–æ–∫", "income", "freelance"),
        ("–ü–æ–¥–∞—Ä—É–Ω–æ–∫ –≥—Ä–æ—à–∏–º–∞", "income", "gift"),
        ("–î–∏–≤—ñ–¥–µ–Ω–¥–∏", "income", "investment"),
        ("–ü—Ä–∏–±—É—Ç–æ–∫ –≤—ñ–¥ –ø—Ä–æ–¥–∞–∂—É", "income", "business"),
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ/–Ω–µ–≤—ñ–¥–æ–º—ñ
        ("–û–ø–µ—Ä–∞—Ü—ñ—è –±–µ–∑ –æ–ø–∏—Å—É", "expense", "other"),
        ("–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è", "expense", "other"),
        ("–ü–µ—Ä–µ–∫–∞–∑ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", "income", "income"),
    ]
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
    print("=" * 60)
    
    correct_predictions = 0
    total_tests = len(test_cases)
    
    for description, transaction_type, expected_category in test_cases:
        predicted_category = transaction_categorizer.suggest_category_for_bank_statement(description, transaction_type)
        
        is_correct = predicted_category == expected_category
        status = "‚úÖ" if is_correct else "‚ùå"
        
        if is_correct:
            correct_predictions += 1
        
        print(f"{status} {description[:40]:<40} | {transaction_type:<7} | {predicted_category:<12} | (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {expected_category})")
        
        if not is_correct:
            print(f"   üîç –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: '{description.lower()}' -> '{predicted_category}'")
    
    print("=" * 60)
    accuracy = (correct_predictions / total_tests) * 100
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ: {correct_predictions}/{total_tests}")
    print(f"   –¢–æ—á–Ω—ñ—Å—Ç—å: {accuracy:.1f}%")
    
    if accuracy >= 80:
        print("üéâ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù–û! –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—î –¥–æ–±—Ä–µ.")
    else:
        print("‚ö†Ô∏è  –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù–û. –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó.")
    
    return accuracy >= 80

def test_transaction_structure():
    """–¢–µ—Å—Ç—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    test_transactions = [
        {
            'date': '2025-01-01',
            'amount': 150.50,
            'description': '–ü–æ–∫—É–ø–∫–∞ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ –ê–¢–ë',
            'type': 'expense'
        },
        {
            'date': '2025-01-02', 
            'amount': 5000.00,
            'description': '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –≥—Ä—É–¥–µ–Ω—å',
            'type': 'income'
        },
        {
            'date': '2025-01-03',
            'amount': 45.25,
            'description': 'Uber –ø–æ—ó–∑–¥–∫–∞ –¥–æ –æ—Ñ—ñ—Å—É',
            'type': 'expense'
        }
    ]
    
    print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
    print("=" * 60)
    
    all_passed = True
    
    for i, trans in enumerate(test_transactions, 1):
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ –∫–æ–∂–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        category = transaction_categorizer.suggest_category_for_bank_statement(trans['description'], trans['type'])
        trans['category'] = category
        
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {i}:")
        print(f"  üìÖ –î–∞—Ç–∞: {trans['date']}")
        print(f"  üí∞ –°—É–º–∞: {trans['amount']}")
        print(f"  üìù –û–ø–∏—Å: {trans['description']}")
        print(f"  üìä –¢–∏–ø: {trans['type']}")
        print(f"  üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {trans['category']}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = ['date', 'amount', 'description', 'type', 'category']
        missing_fields = [field for field in required_fields if field not in trans]
        
        if missing_fields:
            print(f"  ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: {missing_fields}")
            all_passed = False
        else:
            print(f"  ‚úÖ –í—Å—ñ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        
        print()
    
    if all_passed:
        print("üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ö–û–†–ï–ö–¢–ù–ê!")
    else:
        print("‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π!")
    
    return all_passed

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
    print()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    test1_passed = test_category_assignment()
    
    # –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    test2_passed = test_transaction_structure()
    
    print("\n" + "=" * 60)
    print("üìã –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"‚úÖ –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó: {'–ü–†–û–ô–î–ï–ù–û' if test1_passed else '–ù–ï –ü–†–û–ô–î–ï–ù–û'}")
    print(f"‚úÖ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {'–ü–†–û–ô–î–ï–ù–û' if test2_passed else '–ù–ï –ü–†–û–ô–î–ï–ù–û'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        exit(0)
    else:
        print("\n‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–î–ï–ù–û. –ü–æ—Ç—Ä—ñ–±–Ω–µ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è.")
        exit(1)
