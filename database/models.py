from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, DateTime, ForeignKey, Text, Table, Enum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
import datetime
import enum

from database.config import DATABASE_URL

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
engine = create_engine(DATABASE_URL)
Base = declarative_base()
Session = sessionmaker(bind=engine)

class TransactionType(enum.Enum):
    INCOME = "income"
    EXPENSE = "expense"

class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–∏—Å—Ç–µ–º–∏"""
    __tablename__ = 'users'
    
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, nullable=False)
    username = Column(String(100), nullable=True)
    first_name = Column(String(100), nullable=True)
    last_name = Column(String(100), nullable=True)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    last_active = Column(DateTime, default=datetime.datetime.utcnow)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    initial_balance = Column(Float, default=0.0)
    currency = Column(String(10), default='UAH')
    monthly_budget = Column(Float, nullable=True)
    notification_enabled = Column(Boolean, default=True)
    
    # –°—Ç–∞–Ω –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    setup_step = Column(String(50), default='start')  # start, balance, budget, notifications, completed
    is_setup_completed = Column(Boolean, default=False)
    
    # –ó–≤'—è–∑–∫–∏ –∑ —ñ–Ω—à–∏–º–∏ —Ç–∞–±–ª–∏—Ü—è–º–∏
    transactions = relationship("Transaction", back_populates="user")
    categories = relationship("Category", back_populates="user")
    budget_plans = relationship("BudgetPlan", back_populates="user")
    
    def __repr__(self):
        return f"<User(id={self.id}, telegram_id={self.telegram_id}, username={self.username})>"

class Category(Base):
    """–ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥—ñ–≤"""
    __tablename__ = 'categories'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    name = Column(String(100), nullable=False)
    type = Column(String(20), nullable=False)  # 'income' –∞–±–æ 'expense'
    icon = Column(String(50), nullable=True)
    is_default = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    
    # –ó–≤'—è–∑–∫–∏
    user = relationship("User", back_populates="categories")
    transactions = relationship("Transaction", back_populates="category")
    
    def __repr__(self):
        return f"<Category(id={self.id}, name={self.name}, type={self.type})>"

class Transaction(Base):
    """–ú–æ–¥–µ–ª—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    __tablename__ = 'transactions'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    category_id = Column(Integer, ForeignKey('categories.id'))
    amount = Column(Float, nullable=False)
    description = Column(String(255), nullable=True)
    transaction_date = Column(DateTime, default=datetime.datetime.utcnow)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    type = Column(Enum(TransactionType), nullable=False)
    is_recurring = Column(Boolean, default=False)
    source = Column(String(50), nullable=True)  # 'manual', 'receipt', 'bank_statement'
    receipt_image = Column(String(255), nullable=True)  # —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ–∫–∞
    
    # –ó–≤'—è–∑–∫–∏
    user = relationship("User", back_populates="transactions")
    category = relationship("Category", back_populates="transactions")
    
    def __repr__(self):
        return f"<Transaction(id={self.id}, amount={self.amount}, type={self.type})>"

class BudgetPlan(Base):
    """–ú–æ–¥–µ–ª—å –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω—É"""
    __tablename__ = 'budget_plans'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    name = Column(String(100), nullable=False)
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    total_budget = Column(Float, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    
    # –ó–≤'—è–∑–∫–∏
    user = relationship("User", back_populates="budget_plans")
    category_budgets = relationship("CategoryBudget", back_populates="budget_plan")
    
    def __repr__(self):
        return f"<BudgetPlan(id={self.id}, name={self.name}, total_budget={self.total_budget})>"

class CategoryBudget(Base):
    """–ú–æ–¥–µ–ª—å –±—é–¥–∂–µ—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    __tablename__ = 'category_budgets'
    
    id = Column(Integer, primary_key=True)
    budget_plan_id = Column(Integer, ForeignKey('budget_plans.id'))
    category_id = Column(Integer, ForeignKey('categories.id'))
    allocated_amount = Column(Float, nullable=False)
    
    # –ó–≤'—è–∑–∫–∏
    budget_plan = relationship("BudgetPlan", back_populates="category_budgets")
    category = relationship("Category")
    
    def __repr__(self):
        return f"<CategoryBudget(id={self.id}, category_id={self.category_id}, allocated_amount={self.allocated_amount})>"

class FinancialAdvice(Base):
    """–ú–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–¥–∞–Ω–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥"""
    __tablename__ = 'financial_advices'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    advice_text = Column(Text, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    category = Column(String(100), nullable=True)  # —Ç–∏–ø –ø–æ—Ä–∞–¥–∏: 'savings', 'investment', 'budget'
    is_applied = Column(Boolean, default=False)
    
    # –ó–≤'—è–∑–∫–∏
    user = relationship("User")
    
    def __repr__(self):
        return f"<FinancialAdvice(id={self.id}, user_id={self.user_id}, category={self.category})>"

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
def init_db():
    Base.metadata.create_all(engine)
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –ë–î
    session = Session()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    default_categories = [
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        {"name": "–ü—Ä–æ–¥—É–∫—Ç–∏", "type": "expense", "icon": "üõí"},
        {"name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "type": "expense", "icon": "üöó"},
        {"name": "–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", "type": "expense", "icon": "üçΩÔ∏è"},
        {"name": "–†–æ–∑–≤–∞–≥–∏", "type": "expense", "icon": "üé≠"},
        {"name": "–ü–æ–∫—É–ø–∫–∏", "type": "expense", "icon": "üõçÔ∏è"},
        {"name": "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "type": "expense", "icon": "üè†"},
        {"name": "–ó–¥–æ—Ä–æ–≤'—è", "type": "expense", "icon": "üíä"},
        {"name": "–û—Å–≤—ñ—Ç–∞", "type": "expense", "icon": "üìö"},
        {"name": "–Ü–Ω—à–µ", "type": "expense", "icon": "üìå"},
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
        {"name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "type": "income", "icon": "üí∞"},
        {"name": "–§—Ä—ñ–ª–∞–Ω—Å", "type": "income", "icon": "üíª"},
        {"name": "–ü–æ–¥–∞—Ä—É–Ω–∫–∏", "type": "income", "icon": "üéÅ"},
        {"name": "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "type": "income", "icon": "üìà"},
        {"name": "–Ü–Ω—à–µ", "type": "income", "icon": "üìå"}
    ]
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    if session.query(Category).filter_by(is_default=True).count() == 0:
        for cat in default_categories:
            category = Category(
                name=cat["name"],
                type=cat["type"],
                icon=cat["icon"],
                is_default=True
            )
            session.add(category)
    
    session.commit()
    session.close()