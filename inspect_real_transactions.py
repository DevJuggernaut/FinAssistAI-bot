#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –±–∞–∑–∏
"""

import sys
import os
import logging
from datetime import datetime, timedelta

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(name)s - %(message)s')

from database.db_operations import get_user_transactions, get_user

def inspect_real_transactions():
    """–Ü–Ω—Å–ø–µ–∫—Ç—É—î —Ä–µ–∞–ª—å–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("üîç –Ü–Ω—Å–ø–µ–∫—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
    
    # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ–≥—ñ–≤
    user_id = 580683833
    
    try:
        user = get_user(user_id)
        if not user:
            print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: {user}")
        print(f"User ID –≤ –ë–î: {user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, limit=1000, start_date=start_date, end_date=now)
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
        
        # –Ü–Ω—Å–ø–µ–∫—Ç—É—î–º–æ –ø–µ—Ä—à—ñ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–µ—Ç–∞–ª—å–Ω–æ
        for i, t in enumerate(transactions[:3]):
            print(f"\n=== –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {i+1} ===")
            print(f"Type: {type(t)}")
            print(f"Object: {t}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
            for attr in dir(t):
                if not attr.startswith('_'):
                    try:
                        value = getattr(t, attr)
                        print(f"  {attr}: {value} (type: {type(value)})")
                    except Exception as e:
                        print(f"  {attr}: ERROR - {e}")
                        
            # –û—Å–æ–±–ª–∏–≤–∞ —É–≤–∞–≥–∞ –¥–æ amount
            if hasattr(t, 'amount'):
                amount = t.amount
                print(f"\nüîç AMOUNT DETAILED:")
                print(f"  Raw value: {amount}")
                print(f"  Type: {type(amount)}")
                print(f"  Dir: {dir(amount) if hasattr(amount, '__dict__') else 'No __dict__'}")
                
                # –°–ø—Ä–æ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
                try:
                    converted = float(amount)
                    print(f"  ‚úÖ Float conversion successful: {converted}")
                except Exception as e:
                    print(f"  ‚ùå Float conversion failed: {e}")
                    print(f"  Exception type: {type(e)}")
                    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    inspect_real_transactions()
