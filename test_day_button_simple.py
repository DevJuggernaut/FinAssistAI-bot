#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ –∫–Ω–æ–ø–∫–∞ "–î–µ–Ω—å" –ø—Ä–∏–±—Ä–∞–Ω–∞ –∑ –∫–æ–¥—É
"""

import sys
import os
sys.path.insert(0, os.path.abspath('.'))

def test_day_button_removed_from_code():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' –ø—Ä–∏–±—Ä–∞–Ω–∞ –∑ –∫–æ–¥—É"""
    
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ analytics_handler.py –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ '–î–µ–Ω—å'...")
    
    with open('handlers/analytics_handler.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –®—É–∫–∞—î–º–æ –∑–≥–∞–¥–∫–∏ –ø—Ä–æ –∫–Ω–æ–ø–∫—É "–î–µ–Ω—å" —É callback_data
    day_button_patterns = [
        'InlineKeyboardButton("üóì –î–µ–Ω—å"',
        '"generate_chart_pie_expenses_day"',
        '"generate_chart_pie_income_day"', 
        '"generate_chart_bar_expenses_day"',
        '"generate_chart_bar_income_day"',
        'callback_data=f"generate_chart_{chart_type}_{data_type}_day"'
    ]
    
    found_issues = []
    for pattern in day_button_patterns:
        if pattern in content:
            found_issues.append(pattern)
    
    if found_issues:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≥–∞–¥–∫–∏ –ø—Ä–æ –∫–Ω–æ–ø–∫—É '–î–µ–Ω—å':")
        for issue in found_issues:
            print(f"  - {issue}")
        return False
    else:
        print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' –ø—Ä–∏–±—Ä–∞–Ω–∞ –∑ –∫–æ–¥—É")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤ —Ç–µ–∫—Å—Ç—ñ –º–µ–Ω—é –Ω–µ –∑–≥–∞–¥—É—î—Ç—å—Å—è "–î–µ–Ω—å" –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    day_text_patterns = [
        'üóì **–î–µ–Ω—å** ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ',
        'üóì **–î–µ–Ω—å** ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏'
    ]
    
    found_text_issues = []
    for pattern in day_text_patterns:
        if pattern in content:
            found_text_issues.append(pattern)
    
    if found_text_issues:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ó–Ω–∞–π–¥–µ–Ω–æ –∑–≥–∞–¥–∫–∏ –ø—Ä–æ '–î–µ–Ω—å' —É —Ç–µ–∫—Å—Ç—ñ:")
        for issue in found_text_issues:
            print(f"  - {issue}")
        return False
    else:
        print("‚úÖ –£–°–ü–Ü–•: –ó–≥–∞–¥–∫–∏ –ø—Ä–æ '–î–µ–Ω—å' –ø—Ä–∏–±—Ä–∞–Ω—ñ –∑ —Ç–µ–∫—Å—Ç—É –º–µ–Ω—é")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ–±—Ä–æ–±–∫–∞ –ø–µ—Ä—ñ–æ–¥—É "day" –≤–∏–¥–∞–ª–µ–Ω–∞
    day_logic_patterns = [
        'if period == "day":',
        'period == "day"'
    ]
    
    day_logic_count = 0
    for pattern in day_logic_patterns:
        day_logic_count += content.count(pattern)
    
    if day_logic_count > 0:
        print(f"‚ö†Ô∏è  –£–í–ê–ì–ê: –ó–Ω–∞–π–¥–µ–Ω–æ {day_logic_count} –∑–≥–∞–¥–æ–∫ –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä—ñ–æ–¥—É 'day'")
        print("   –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ –≤–æ–Ω–∏ –≤ —ñ–Ω—à–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö")
    else:
        print("‚úÖ –£–°–ü–Ü–•: –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä—ñ–æ–¥—É 'day' –≤–∏–¥–∞–ª–µ–Ω–∞")
    
    return len(found_issues) == 0 and len(found_text_issues) == 0


def test_keyboard_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤ –∫–æ–¥—ñ"""
    
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏...")
    
    with open('handlers/analytics_handler.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–æ–∫ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É
    search_text = 'InlineKeyboardButton("üìÖ –ú—ñ—Å—è—Ü—å"'
    keyboard_start = content.find(search_text)
    if keyboard_start == -1:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É")
        return False
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É keyboard = [
    lines_before = content[:keyboard_start].split('\n')
    keyboard_line_start = -1
    for i in range(len(lines_before) - 1, -1, -1):
        if 'keyboard = [' in lines_before[i]:
            keyboard_line_start = i
            break
    
    if keyboard_line_start == -1:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏")
        return False
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    all_lines = content.split('\n')
    keyboard_lines = []
    bracket_count = 0
    
    for i in range(keyboard_line_start, len(all_lines)):
        line = all_lines[i]
        keyboard_lines.append(line)
        bracket_count += line.count('[') - line.count(']')
        if 'keyboard = [' in line:
            bracket_count = 1  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫
        elif bracket_count == 0 and line.strip().endswith(']'):
            break
    
    keyboard_code = '\n'.join(keyboard_lines)
    print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É:")
    print(keyboard_code)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –∫–Ω–æ–ø–∫–∏ –ú—ñ—Å—è—Ü—å —ñ –¢–∏–∂–¥–µ–Ω—å
    if 'InlineKeyboardButton("üìÖ –ú—ñ—Å—è—Ü—å"' in keyboard_code and 'InlineKeyboardButton("üìÜ –¢–∏–∂–¥–µ–Ω—å"' in keyboard_code:
        print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∏ '–ú—ñ—Å—è—Ü—å' —ñ '–¢–∏–∂–¥–µ–Ω—å' –ø—Ä–∏—Å—É—Ç–Ω—ñ")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        return False
    
    if 'InlineKeyboardButton("üóì –î–µ–Ω—å"' not in keyboard_code:
        print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' –≤—ñ–¥—Å—É—Ç–Ω—è")
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ö–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' –≤—Å–µ —â–µ –ø—Ä–∏—Å—É—Ç–Ω—è")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É (2 —Ä—è–¥–∫–∏)
    keyboard_rows = keyboard_code.count('],[')
    if keyboard_rows == 1:  # 2 —Ä—è–¥–∫–∏ = 1 —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
        print("‚úÖ –£–°–ü–Ü–•: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É (2 —Ä—è–¥–∫–∏)")
    else:
        print(f"‚ö†Ô∏è  –£–í–ê–ì–ê: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–∞—î {keyboard_rows + 1} —Ä—è–¥–∫—ñ–≤ (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å 2)")
    
    return True


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–î–µ–Ω—å' –∑ –∫–æ–¥—É\n")
    
    result1 = test_day_button_removed_from_code()
    result2 = test_keyboard_structure()
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"  –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–æ–¥—É: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if result1 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if result2 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
    
    if result1 and result2:
        print(f"\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ö–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–±—Ä–∞–Ω–∞.")
    else:
        print(f"\nüí• –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
