#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ—ó –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ –¥–æ—Ö–æ–¥—ñ–≤ –∑ –≤–∫–ª–∞–¥–∫–∏ "–û–≥–ª—è–¥ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤"
–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é generate_income_pie_chart –∑ services/report_generator.py
"""

import os
import sys
import matplotlib
matplotlib.use('Agg')

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.report_generator import FinancialReport
from database.models import Session, Transaction, Category, User, TransactionType
from datetime import datetime
import random

def create_income_test_data():
    """–°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏ –¥–æ—Ö–æ–¥—ñ–≤"""
    session = Session()
    
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = session.query(User).filter(User.telegram_id == 999999998).first()
        if not user:
            user = User(
                telegram_id=999999998,
                username="test_income_user",
                first_name="Income",
                last_name="Test"
            )
            session.add(user)
            session.flush()
        
        print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π/–∑–Ω–∞–π–¥–µ–Ω–∏–π: ID={user.id}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
        income_categories = [
            ("–ó–∞—Ä–ø–ª–∞—Ç–∞", "üí∞"),
            ("–§—Ä—ñ–ª–∞–Ω—Å", "üíª"),
            ("–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìà"),
            ("–ü–æ–¥–∞—Ä—É–Ω–∫–∏", "üéÅ"),
            ("–Ü–Ω—à–µ", "üíµ")
        ]
        
        categories = []
        for name, icon in income_categories:
            existing_cat = session.query(Category).filter(
                Category.name == name,
                Category.user_id == user.id,
                Category.type == 'income'
            ).first()
            
            if not existing_cat:
                category = Category(
                    name=name,
                    icon=icon,
                    type='income',
                    user_id=user.id
                )
                session.add(category)
                session.flush()
                categories.append(category)
            else:
                categories.append(existing_cat)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ/–∑–Ω–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ—Ö–æ–¥—ñ–≤")
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        session.query(Transaction).filter(
            Transaction.user_id == user.id,
            Transaction.description.like('–¢–ï–°–¢ –î–û–•–Ü–î:%')
        ).delete()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–æ—Ö–æ–¥–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—É–º–∞–º–∏
        income_amounts = [25000, 5000, 2000, 1000, 500]
        
        for i, category in enumerate(categories):
            amount = income_amounts[i] if i < len(income_amounts) else random.randint(500, 3000)
            
            transaction = Transaction(
                user_id=user.id,
                category_id=category.id,
                amount=amount,
                description=f"–¢–ï–°–¢ –î–û–•–Ü–î: {category.name}",
                type=TransactionType.INCOME,
                transaction_date=datetime.now()
            )
            session.add(transaction)
        
        session.commit()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(categories)} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–æ—Ö–æ–¥—ñ–≤")
        
        return user.id
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
        return None
    finally:
        session.close()

def test_income_pie_chart():
    """–¢–µ—Å—Ç—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –¥—ñ–∞–≥—Ä–∞–º—É –¥–æ—Ö–æ–¥—ñ–≤"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ –¥–æ—Ö–æ–¥—ñ–≤ –∑ –æ–≥–ª—è–¥—É —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    user_id = create_income_test_data()
    if not user_id:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")
        return
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ FinancialReport —ñ –≥–µ–Ω–µ—Ä—É—î–º–æ –¥—ñ–∞–≥—Ä–∞–º—É
        financial_report = FinancialReport(user_id)
        
        print("üí∞ –ì–µ–Ω–µ—Ä—É—î–º–æ –∫—Ä—É–≥–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É –¥–æ—Ö–æ–¥—ñ–≤ (—Ñ—É–Ω–∫—Ü—ñ—è –∑ services/report_generator.py)...")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥—ñ–∞–≥—Ä–∞–º—É (—è–∫ —É show_income_pie_chart)
        chart_buffer, error = financial_report.generate_income_pie_chart()
        
        if error:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥—ñ–∞–≥—Ä–∞–º–∏: {error}")
            return
        
        if not chart_buffer:
            print("‚ùå –î—ñ–∞–≥—Ä–∞–º–∞ –Ω–µ –±—É–ª–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ–∞–≥—Ä–∞–º—É
        output_path = "test_budget_overview_income_pie_chart.png"
        with open(output_path, 'wb') as f:
            f.write(chart_buffer.getvalue())
        
        print(f"‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ –¥–æ—Ö–æ–¥—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {output_path}")
        print("üéØ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª - –¥—ñ–∞–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º–∞—Ç–∏:")
        print("   ‚Ä¢ –ü–æ–Ω—á–∏–∫–æ–≤—É —Ñ–æ—Ä–º—É (–∑ –æ—Ç–≤–æ—Ä–æ–º –≤ —Ü–µ–Ω—Ç—Ä—ñ)")
        print("   ‚Ä¢ –í–µ–ª–∏–∫–∏–π —Ç–µ–∫—Å—Ç –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –≤ —Ü–µ–Ω—Ç—Ä—ñ")
        print("   ‚Ä¢ –ó–µ–ª–µ–Ω—É –∫–æ–ª—å–æ—Ä–æ–≤—É –ø–∞–ª—ñ—Ç—Ä—É –¥–ª—è –¥–æ—Ö–æ–¥—ñ–≤")
        print("   ‚Ä¢ –í–µ–ª–∏–∫—ñ —à—Ä–∏—Ñ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
        print("   ‚Ä¢ –õ–µ–≥–µ–Ω–¥—É –∑–±–æ–∫—É –∑ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏ —Ç–∞ —Å—É–º–∞–º–∏")
        print("   ‚Ä¢ –í–∏—Å–æ–∫—É —Ä–æ–∑–¥—ñ–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å (300 DPI)")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
        file_size = os.path.getsize(output_path)
        print(f"üìè –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç")
        
        if file_size > 50000:
            print("‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ –º–∞—î –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å (–≤–µ–ª–∏–∫–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É)")
        else:
            print("‚ö†Ô∏è –î—ñ–∞–≥—Ä–∞–º–∞ –º–æ–∂–µ –º–∞—Ç–∏ –Ω–∏–∑—å–∫—É —è–∫—ñ—Å—Ç—å (–º–∞–ª–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É)")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_income_pie_chart()
