#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–∞—Ä—Å–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –≤–∏–ø–∏—Å–æ–∫
"""

import asyncio
import sys
import os
import pandas as pd
from datetime import datetime, timedelta

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.statement_parser import StatementParser

async def test_csv_parsing():
    """–¢–µ—Å—Ç—É—î –ø–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª—É"""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª—É...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π CSV —Ñ–∞–π–ª
    test_data = {
        '–î–∞—Ç–∞': ['01.01.2024', '02.01.2024', '03.01.2024'],
        '–°—É–º–∞': [-150.00, 3500.00, -89.50],
        '–û–ø–∏—Å': ['–ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ', '–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ö–∞—Ñ–µ']
    }
    
    test_csv_path = 'test_transactions.csv'
    df = pd.DataFrame(test_data)
    df.to_csv(test_csv_path, index=False, encoding='utf-8')
    
    try:
        parser = StatementParser()
        transactions = await parser.parse_csv(test_csv_path)
        
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
        for i, trans in enumerate(transactions, 1):
            print(f"  {i}. {trans['date']} - {trans['amount']:.2f} ‚Ç¥ - {trans['description']} ({trans['type']})")
        
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É CSV: {str(e)}")
        return False
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        if os.path.exists(test_csv_path):
            os.remove(test_csv_path)

async def test_excel_parsing():
    """–¢–µ—Å—Ç—É—î –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª—É"""
    print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª—É...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π Excel —Ñ–∞–π–ª
    test_data = {
        'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
        'Amount': [-75.25, 2000.00, -42.80],
        'Description': ['Grocery store', 'Salary payment', 'Coffee shop']
    }
    
    test_excel_path = 'test_transactions.xlsx'
    df = pd.DataFrame(test_data)
    df.to_excel(test_excel_path, index=False)
    
    try:
        parser = StatementParser()
        transactions = await parser.parse_excel(test_excel_path)
        
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
        for i, trans in enumerate(transactions, 1):
            print(f"  {i}. {trans['date']} - {trans['amount']:.2f} ‚Ç¥ - {trans['description']} ({trans['type']})")
        
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É Excel: {str(e)}")
        return False
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        if os.path.exists(test_excel_path):
            os.remove(test_excel_path)

async def test_validation():
    """–¢–µ—Å—Ç—É—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
    
    parser = StatementParser()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    test_transactions = [
        {'date': datetime(2024, 1, 1), 'amount': 100.0, 'description': '–ù–æ—Ä–º–∞–ª—å–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è', 'type': 'expense'},
        {'date': None, 'amount': 50.0, 'description': '–ë–µ–∑ –¥–∞—Ç–∏', 'type': 'expense'},  # –ú–∞—î –±—É—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∞
        {'date': datetime(2020, 1, 1), 'amount': 200.0, 'description': '–°—Ç–∞—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è', 'type': 'expense'},  # –°—Ç–∞—Ä–∞ –¥–∞—Ç–∞
        {'date': datetime(2024, 1, 2), 'amount': 1500000.0, 'description': '–î—É–∂–µ –≤–µ–ª–∏–∫–∞ —Å—É–º–∞', 'type': 'expense'},  # –í–µ–ª–∏–∫–∞ —Å—É–º–∞
        {'date': datetime(2024, 1, 3), 'amount': 75.0, 'description': '', 'type': 'expense'},  # –ë–µ–∑ –æ–ø–∏—Å—É
    ]
    
    cleaned = parser._clean_and_validate_transactions(test_transactions)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:")
    print(f"  –ü–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(test_transactions)}")
    print(f"  –í–∞–ª—ñ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(cleaned)}")
    print(f"  –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(test_transactions) - len(cleaned)}")
    
    for i, trans in enumerate(cleaned, 1):
        print(f"  {i}. {trans['date'].strftime('%Y-%m-%d')} - {trans['amount']:.2f} ‚Ç¥ - {trans['description']}")
    
    return len(cleaned) > 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ StatementParser...")
    print("=" * 50)
    
    tests = [
        ("CSV –ø–∞—Ä—Å–∏–Ω–≥", test_csv_parsing),
        ("Excel –ø–∞—Ä—Å–∏–Ω–≥", test_excel_parsing),
        ("–í–∞–ª—ñ–¥–∞—Ü—ñ—è", test_validation)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ '{test_name}': {str(e)}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(tests):
        print("üéâ –£—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! StatementParser –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
    else:
        print("‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")

if __name__ == "__main__":
    asyncio.run(main())
