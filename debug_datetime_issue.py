#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ—á–Ω–æ—ó –ø—Ä–∏—á–∏–Ω–∏ datetime –ø–æ–º–∏–ª–∫–∏
"""

import sys
import os
import logging
from datetime import datetime, timedelta

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(name)s - %(message)s')

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_transaction_processing():
    """–¢–µ—Å—Ç—É—î –æ–±—Ä–æ–±–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π step-by-step"""
    print("üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
    
    # –Ü–º—ñ—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤ –±–∞–∑—ñ
    test_cases = [
        # –ù–æ—Ä–º–∞–ª—å–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è
        {'amount': 100.0, 'type': 'expense', 'date': '2025-06-20', 'category': '–á–∂–∞'},
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑ datetime –æ–±'—î–∫—Ç–æ–º
        {'amount': datetime.now(), 'type': 'expense', 'date': '2025-06-20', 'category': '–á–∂–∞'},
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑ Decimal
        {'amount': '150.50', 'type': 'income', 'date': datetime.now(), 'category': '–ó–∞—Ä–ø–ª–∞—Ç–∞'},
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑ None
        {'amount': None, 'type': 'expense', 'date': None, 'category': None},
    ]
    
    print(f"–¢–µ—Å—Ç—É—î–º–æ {len(test_cases)} —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
    
    for i, test_transaction in enumerate(test_cases):
        print(f"\n--- –¢–µ—Å—Ç {i+1} ---")
        print(f"Input: {test_transaction}")
        
        try:
            # –Ü–º—ñ—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É —è–∫ –≤ –Ω–∞—à–æ–º—É –∫–æ–¥—ñ
            amount = test_transaction.get('amount', 0)
            print(f"Amount: {amount} (type: {type(amount)})")
            
            # –°–ø—Ä–æ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
            if isinstance(amount, (int, float)):
                converted_amount = float(amount)
                print(f"‚úÖ Converted amount: {converted_amount}")
            elif hasattr(amount, '__float__'):
                converted_amount = float(amount)
                print(f"‚úÖ Converted amount via __float__: {converted_amount}")
            elif amount is None:
                converted_amount = 0.0
                print(f"‚úÖ None converted to: {converted_amount}")
            else:
                print(f"‚ùå Cannot convert {type(amount)} to float")
                converted_amount = 0.0
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            print(f"Error type: {type(e)}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    test_transaction_processing()
