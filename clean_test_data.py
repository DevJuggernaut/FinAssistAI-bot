#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
"""

from sqlalchemy.orm import sessionmaker
from database.config import DATABASE_URL
from database.models import (
    User, Category, Transaction, BudgetPlan, 
    CategoryBudget, FinancialAdvice
)
from sqlalchemy import create_engine

# –¢–µ—Å—Ç–æ–≤—ñ Telegram ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
TEST_TELEGRAM_IDS = [123456789, 987654321, 555666777]

def create_session():
    """–°—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    engine_test = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine_test)
    return Session()

def clean_test_data():
    """–í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ"""
    session = create_session()
    
    try:
        print("üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        test_users = session.query(User).filter(User.telegram_id.in_(TEST_TELEGRAM_IDS)).all()
        
        if not test_users:
            print("‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            return
        
        user_ids = [user.id for user in test_users]
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ
        # 1. CategoryBudget
        category_budgets = session.query(CategoryBudget).join(BudgetPlan).filter(BudgetPlan.user_id.in_(user_ids)).all()
        for cb in category_budgets:
            session.delete(cb)
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(category_budgets)} –∑–∞–ø–∏—Å—ñ–≤ CategoryBudget")
        
        # 2. BudgetPlan
        budget_plans = session.query(BudgetPlan).filter(BudgetPlan.user_id.in_(user_ids)).all()
        for bp in budget_plans:
            session.delete(bp)
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(budget_plans)} –±—é–¥–∂–µ—Ç–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤")
        
        # 3. FinancialAdvice
        advices = session.query(FinancialAdvice).filter(FinancialAdvice.user_id.in_(user_ids)).all()
        for advice in advices:
            session.delete(advice)
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(advices)} —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥")
        
        # 4. Transaction
        transactions = session.query(Transaction).filter(Transaction.user_id.in_(user_ids)).all()
        for transaction in transactions:
            session.delete(transaction)
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
        
        # 5. Category
        categories = session.query(Category).filter(Category.user_id.in_(user_ids)).all()
        for category in categories:
            session.delete(category)
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
        
        # 6. User
        for user in test_users:
            print(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.first_name} {user.last_name} (ID: {user.telegram_id})")
            session.delete(user)
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–º—ñ–Ω–∏
        session.commit()
        print(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è {len(test_users)} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
        import traceback
        traceback.print_exc()
    finally:
        session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    answer = input("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ? (y/N): ")
    if answer.lower() not in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
        print("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return
    
    clean_test_data()

if __name__ == "__main__":
    main()
