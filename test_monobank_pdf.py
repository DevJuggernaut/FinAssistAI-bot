#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É PDF –≤–∏–ø–∏—Å–∫–∏ –ú–æ–Ω–æ–±–∞–Ω–∫—É
"""

import sys
import os
import importlib
sys.path.append('/Users/abobina/telegram_bot/FinAssistAI-bot')

# –ü–µ—Ä–µ—ñ–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if 'services.statement_parser' in sys.modules:
    importlib.reload(sys.modules['services.statement_parser'])

from services.statement_parser import StatementParser
import pdfplumber

def test_monobank_pdf(file_path):
    """
    –¢–µ—Å—Ç—É—î –ø–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª—É –ú–æ–Ω–æ–±–∞–Ω–∫—É
    """
    print(f"üîç –¢–µ—Å—Ç—É—î–º–æ PDF —Ñ–∞–π–ª: {file_path}")
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–¥–∏–≤–∏–º–æ—Å—è –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É PDF —Ñ–∞–π–ª—É
    try:
        with pdfplumber.open(file_path) as pdf:
            print(f"üìñ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {len(pdf.pages)}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
            for i, page in enumerate(pdf.pages[:3]):
                print(f"\nüìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {i+1}:")
                text = page.extract_text() or ""
                print(f"   –°–∏–º–≤–æ–ª—ñ–≤ —Ç–µ–∫—Å—Ç—É: {len(text)}")
                
                # –ü–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É
                lines = text.split('\n')[:5]
                print("   –ü–µ—Ä—à—ñ —Ä—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É:")
                for j, line in enumerate(lines):
                    if line.strip():
                        print(f"     {j+1}: {line.strip()[:80]}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å
                tables = page.extract_tables()
                print(f"   –¢–∞–±–ª–∏—Ü—å –∑–Ω–∞–π–¥–µ–Ω–æ: {len(tables)}")
                
                if tables:
                    for k, table in enumerate(tables[:2]):  # –ü–µ—Ä—à—ñ 2 —Ç–∞–±–ª–∏—Ü—ñ
                        print(f"     –¢–∞–±–ª–∏—Ü—è {k+1}: {len(table)} —Ä—è–¥–∫—ñ–≤, {len(table[0]) if table else 0} —Å—Ç–æ–≤–ø—Ü—ñ–≤")
                        if table and len(table) > 0:
                            print(f"       –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫: {table[0]}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è PDF —Ñ–∞–π–ª—É: {e}")
        return
    
    print("\n" + "="*80)
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä—Å–µ—Ä
    try:
        parser = StatementParser()
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥
        transactions = parser.parse_bank_statement(file_path, bank_type='monobank')
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π!")
        print(f"üìà –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(transactions)}")
        
        if transactions:
            print("\nüìã –ü–µ—Ä—à—ñ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
            for i, transaction in enumerate(transactions[:5]):
                print(f"  {i+1}. –î–∞—Ç–∞: {transaction.get('date')}")
                print(f"     –°—É–º–∞: {transaction.get('amount')} –≥—Ä–Ω")
                print(f"     –¢–∏–ø: {transaction.get('type')}")
                print(f"     –û–ø–∏—Å: {transaction.get('description', 'N/A')[:50]}")
                print(f"     –î–∂–µ—Ä–µ–ª–æ: {transaction.get('source')}")
                print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            income_count = len([t for t in transactions if t.get('type') == 'income'])
            expense_count = len([t for t in transactions if t.get('type') == 'expense'])
            total_income = sum([t.get('amount', 0) for t in transactions if t.get('type') == 'income'])
            total_expense = sum([t.get('amount', 0) for t in transactions if t.get('type') == 'expense'])
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –î–æ—Ö–æ–¥—ñ–≤: {income_count} (—Å—É–º–∞: {total_income:.2f} –≥—Ä–Ω)")
            print(f"   –í–∏—Ç—Ä–∞—Ç: {expense_count} (—Å—É–º–∞: {total_expense:.2f} –≥—Ä–Ω)")
        else:
            print("‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –®—É–∫–∞—î–º–æ PDF —Ñ–∞–π–ª
    pdf_file = "/Users/abobina/telegram_bot/FinAssistAI-bot/uploads/statements/report_20-06-2025_16-12-03.pdf"
    
    if os.path.exists(pdf_file):
        test_monobank_pdf(pdf_file)
    else:
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {pdf_file}")
        
        # –ü–æ—à—É–∫ –≤—Å—ñ—Ö PDF —Ñ–∞–π–ª—ñ–≤ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        uploads_dir = "/Users/abobina/telegram_bot/FinAssistAI-bot/uploads"
        if os.path.exists(uploads_dir):
            for root, dirs, files in os.walk(uploads_dir):
                for file in files:
                    if file.endswith('.pdf'):
                        full_path = os.path.join(root, file)
                        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª: {full_path}")
