#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""

import random
import datetime
from decimal import Decimal
from sqlalchemy.orm import sessionmaker
from database.config import DATABASE_URL
from database.models import (
    Base, engine, User, Category, Transaction, BudgetPlan, 
    CategoryBudget, FinancialAdvice, TransactionType
)
from sqlalchemy import create_engine

def create_session():
    """–°—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    engine_test = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine_test)
    return Session()

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
EXPENSE_CATEGORIES = [
    {"name": "–ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", "icon": "üõí"},
    {"name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "icon": "üöó"},
    {"name": "–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", "icon": "üçΩÔ∏è"},
    {"name": "–†–æ–∑–≤–∞–≥–∏", "icon": "üé≠"},
    {"name": "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è", "icon": "üëï"},
    {"name": "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "icon": "üè†"},
    {"name": "–ú–µ–¥–∏—Ü–∏–Ω–∞", "icon": "üíä"},
    {"name": "–û—Å–≤—ñ—Ç–∞", "icon": "üìö"},
    {"name": "–°–ø–æ—Ä—Ç —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å", "icon": "üèãÔ∏è"},
    {"name": "–ö—Ä–∞—Å–∞", "icon": "üíÑ"},
    {"name": "–ü–æ–¥–∞—Ä—É–Ω–∫–∏", "icon": "üéÅ"},
    {"name": "–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", "icon": "üì±"},
    {"name": "–ê–≤—Ç–æ —Ç–∞ –ø–∞–ª–∏–≤–æ", "icon": "‚õΩ"},
    {"name": "–ü—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏", "icon": "üì∫"},
    {"name": "–Ü–Ω—à–µ", "icon": "üìå"}
]

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
INCOME_CATEGORIES = [
    {"name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "icon": "üí∞"},
    {"name": "–§—Ä—ñ–ª–∞–Ω—Å", "icon": "üíª"},
    {"name": "–ü–æ–¥–∞—Ä—É–Ω–∫–∏", "icon": "üéÅ"},
    {"name": "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "icon": "üìà"},
    {"name": "–ü—Ä–æ–¥–∞–∂ —Ä–µ—á–µ–π", "icon": "üè™"},
    {"name": "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫", "icon": "üíº"},
    {"name": "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–æ—Ä–≥—ñ–≤", "icon": "üí∏"},
    {"name": "–Ü–Ω—à–µ", "icon": "üìå"}
]

# –ü—Ä–∏–∫–ª–∞–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
TRANSACTION_EXAMPLES = {
    "–ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è": [
        "–ê–¢–ë", "–°—ñ–ª—å–ø–æ", "–ù–æ–≤—É—Å", "–§–æ—Ä–∞", "–ú–µ—Ç—Ä–æ", "–ü–æ–∫—É–ø–∫–∞ –æ–≤–æ—á—ñ–≤ –Ω–∞ —Ä–∏–Ω–∫—É", 
        "–ú'—è—Å–æ –≤ –í–µ–ª–º–∞—Ä—Ç—ñ", "–•–ª—ñ–± —É –ø–µ–∫–∞—Ä–Ω—ñ", "–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏"
    ],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [
        "–ö–∏—ó–≤–ø–∞—Å—Ç—Ä–∞–Ω—Å", "–ü—Ä–æ—ó–∑–¥ —É –º–µ—Ç—Ä–æ", "–¢–∞–∫—Å—ñ Uber", "Bolt", "Uklon", 
        "–ó–∞–ø—Ä–∞–≤–∫–∞ WOG", "OKKO", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–ö–∞—Ä—à–µ—Ä–∏–Ω–≥"
    ],
    "–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏": [
        "McDonald's", "KFC", "–ü—É–∑–∞—Ç–∞ —Ö–∞—Ç–∞", "–®–∞—É—Ä–º–∞", "–ö–∞–≤'—è—Ä–Ω—è", 
        "–ü—ñ—Ü–∞ –ß–µ–ª–µ–Ω—Ç–∞–Ω–æ", "–°—É—à—ñ", "–†–µ—Å—Ç–æ—Ä–∞–Ω", "–ö–∞—Ñ–µ Coffeeshop"
    ],
    "–†–æ–∑–≤–∞–≥–∏": [
        "–ö—ñ–Ω–æ –ü–ª–∞–Ω–µ—Ç–∞", "–ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å", "–ë–æ—É–ª—ñ–Ω–≥", "–ë—ñ–ª—å—è—Ä–¥", "–ö–≤–µ—Å—Ç", 
        "–ü–∞—Ä–∫ —Ä–æ–∑–≤–∞–≥", "–ö–æ–Ω—Ü–µ—Ä—Ç", "–¢–µ–∞—Ç—Ä", "–í–∏—Å—Ç–∞–≤–∫–∞"
    ],
    "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": [
        "Zara", "H&M", "LC Waikiki", "–Ü–Ω—Ç–µ—Ä—Ç–æ–ø", "Sportmaster", 
        "–î–∂–∏–Ω—Å–∏", "–ö—Ä–æ—Å—ñ–≤–∫–∏", "–ö—É—Ä—Ç–∫–∞", "–§—É—Ç–±–æ–ª–∫–∞"
    ],
    "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏": [
        "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è –î–¢–ï–ö", "–ì–∞–∑ –ù–∞—Ñ—Ç–æ–≥–∞–∑", "–í–æ–¥–∞ –ö–∏—ó–≤–≤–æ–¥–æ–∫–∞–Ω–∞–ª", 
        "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ö–∏—ó–≤—Å—Ç–∞—Ä", "Vodafone", "lifecell", "–£–ø—Ä–∞–≤–ª—è—é—á–∞ –∫–æ–º–ø–∞–Ω—ñ—è"
    ],
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": [
        "–ê–ø—Ç–µ–∫–∞ –ê–ù–¶", "–ë–∞–∂–∞—î–º–æ –∑–¥–æ—Ä–æ–≤'—è", "–õ—ñ–∫–∏ –ö–æ–Ω–µ–∫—Å", "–õ—ñ–∫–∞—Ä", 
        "–ê–Ω–∞–ª—ñ–∑–∏", "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–í—ñ—Ç–∞–º—ñ–Ω–∏", "–ú–µ–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏"
    ],
    "–û—Å–≤—ñ—Ç–∞": [
        "–ö—É—Ä—Å–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó", "IT-–∫—É—Ä—Å–∏", "–ö–Ω–∏–≥–∏", "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å–∏ Udemy", 
        "Coursera", "–ù–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–°–µ–º—ñ–Ω–∞—Ä"
    ],
    "–ü—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏": [
        "Netflix", "Spotify", "YouTube Premium", "Apple Music", 
        "Office 365", "Adobe Creative", "ChatGPT Plus"
    ],
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": [
        "–û—Å–Ω–æ–≤–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", "–ü—Ä–µ–º—ñ—è", "13-–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", "–ù–∞–¥–±–∞–≤–∫–∞"
    ],
    "–§—Ä—ñ–ª–∞–Ω—Å": [
        "–í–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∞", "–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø—É", "–ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É", 
        "–ö–æ–ø—ñ—Ä–∞–π—Ç–∏–Ω–≥", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó", "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"
    ],
    "–ê–≤—Ç–æ —Ç–∞ –ø–∞–ª–∏–≤–æ": [
        "–ó–∞–ø—Ä–∞–≤–∫–∞ WOG", "OKKO –ø–∞–ª–∏–≤–æ", "Shell", "–ú–∏–π–∫–∞ –∞–≤—Ç–æ", 
        "–¢–µ—Ö–æ–≥–ª—è–¥", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–†–µ–º–æ–Ω—Ç –∞–≤—Ç–æ"
    ]
}

def generate_random_amount(category_type, category_name):
    """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—É —Å—É–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    if category_type == "expense":
        ranges = {
            "–ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è": (150, 1200),
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": (30, 600),
            "–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏": (80, 800),
            "–†–æ–∑–≤–∞–≥–∏": (200, 1500),
            "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": (300, 2500),
            "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏": (500, 2000),
            "–ú–µ–¥–∏—Ü–∏–Ω–∞": (80, 1200),
            "–û—Å–≤—ñ—Ç–∞": (300, 3000),
            "–°–ø–æ—Ä—Ç —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å": (150, 800),
            "–ö—Ä–∞—Å–∞": (100, 600),
            "–ü–æ–¥–∞—Ä—É–Ω–∫–∏": (200, 1500),
            "–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞": (800, 8000),
            "–ê–≤—Ç–æ —Ç–∞ –ø–∞–ª–∏–≤–æ": (400, 1500),
            "–ü—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏": (50, 500),
            "–Ü–Ω—à–µ": (50, 800)
        }
    else:  # income
        ranges = {
            "–ó–∞—Ä–ø–ª–∞—Ç–∞": (20000, 60000),
            "–§—Ä—ñ–ª–∞–Ω—Å": (1500, 12000),
            "–ü–æ–¥–∞—Ä—É–Ω–∫–∏": (300, 3000),
            "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": (800, 8000),
            "–ü—Ä–æ–¥–∞–∂ —Ä–µ—á–µ–π": (150, 2000),
            "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫": (800, 6000),
            "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–æ—Ä–≥—ñ–≤": (200, 3000),
            "–Ü–Ω—à–µ": (100, 1500)
        }
    
    min_amount, max_amount = ranges.get(category_name, (100, 1000))
    return round(random.uniform(min_amount, max_amount), 2)

def generate_random_date(days_back=90):
    """–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—É –¥–∞—Ç—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤"""
    today = datetime.date.today()
    start_date = today - datetime.timedelta(days=days_back)
    random_days = random.randint(0, days_back)
    return start_date + datetime.timedelta(days=random_days)

def add_categories_to_user(session, user):
    """–î–æ–¥–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    existing_categories = session.query(Category).filter_by(user_id=user.id).all()
    existing_names = {cat.name for cat in existing_categories}
    
    categories_added = 0
    
    # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
    for cat_data in EXPENSE_CATEGORIES:
        if cat_data["name"] not in existing_names:
            category = Category(
                user_id=user.id,
                name=cat_data["name"],
                type="expense",
                icon=cat_data["icon"],
                is_default=False
            )
            session.add(category)
            categories_added += 1
            
    # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
    for cat_data in INCOME_CATEGORIES:
        if cat_data["name"] not in existing_names:
            category = Category(
                user_id=user.id,
                name=cat_data["name"],
                type="income",
                icon=cat_data["icon"],
                is_default=False
            )
            session.add(category)
            categories_added += 1
    
    session.commit()
    print(f"–î–æ–¥–∞–Ω–æ {categories_added} –Ω–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    return session.query(Category).filter_by(user_id=user.id).all()

def add_transactions_to_user(session, user, categories, num_transactions=100):
    """–î–æ–¥–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    transactions_added = 0
    
    for _ in range(num_transactions):
        category = random.choice(categories)
        amount = generate_random_amount(category.type, category.name)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transaction_type = TransactionType.EXPENSE if category.type == "expense" else TransactionType.INCOME
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–ø–∏—Å
        examples = TRANSACTION_EXAMPLES.get(category.name, [f"–û–ø–µ—Ä–∞—Ü—ñ—è {category.name}"])
        description = random.choice(examples)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞—Ç—É
        transaction_date = generate_random_date(90)
        
        transaction = Transaction(
            user_id=user.id,
            category_id=category.id,
            amount=amount,
            description=description,
            transaction_date=datetime.datetime.combine(transaction_date, datetime.time(
                hour=random.randint(8, 22),
                minute=random.randint(0, 59)
            )),
            type=transaction_type,
            source="manual",
            is_recurring=random.choice([True, False]) if random.random() < 0.15 else False
        )
        
        session.add(transaction)
        transactions_added += 1
    
    session.commit()
    print(f"–î–æ–¥–∞–Ω–æ {transactions_added} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")

def create_budget_for_user(session, user, categories):
    """–°—Ç–≤–æ—Ä—é—î –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–ª–∞–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–ª–∞–Ω
    existing_budget = session.query(BudgetPlan).filter_by(user_id=user.id).first()
    if existing_budget:
        print("–ë—é–¥–∂–µ—Ç–Ω–∏–π –ø–ª–∞–Ω –≤–∂–µ —ñ—Å–Ω—É—î")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç
    start_date = datetime.date.today().replace(day=1)
    end_date = (start_date + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
    
    budget_plan = BudgetPlan(
        user_id=user.id,
        name=f"–ë—é–¥–∂–µ—Ç –Ω–∞ {start_date.strftime('%B %Y')}",
        start_date=datetime.datetime.combine(start_date, datetime.time()),
        end_date=datetime.datetime.combine(end_date, datetime.time()),
        total_budget=user.monthly_budget or 15000.0
    )
    
    session.add(budget_plan)
    session.commit()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±—é–¥–∂–µ—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç
    expense_categories = [cat for cat in categories if cat.type == "expense"]
    total_allocated = 0
    
    budget_allocations = [
        ("–ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", 0.25),
        ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", 0.15),
        ("–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏", 0.20),
        ("–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", 0.10),
        ("–†–æ–∑–≤–∞–≥–∏", 0.08),
        ("–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è", 0.07),
        ("–ú–µ–¥–∏—Ü–∏–Ω–∞", 0.05),
        ("–Ü–Ω—à–µ", 0.10)
    ]
    
    for category_name, percentage in budget_allocations:
        category = next((cat for cat in expense_categories if cat.name == category_name), None)
        if category:
            allocated_amount = round(budget_plan.total_budget * percentage, 2)
            
            category_budget = CategoryBudget(
                budget_plan_id=budget_plan.id,
                category_id=category.id,
                allocated_amount=allocated_amount
            )
            session.add(category_budget)
            total_allocated += allocated_amount
    
    session.commit()
    print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–ª–∞–Ω –Ω–∞ {budget_plan.total_budget} UAH")

def add_financial_advice(session, user):
    """–î–æ–¥–∞—î —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    advice_examples = [
        {
            "category": "savings",
            "text": "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è' —Ç–∞ –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏ —â–æ–º—ñ—Å—è—Ü—è 15-20% –≤—ñ–¥ –¥–æ—Ö–æ–¥—ñ–≤. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É –ø–æ–¥—É—à–∫—É –±–µ–∑–ø–µ–∫–∏ –Ω–∞ 3-6 –º—ñ—Å—è—Ü—ñ–≤ –≤–∏—Ç—Ä–∞—Ç."
        },
        {
            "category": "budget",
            "text": "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ñ–µ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏. –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å 10% –¥–æ—Ö–æ–¥—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –≥–æ—Ç—É–≤–∞—Ç–∏ –≤–¥–æ–º–∞ —á–∞—Å—Ç—ñ—à–µ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ª—ñ–º—ñ—Ç –Ω–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–æ–∑–∞ –¥–æ–º–æ–º."
        },
        {
            "category": "expenses",
            "text": "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏ - —á–∞—Å—Ç–æ –º–∏ –∑–∞–±—É–≤–∞—î–º–æ –ø—Ä–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏. –°–∫–∞—Å—É–π—Ç–µ —Ç—ñ, —è–∫–∏–º–∏ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω–æ."
        },
        {
            "category": "planning",
            "text": "–°—Ç–≤–æ—Ä—ñ—Ç—å –æ–∫—Ä–µ–º–∏–π —Ñ–æ–Ω–¥ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ (—Ç–µ—Ö–Ω—ñ–∫–∞, –≤—ñ–¥–ø—É—Å—Ç–∫–∞, –∞–≤—Ç–æ). –í—ñ–¥–∫–ª–∞–¥–∞–π—Ç–µ —â–æ–º—ñ—Å—è—Ü—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É —Å—É–º—É –∑–∞–º—ñ—Å—Ç—å —ñ–º–ø—É–ª—å—Å–∏–≤–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫."
        },
        {
            "category": "investment",
            "text": "–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å —É –û–í–î–ü –∞–±–æ ETF –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —ñ–Ω—Ñ–ª—è—Ü—ñ—ó —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É."
        }
    ]
    
    # –î–æ–¥–∞—î–º–æ 2-3 –ø–æ—Ä–∞–¥–∏
    num_advices = random.randint(2, 3)
    user_advices = random.sample(advice_examples, num_advices)
    
    for advice_data in user_advices:
        advice = FinancialAdvice(
            user_id=user.id,
            advice_text=advice_data["text"],
            category=advice_data["category"],
            is_applied=False,
            created_at=datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 14))
        )
        session.add(advice)
    
    session.commit()
    print(f"–î–æ–¥–∞–Ω–æ {num_advices} —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥")

def create_user_if_not_exists(session, telegram_id):
    """–°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î"""
    user = session.query(User).filter_by(telegram_id=telegram_id).first()
    if not user:
        print(f"üë§ –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: {telegram_id}")
        user = User(
            telegram_id=telegram_id,
            username="maskofmadnesss",  # –í–∞—à username
            first_name="–ê–Ω—Ç–æ–Ω",         # –í–∞—à–µ —ñ–º'—è
            last_name="–ë–æ–±—ñ–Ω–∞",         # –í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ
            initial_balance=10000.0,
            monthly_budget=15000.0,
            currency='UAH',
            is_setup_completed=True,
            setup_step='completed',
            notification_enabled=True,
            is_active=True,
            created_at=datetime.datetime.now(),
            last_active=datetime.datetime.now()
        )
        session.add(user)
        session.commit()
        print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {user.first_name} {user.last_name} (@{user.username})")
    return user

def generate_data_for_user(telegram_id, num_transactions=100):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    session = create_session()
    
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = create_user_if_not_exists(session, telegram_id)
        
        print(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.first_name} {user.last_name}")
        print(f"   Telegram ID: {user.telegram_id}")
        print(f"   Username: @{user.username}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        updated = False
        if not user.initial_balance:
            user.initial_balance = 10000.0
            updated = True
        if not user.monthly_budget:
            user.monthly_budget = 15000.0
            updated = True
        if not user.currency:
            user.currency = 'UAH'
            updated = True
        if not user.is_setup_completed:
            user.is_setup_completed = True
            user.setup_step = 'completed'
            updated = True
        
        if updated:
            session.commit()
            print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        print("\nüìÇ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
        categories = add_categories_to_user(session, user)
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        print(f"\nüí∞ –î–æ–¥–∞–≤–∞–Ω–Ω—è {num_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
        add_transactions_to_user(session, user, categories, num_transactions)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–ª–∞–Ω
        print("\nüìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω—É...")
        create_budget_for_user(session, user, categories)
        
        # –î–æ–¥–∞—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏
        print("\nüí° –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥...")
        add_financial_advice(session, user)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_transactions = session.query(Transaction).filter_by(user_id=user.id).count()
        total_categories = session.query(Category).filter_by(user_id=user.id).count()
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {total_transactions}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {total_categories}")
        print(f"   –ë—é–¥–∂–µ—Ç: {user.monthly_budget} {user.currency}")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö: {e}")
        import traceback
        traceback.print_exc()
    finally:
        session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö")
    print("="*50)
    
    # –í–∞—à Telegram ID
    your_telegram_id = 580683833
    
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {your_telegram_id}")
    print("‚ö° –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î")
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    try:
        print("\n–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:")
        num_transactions = input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 100): ").strip()
        num_transactions = int(num_transactions) if num_transactions else 100
        
        if num_transactions < 1:
            print("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
            return
        if num_transactions > 1000:
            print("‚ö†Ô∏è  –í–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –±–∞–≥–∞—Ç–æ —á–∞—Å—É")
            confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
            if confirm not in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
                print("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
                return
                
    except ValueError:
        num_transactions = 100
    
    print(f"\nüöÄ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó {num_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
    generate_data_for_user(your_telegram_id, num_transactions)

if __name__ == "__main__":
    main()
