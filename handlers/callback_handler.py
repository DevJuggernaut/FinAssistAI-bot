from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import os
from datetime import datetime, timedelta
import calendar
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∫-–µ–Ω–¥—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–µ–∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
import io
import uuid
import logging

from database.db_operations import get_or_create_user, get_monthly_stats, get_user_categories, get_user, get_user_transactions
from handlers.setup_callbacks import show_currency_selection, complete_setup
from services.financial_advisor import get_financial_advice
from handlers.budget_callbacks import create_budget_from_recommendations, show_budget_total_input
from services.analytics_service import analytics_service

logger = logging.getLogger(__name__)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∫–æ–ª–±–µ–∫, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –∑ –∫–Ω–æ–ø–∫–∏
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = get_user(update.effective_user.id)
        if not user:
            await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        callback_data = query.data
        
        # –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        if callback_data == "stats" or callback_data == "show_stats":
            await show_stats(query, context)
        elif callback_data == "add_transaction":
            await show_add_transaction_form(query, context)
        elif callback_data == "add_expense":
            await add_expense(query, context)
        elif callback_data == "add_income":
            await add_income(query, context)
        elif callback_data == "show_help":
            await show_help_menu(query, context)
        elif callback_data == "categories":
            await show_categories(query, context)
        elif callback_data == "reports":
            await show_reports_menu(query, context)
        
        # –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        elif callback_data == "stats_charts":
            await show_charts_menu(query, context)
        elif callback_data == "generate_report":
            await generate_monthly_report(query, context)
        elif callback_data == "export_transactions":
            await export_transactions(query, context)
        elif callback_data == "back_to_main":
            await back_to_main(query, context)
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (—Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ConversationHandler)
        elif callback_data == "setup_initial_balance":
            await show_currency_selection(query, context)
        elif callback_data == "complete_setup":
            await complete_setup(query, context)
        
        # –ë—é–¥–∂–µ—Ç—É–≤–∞–Ω–Ω—è —ñ –ø–æ—Ä–∞–¥–∏
        elif callback_data == "budget":
            await show_budget_menu(query, context)
        elif callback_data == "create_monthly_budget":
            await show_create_budget_form(query, context)
        elif callback_data == "budget_recommendations":
            await show_budget_recommendations(query, context)
        elif callback_data == "create_budget_from_recommendations":
            await create_budget_from_recommendations(query, context)
        elif callback_data == "view_past_budgets":
            await show_past_budgets(query, context)
        elif callback_data == "edit_budget":
            await show_edit_budget_form(query, context)
        elif callback_data == "detailed_budget_analysis":
            await show_budget_analysis(query, context)
        elif callback_data.startswith("select_budget_month_"):
            # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è –¥–ª—è –±—é–¥–∂–µ—Ç—É
            parts = callback_data.split("_")
            month = int(parts[3])
            year = int(parts[4])
            context.user_data['budget_creation'] = {'step': 'total_input', 'month': month, 'year': year}
            await show_budget_total_input(query, context)
            await show_budget_analysis(query, context)
        elif callback_data == "financial_advice":
            await show_financial_advice_menu(query, context)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        elif callback_data == "settings":
            await show_settings_menu(query, context)
        elif callback_data == "notification_settings":
            await show_notification_settings(query, context)
        elif callback_data == "currency_settings":
            await show_currency_settings(query, context)
        elif callback_data == "language_settings":
            await show_language_settings(query, context)
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        elif callback_data == "back_to_main":
            await show_main_menu(query, context)
        elif callback_data == "help":
            await show_help(query, context)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        elif callback_data.startswith("add_"):
            if callback_data == "add_expense":
                await show_add_expense_form(query, context)
            elif callback_data == "add_income":
                await show_add_income_form(query, context)
        
        # –ê–Ω–∞–ª—ñ–∑
        elif callback_data.startswith('analyze_'):
            await handle_analysis_callback(query, user)
        
        # –ù–µ—ñ–º–ø–ª–µ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
        else:
            await query.edit_message_text(
                text=f"üöß –§—É–Ω–∫—Ü—ñ—è '{callback_data}' –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ —Ç–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–æ—Ä–æ!"
            )
    except Exception as e:
        logger.error(f"Error handling callback: {str(e)}")
        await query.edit_message_text(
            text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_analysis_callback(query, user):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–ª–±–µ–∫—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ
        end_date = datetime.now()
        start_date = end_date - timedelta(days=90)
        transactions = get_user_transactions(user.id, start_date, end_date)
        
        if query.data == 'analyze_categories':
            # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            report = analytics_service.generate_custom_report(
                transactions,
                'category_analysis'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = report['statistics']
            await query.message.reply_text(
                "üìä –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç\n\n" +
                "\n".join(
                    f"‚Ä¢ {category}: {data['sum']:.2f} (—Å–µ—Ä–µ–¥–Ω—î: {data['mean']:.2f}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {data['count']})"
                    for category, data in stats.items()
                )
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            if report['visualization']:
                await query.message.reply_photo(
                    photo=report['visualization'],
                    caption="–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"
                )
        
        elif query.data == 'analyze_trends':
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤
            report = analytics_service.generate_custom_report(
                transactions,
                'trend_analysis',
                'monthly'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = report['statistics']
            await query.message.reply_text(
                "üìà –¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç\n\n" +
                "\n".join(
                    f"‚Ä¢ –ú—ñ—Å—è—Ü—å {month}: {data['sum']:.2f} (—Å–µ—Ä–µ–¥–Ω—î: {data['mean']:.2f}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {data['count']})"
                    for month, data in stats.items()
                )
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            if report['visualization']:
                await query.message.reply_photo(
                    photo=report['visualization'],
                    caption="–¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è—Ö"
                )
        
        elif query.data == 'analyze_budget':
            # –ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É
            report = analytics_service.generate_custom_report(
                transactions,
                'budget_analysis'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = report['statistics']
            await query.message.reply_text(
                "üí∞ –ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É\n\n" +
                "\n".join(
                    f"‚Ä¢ {category}:\n"
                    f"  - –§–∞–∫—Ç–∏—á–Ω–æ: {data['amount']:.2f}\n"
                    f"  - –ë—é–¥–∂–µ—Ç: {data['budget']:.2f}\n"
                    f"  - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {data['utilization']:.1f}%"
                    for category, data in stats.items()
                )
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            if report['visualization']:
                await query.message.reply_photo(
                    photo=report['visualization'],
                    caption="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç –∑ –±—é–¥–∂–µ—Ç–æ–º"
                )
        
        elif query.data == 'analyze_full':
            # –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –∑–≤—ñ—Ç—ñ–≤
            category_report = analytics_service.generate_custom_report(
                transactions,
                'category_analysis'
            )
            trend_report = analytics_service.generate_custom_report(
                transactions,
                'trend_analysis',
                'monthly'
            )
            budget_report = analytics_service.generate_custom_report(
                transactions,
                'budget_analysis'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
            await query.message.reply_text(
                "üìä –ü–æ–≤–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑\n\n"
                "–ê–Ω–∞–ª—ñ–∑ –≤–∫–ª—é—á–∞—î:\n"
                "‚Ä¢ –†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏\n"
                "‚Ä¢ –¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è—Ö\n"
                "‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –±—é–¥–∂–µ—Ç–æ–º\n\n"
                "–î–µ—Ç–∞–ª—å–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏."
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏
            for report, title in [
                (category_report, "–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"),
                (trend_report, "–¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è—Ö"),
                (budget_report, "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –±—é–¥–∂–µ—Ç–æ–º")
            ]:
                if report['visualization']:
                    await query.message.reply_photo(
                        photo=report['visualization'],
                        caption=title
                    )
    except Exception as e:
        logger.error(f"Error handling analysis callback: {str(e)}")
        await query.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑—É.")

async def show_stats(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from datetime import datetime
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        telegram_id = query.from_user.id
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        from database.db_operations import get_or_create_user, get_monthly_stats
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        user = get_or_create_user(
            telegram_id=telegram_id, 
            username=query.from_user.username,
            first_name=query.from_user.first_name,
            last_name=query.from_user.last_name
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_monthly_stats(user.id)
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        expenses = stats['expenses']
        income = stats['income']
        balance = stats['balance']
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        current_month = datetime.now().strftime("%B")
        months_uk = {
            "January": "—Å—ñ—á–µ–Ω—å", "February": "–ª—é—Ç–∏–π", "March": "–±–µ—Ä–µ–∑–µ–Ω—å",
            "April": "–∫–≤—ñ—Ç–µ–Ω—å", "May": "—Ç—Ä–∞–≤–µ–Ω—å", "June": "—á–µ—Ä–≤–µ–Ω—å",
            "July": "–ª–∏–ø–µ–Ω—å", "August": "—Å–µ—Ä–ø–µ–Ω—å", "September": "–≤–µ—Ä–µ—Å–µ–Ω—å",
            "October": "–∂–æ–≤—Ç–µ–Ω—å", "November": "–ª–∏—Å—Ç–æ–ø–∞–¥", "December": "–≥—Ä—É–¥–µ–Ω—å"
        }
        month_uk = months_uk.get(current_month, current_month)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (–≥—Ä–∞—Ñ—ñ—á–Ω–∞ —à–∫–∞–ª–∞)
        if income > 0:
            expense_percent = min(expenses / income * 100, 100)
            balance_scale = ""
            filled_blocks = int(expense_percent / 10)
            empty_blocks = 10 - filled_blocks
            
            if expense_percent < 70:
                balance_scale = "üü¢" * filled_blocks + "‚ö™" * empty_blocks
            elif 70 <= expense_percent < 90:
                balance_scale = "üü†" * filled_blocks + "‚ö™" * empty_blocks
            else:
                balance_scale = "üî¥" * filled_blocks + "‚ö™" * empty_blocks
            
            efficiency = f"–í–∏—Ç—Ä–∞—á–µ–Ω–æ {expense_percent:.1f}% –≤—ñ–¥ –¥–æ—Ö–æ–¥—É"
        else:
            balance_scale = "‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™"
            efficiency = "–î–æ–¥–∞–π—Ç–µ –¥–æ—Ö—ñ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = (
            f"üìä *–§–Ü–ù–ê–ù–°–û–í–ò–ô –û–ì–õ–Ø–î: {month_uk.upper()}*\n\n"
            f"üí∞ *–î–æ—Ö–æ–¥–∏:* `{income:.2f} –≥—Ä–Ω`\n"
            f"üí∏ *–í–∏—Ç—Ä–∞—Ç–∏:* `{expenses:.2f} –≥—Ä–Ω`\n"
            f"üíº *–ë–∞–ª–∞–Ω—Å:* `{balance:.2f} –≥—Ä–Ω`\n\n"
            f"{balance_scale}\n"
            f"_{efficiency}_\n\n"
        )
        
        # –î–æ–¥–∞—î–º–æ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é
        if stats['top_categories']:
            stats_text += "*–¢–û–ü –ö–ê–¢–ï–ì–û–†–Ü–ô –í–ò–¢–†–ê–¢:*\n"
            for i, category in enumerate(stats['top_categories'], 1):
                name, icon, amount = category
                percentage = (amount / expenses) * 100 if expenses > 0 else 0
                
                # –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω—É —à–∫–∞–ª—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                category_bar = ""
                bar_length = int(percentage / 10) if percentage > 0 else 0
                if bar_length > 0:
                    category_bar = "‚ñì" * min(bar_length, 10)
                
                stats_text += f"`{i}` {icon} *{name}*\n"
                stats_text += f"   `{amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)` {category_bar}\n"
        else:
            stats_text += "*–¢–û–ü –ö–ê–¢–ï–ì–û–†–Ü–ô –í–ò–¢–†–ê–¢:*\n"
            stats_text += "_–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ - –¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é!_\n\n"
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±—é–¥–∂–µ—Ç
        # –¶–µ –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
        budget_spent_percent = min((expenses / 10000) * 100, 100)  # –£–º–æ–≤–Ω–∏–π –±—é–¥–∂–µ—Ç 10000 –≥—Ä–Ω
        stats_text += f"\n*–ë–Æ–î–ñ–ï–¢ –ú–Ü–°–Ø–¶–Ø:*\n"
        stats_text += f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: `{budget_spent_percent:.1f}%` –≤—ñ–¥ –ø–ª–∞–Ω—É\n"
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data="stats_daily"),
                InlineKeyboardButton("üìÜ –¢–∏–∂–¥–µ–Ω—å", callback_data="stats_weekly"),
                InlineKeyboardButton("üìÜ –ú—ñ—Å—è—Ü—å", callback_data="stats_monthly")
            ],
            [
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏", callback_data="stats_charts")
            ],
            [
                InlineKeyboardButton("üíπ –î–∏–Ω–∞–º—ñ–∫–∞ –¥–æ—Ö–æ–¥—ñ–≤", callback_data="income_analysis"),
                InlineKeyboardButton("üí∏ –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç", callback_data="expense_analysis")
            ],
            [
                InlineKeyboardButton("üì• –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="export_transactions"),
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=stats_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        await query.edit_message_text(
            text=error_message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=error_message,
            reply_markup=reply_markup
        )

async def show_add_transaction_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    text = (
        "üí∞ *–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é*\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûñ –í–∏—Ç—Ä–∞—Ç–∞", callback_data="add_expense"),
            InlineKeyboardButton("‚ûï –î–æ—Ö—ñ–¥", callback_data="add_income")
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_categories(query, context):
    """–ü–æ–∫–∞–∑—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ–ø—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∏–º–∏"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        telegram_id = query.from_user.id
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        from database.db_operations import get_or_create_user, get_user_categories
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        user = get_or_create_user(
            telegram_id=telegram_id, 
            username=query.from_user.username,
            first_name=query.from_user.first_name,
            last_name=query.from_user.last_name
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        expense_categories = get_user_categories(user.id, 'expense')
        income_categories = get_user_categories(user.id, 'income')
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç
        text = "üóÇ *–í–∞—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó*\n\n"
        
        text += "*–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:*\n"
        if expense_categories:
            for category in expense_categories:
                text += f"‚Ä¢ {category.name} {category.icon}\n"
        else:
            text += "–ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç\n"
        
        text += "\n*–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:*\n"
        if income_categories:
            for category in income_categories:
                text += f"‚Ä¢ {category.name} {category.icon}\n"
        else:
            text += "–ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ—Ö–æ–¥—ñ–≤\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="add_category")
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_categories"),
                InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_category")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {str(e)}"
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=error_message,
            reply_markup=reply_markup
        )

async def show_reports_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤"""
    text = (
        "üìä *–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–≤—ñ—Ç–∏*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("üìÜ –ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç", callback_data="generate_report"),
            InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç", callback_data="expense_analysis")
        ],
        [
            InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data="budget_report"),
            InlineKeyboardButton("üìÑ –ï–∫—Å–ø–æ—Ä—Ç (CSV)", callback_data="export_transactions")
        ],
        [
            InlineKeyboardButton("üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="advanced_analytics")
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_charts_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏"""
    text = (
        "üìà *–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("üçï –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∞—Ç", callback_data="chart_expense_pie")
        ],
        [
            InlineKeyboardButton("üìä –î–æ—Ö–æ–¥–∏/–í–∏—Ç—Ä–∞—Ç–∏", callback_data="chart_income_expense")
        ],
        [
            InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥ –≤–∏—Ç—Ä–∞—Ç", callback_data="chart_expense_trend"),
            InlineKeyboardButton("üî• –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞", callback_data="chart_heatmap")
        ],
        [
            InlineKeyboardButton("üìä –ü–∞—Ç–µ—Ä–Ω–∏ –≤–∏—Ç—Ä–∞—Ç", callback_data="chart_patterns")
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def generate_monthly_report(query, context):
    """–ì–µ–Ω–µ—Ä—É—î –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await query.edit_message_text(
        text="üîÑ –ì–µ–Ω–µ—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å..."
    )
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        telegram_id = query.from_user.id
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        from database.db_operations import get_or_create_user
        from services.report_generator import generate_user_report
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        user = get_or_create_user(
            telegram_id=telegram_id, 
            username=query.from_user.username,
            first_name=query.from_user.first_name,
            last_name=query.from_user.last_name
        )
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç (–∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å)
        report_data = generate_user_report(user.id)
        
        if 'error' in report_data:
            raise Exception(report_data['error'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑–≤—ñ—Ç—É
        if os.path.exists(report_data['html_path']):
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—Ä—É–≥–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç
            if os.path.exists(report_data['charts']['pie']):
                with open(report_data['charts']['pie'], 'rb') as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption="üçï –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"
                    )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ HTML —Ñ–∞–π–ª –∑–≤—ñ—Ç—É
            with open(report_data['html_path'], 'rb') as document:
                await query.message.reply_document(
                    document=document,
                    filename="–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç.html",
                    caption="üìä –í–∞—à –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç –≥–æ—Ç–æ–≤–∏–π!"
                )
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await show_stats(query, context)
        else:
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª –∑–≤—ñ—Ç—É")
            
    except Exception as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {str(e)}"
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=error_message,
            reply_markup=reply_markup
        )

async def export_transactions(query, context):
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ CSV —Ñ–∞–π–ª"""
    await query.edit_message_text(
        text="üîÑ –ì–µ–Ω–µ—Ä—É—é –µ–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV. –ó–∞—á–µ–∫–∞–π—Ç–µ..."
    )
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        telegram_id = query.from_user.id
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        from database.db_operations import get_or_create_user
        from services.report_generator import export_user_transactions
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        user = get_or_create_user(
            telegram_id=telegram_id, 
            username=query.from_user.username,
            first_name=query.from_user.first_name,
            last_name=query.from_user.last_name
        )
        
        # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        csv_path, error = export_user_transactions(user.id)
        
        if error:
            raise Exception(error)
        
        if os.path.exists(csv_path):
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ CSV —Ñ–∞–π–ª
            with open(csv_path, 'rb') as document:
                current_month = datetime.now().strftime('%Y-%m')
                await query.message.reply_document(
                    document=document,
                    filename=f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó_{current_month}.csv",
                    caption="üìã –í–∞—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV!"
                )
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await show_stats(query, context)
        else:
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ CSV —Ñ–∞–π–ª")
            
    except Exception as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {str(e)}"
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=error_message,
            reply_markup=reply_markup
        )

async def show_financial_advice_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –ø–æ—Ä–∞–¥–∏"""
    text = (
        "üí° *–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –ø–æ—Ä–∞–¥–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ", callback_data="advice_general"),
            InlineKeyboardButton("üí∏ –ï–∫–æ–Ω–æ–º—ñ—è", callback_data="advice_savings")
        ],
        [
            InlineKeyboardButton("üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", callback_data="advice_investment"),
            InlineKeyboardButton("üìä –ë—é–¥–∂–µ—Ç", callback_data="advice_budget")
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_main_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    from datetime import datetime
    user = query.from_user
    current_hour = datetime.now().hour
    
    # –í–∏–±—ñ—Ä –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É –¥–æ–±–∏
    if 5 <= current_hour < 12:
        greeting = "‚òÄÔ∏è –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
    elif 12 <= current_hour < 18:
        greeting = "üå§Ô∏è –î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
    elif 18 <= current_hour < 23:
        greeting = "üåô –î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
    else:
        greeting = "‚ú® –î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ú–æ—ó —Ñ—ñ–Ω–∞–Ω—Å–∏", callback_data="stats"),
            InlineKeyboardButton("‚ûï –ù–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è", callback_data="add_transaction")
        ],
        [
            InlineKeyboardButton("üìÅ –ú–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="categories"),
            InlineKeyboardButton("üíº –ë—é–¥–∂–µ—Ç", callback_data="budget")
        ],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="reports"),
            InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∏", callback_data="financial_advice")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings"),
            InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"{greeting}, *{user.first_name}*!\n\n"
        f"*–§—ñ–Ω–ê—Å–∏—Å—Ç–µ–Ω—Ç* ‚Äî –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏.\n\n"
        f"üîπ *–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ*:\n"
        f"‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç —ñ –¥–æ—Ö–æ–¥—ñ–≤\n"
        f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ–∫—ñ–≤\n"
        f"‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –≤–∏–ø–∏—Å–æ–∫\n"
        f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n"
        f"‚Ä¢ –†–æ–∑—É–º–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n\n"
        f"_–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:_",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_help(query, context):
    """–ü–æ–∫–∞–∑—É—î –¥–æ–≤—ñ–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É - –ø–æ–≤–Ω–∏–π –≥—ñ–¥ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤"""
    help_text = (
        "üìö *–î–û–í–Ü–î–ö–ê –ü–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Æ*\n\n"
        
        "üî∂ *–ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞*\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É —Ä–æ–∑–¥—ñ–ª '–ú—ñ–π –±—é–¥–∂–µ—Ç' —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å\n"
        "2Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç –≤–∏—Ç—Ä–∞—Ç\n"
        "3Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç\n\n"
        
        "üî∂ *–©–æ–¥–µ–Ω–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è*\n"
        "1Ô∏è‚É£ –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–æ–¥–∞–≤–∞–π—Ç–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (–≤–∏—Ç—Ä–∞—Ç–∏/–¥–æ—Ö–æ–¥–∏)\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å–≤—ñ–π –±—é–¥–∂–µ—Ç —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ª—ñ–º—ñ—Ç–∏ –≤–∏—Ç—Ä–∞—Ç\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–∏—Ç—Ä–∞—Ç\n\n"
        
        "üî∑ *–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é)*\n"
        "‚Ä¢ *üí∞ –ú—ñ–π –±—é–¥–∂–µ—Ç* - –ø–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞–Ω—É –±–∞–ª–∞–Ω—Å—É, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É\n"
        "‚Ä¢ *‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é* - —à–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥—ñ–≤ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏\n"
        "‚Ä¢ *üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞* - –≥—Ä–∞—Ñ—ñ–∫–∏, –∑–≤—ñ—Ç–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É\n"
        "‚Ä¢ *‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è* - –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—ñ–¥ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏\n\n"
        
        "üî∑ *–°–ø–æ—Å–æ–±–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*\n"
        "‚Ä¢ üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å *—Ñ–æ—Ç–æ —á–µ–∫–∞* –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ üìé –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ *–±–∞–Ω–∫—ñ–≤—Å—å–∫—É –≤–∏–ø–∏—Å–∫—É* (.csv, .pdf, .xlsx)\n"
        "‚Ä¢ üí¨ –ù–∞–ø–∏—à—ñ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Ç–µ–∫—Å—Ç–æ–º: `–ü—Ä–æ–¥—É–∫—Ç–∏ 250 –≥—Ä–Ω`\n"
        "‚Ä¢ ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É: `+–ó–∞—Ä–ø–ª–∞—Ç–∞ 8000 –≥—Ä–Ω`\n\n"
        
        "üî∑ *AI-–ø–æ–º—ñ—á–Ω–∏–∫ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞*\n"
        "‚Ä¢ ‚ùì –ó–∞–ø–∏—Ç–∞–π—Ç–µ –ø—Ä–æ —Ñ—ñ–Ω–∞–Ω—Å–∏: `–°–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ó–∂—É —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?`\n"
        "‚Ä¢ üí° –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –ø–æ—Ä–∞–¥—É: `–ü–æ—Ä–∞–¥—å, —è–∫ –∑–∞–æ—â–∞–¥–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö`\n"
        "‚Ä¢ üìä –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó –≤–∏—Ç—Ä–∞—Ç –≤ —Ä–æ–∑–¥—ñ–ª—ñ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞\n"
        "‚Ä¢ üìâ –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö\n\n"
        
        "üî∑ *–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏*\n"
        "‚Ä¢ `/start` - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞\n"
        "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        "‚Ä¢ `/add` - –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        "‚Ä¢ `/stats` - –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    keyboard = [
        [
            InlineKeyboardButton("üìä –ú–æ—ó —Ñ—ñ–Ω–∞–Ω—Å–∏", callback_data="stats"),
            InlineKeyboardButton("‚ûï –ù–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è", callback_data="add_transaction")
        ],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="reports"),
            InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∏", callback_data="financial_advice")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=help_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_budget_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º"""
    from services.budget_manager import BudgetManager
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±—é–¥–∂–µ—Ç—É
    budget_manager = BudgetManager(user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
    budget_status = budget_manager.get_budget_status()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user.initial_balance is None or user.monthly_budget is None:
        # –Ø–∫—â–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å", callback_data="setup_initial_balance")
            ],
            [
                InlineKeyboardButton("üìù –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="setup_monthly_budget")
            ],
            [
                InlineKeyboardButton("üè∑Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç", callback_data="setup_categories")
            ],
            [
                InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
    elif budget_status['status'] == 'no_active_budget':
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget")
            ],
            [
                InlineKeyboardButton("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É", callback_data="budget_recommendations")
            ],
            [
                InlineKeyboardButton("üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –±—é–¥–∂–µ—Ç–∏", callback_data="view_past_budgets")
            ],
            [
                InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if user.initial_balance is None or user.monthly_budget is None:
            await query.edit_message_text(
                "‚ö†Ô∏è *–ù–µ–æ–±—Ö—ñ–¥–Ω–µ –ø–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è*\n\n"
                "–î–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"
                "1Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∞—à –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±–∞–ª–∞–Ω—Å\n"
                "2Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç –≤–∏—Ç—Ä–∞—Ç\n"
                "3Ô∏è‚É£ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "üíº *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º*\n\n"
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–∏—Ç—Ä–∞—Ç.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π –±—é–¥–∂–µ—Ç, –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å
        active_budget = budget_status['data']
        start_date = active_budget['budget'].start_date.strftime('%d.%m.%Y')
        end_date = active_budget['budget'].end_date.strftime('%d.%m.%Y')
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω –±—é–¥–∂–µ—Ç—É
        usage_percent = active_budget['usage_percent']
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ emoji –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
        if usage_percent > 90:
            status_emoji = "üî¥"
        elif usage_percent > 70:
            status_emoji = "üü†"
        else:
            status_emoji = "üü¢"
        
        message = (
            f"üíº *–ë—é–¥–∂–µ—Ç: {active_budget['budget'].name}*\n"
            f"üìÖ –ü–µ—Ä—ñ–æ–¥: {start_date} - {end_date}\n\n"
            f"{status_emoji} *–°—Ç–∞–Ω –±—é–¥–∂–µ—Ç—É*: {usage_percent:.1f}% –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ\n"
            f"üí∞ *–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç*: `{active_budget['budget'].total_budget:.2f} –≥—Ä–Ω`\n"
            f"üí∏ *–í–∏—Ç—Ä–∞—á–µ–Ω–æ*: `{active_budget['total_spending']:.2f} –≥—Ä–Ω`\n"
            f"‚úÖ *–ó–∞–ª–∏—à–∏–ª–æ—Å—å*: `{active_budget['total_remaining']:.2f} –≥—Ä–Ω`\n\n"
            f"üìä *–î–µ—Ç–∞–ª—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º*:\n"
        )
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
        for i, cat_budget in enumerate(sorted(active_budget['category_budgets'], key=lambda x: x['usage_percent'], reverse=True)):
            if i < 5:  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ emoji –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                if cat_budget['usage_percent'] > 100:
                    cat_emoji = "‚ùå"
                elif cat_budget['usage_percent'] > 90:
                    cat_emoji = "‚ö†Ô∏è"
                else:
                    cat_emoji = "‚úÖ"
                
                message += (
                    f"{cat_emoji} {cat_budget['category_icon']} {cat_budget['category_name']}: "
                    f"`{cat_budget['usage_percent']:.1f}%` "
                    f"(`{cat_budget['actual_spending']:.0f}`/`{cat_budget['allocated_amount']:.0f}` –≥—Ä–Ω)\n"
                )
        
        if len(active_budget['category_budgets']) > 5:
            message += f"... —Ç–∞ —â–µ {len(active_budget['category_budgets']) - 5} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="edit_budget"),
                InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", callback_data="detailed_budget_analysis")
            ],
            [
                InlineKeyboardButton("‚ûï –ù–æ–≤–∏–π –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget"),
                InlineKeyboardButton("üìë –Ü—Å—Ç–æ—Ä—ñ—è –±—é–¥–∂–µ—Ç—ñ–≤", callback_data="view_past_budgets")
            ],
            [
                InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def show_create_budget_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç—É"""
    # –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫ - –≤–∏–±—ñ—Ä –º—ñ—Å—è—Ü—è –¥–ª—è –±—é–¥–∂–µ—Ç—É
    today = datetime.now()
    current_month = today.month
    current_year = today.year
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 3 –º—ñ—Å—è—Ü—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É
    months = []
    for i in range(0, 3):
        month = current_month + i
        year = current_year
        if month > 12:
            month -= 12
            year += 1
        month_name = calendar.month_name[month]
        months.append((month, year, f"{month_name} {year}"))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è
    keyboard = []
    for month, year, label in months:
        keyboard.append([
            InlineKeyboardButton(label, callback_data=f"select_budget_month_{month}_{year}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üóì *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç—É*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å, –¥–ª—è —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
    context.user_data['budget_creation'] = {'step': 'month_selection'}

async def show_budget_recommendations(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    from services.budget_manager import BudgetManager
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±—é–¥–∂–µ—Ç—É
    budget_manager = BudgetManager(user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    await query.edit_message_text(
        "üìä *–ì–µ–Ω–µ—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É...*\n\n"
        "–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É.",
        parse_mode="Markdown"
    )
    
    try:
        recommendations = budget_manager.generate_budget_recommendations()
        
        message = (
            "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É*\n\n"
            f"–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∏—Ç—Ä–∞—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å:\n"
            f"üí∞ *–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç*: `{recommendations['total_recommended_budget']:.2f} –≥—Ä–Ω`\n\n"
            f"üìä *–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º*:\n"
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º–∏ –±—é–¥–∂–µ—Ç–∞–º–∏
        for i, cat in enumerate(sorted(recommendations['category_recommendations'], key=lambda x: x['recommended_budget'], reverse=True)[:5]):
            message += (
                f"{i+1}. {cat['icon']} {cat['name']}: `{cat['recommended_budget']:.2f} –≥—Ä–Ω` "
                f"({cat['percentage_of_total']:.1f}%)\n"
            )
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—ñ–π –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏", callback_data="create_budget_from_recommendations")
            ],
            [
                InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        context.user_data['budget_recommendations'] = recommendations
        
    except Exception as e:
        # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ü–µ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±—é–¥–∂–µ—Ç—É
        await query.edit_message_text(
            "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó*\n\n"
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç –≤—Ä—É—á–Ω—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )

async def show_past_budgets(query, context):
    """–ü–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é –±—é–¥–∂–µ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    from services.budget_manager import BudgetManager
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±—é–¥–∂–µ—Ç—É
    budget_manager = BudgetManager(user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –±—é–¥–∂–µ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    budgets = budget_manager.get_all_budgets()
    
    if not budgets:
        await query.edit_message_text(
            "üìÇ *–Ü—Å—Ç–æ—Ä—ñ—è –±—é–¥–∂–µ—Ç—ñ–≤*\n\n"
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –±—é–¥–∂–µ—Ç—ñ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )
        return
    
    message = "üìÇ *–Ü—Å—Ç–æ—Ä—ñ—è –±—é–¥–∂–µ—Ç—ñ–≤*\n\n"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –±—é–¥–∂–µ—Ç—ñ–≤
    for i, budget in enumerate(budgets[:5]):
        start_date = budget.start_date.strftime('%d.%m.%Y')
        end_date = budget.end_date.strftime('%d.%m.%Y')
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É
        today = datetime.now().date()
        if budget.start_date <= today <= budget.end_date:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π"
        elif budget.end_date < today:
            status = "üîµ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π"
        else:
            status = "üü° –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π"
        
        message += (
            f"{i+1}. *{budget.name}*\n"
            f"   {status} ‚Ä¢ –ü–µ—Ä—ñ–æ–¥: {start_date} - {end_date}\n"
            f"   –ë—é–¥–∂–µ—Ç: {budget.total_budget:.2f} –≥—Ä–Ω\n\n"
        )
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_edit_budget_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    from services.budget_manager import BudgetManager
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±—é–¥–∂–µ—Ç—É
    budget_manager = BudgetManager(user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –±—é–¥–∂–µ—Ç
    active_budget = budget_manager.get_active_budget()
    
    if not active_budget:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n"
            "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )
        return
    
    # –ù–∞ –¥–∞–Ω–æ–º—É –µ—Ç–∞–ø—ñ –º–∏ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ
    # –í –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–µ—Ä—Å—ñ—è—Ö —Ç—É—Ç –±—É–¥–µ —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    await query.edit_message_text(
        "‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É*\n\n"
        "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ —Ç–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —É –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n\n"
        "–ó–∞—Ä–∞–∑ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
        ]),
        parse_mode="Markdown"
    )

async def show_budget_analysis(query, context):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É"""
    from services.budget_manager import BudgetManager
    import matplotlib.pyplot as plt
    import numpy as np
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±—é–¥–∂–µ—Ç—É
    budget_manager = BudgetManager(user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –±—é–¥–∂–µ—Ç
    active_budget = budget_manager.get_active_budget()
    
    if not active_budget:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n"
            "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="create_monthly_budget")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )
        return
    
    await query.edit_message_text(
        "üìä *–ì–µ–Ω–µ—Ä—É—é –∞–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É...*\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.",
        parse_mode="Markdown"
    )
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—É –¥—ñ–∞–≥—Ä–∞–º—É –±—é–¥–∂–µ—Ç—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
        categories = []
        allocated = []
        spent = []
        
        for cat_budget in active_budget['category_budgets']:
            categories.append(f"{cat_budget['category_icon']} {cat_budget['category_name']}")
            allocated.append(cat_budget['allocated_amount'])
            spent.append(cat_budget['actual_spending'])
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ —Ç–æ–ø-7 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        if len(categories) > 7:
            other_allocated = sum(allocated[7:])
            other_spent = sum(spent[7:])
            
            categories = categories[:7] + ["üì¶ –Ü–Ω—à—ñ"]
            allocated = allocated[:7] + [other_allocated]
            spent = spent[:7] + [other_spent]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        plt.figure(figsize=(10, 6))
        
        x = np.arange(len(categories))
        width = 0.35
        
        plt.bar(x - width/2, allocated, width, label='–ë—é–¥–∂–µ—Ç')
        plt.bar(x + width/2, spent, width, label='–í–∏—Ç—Ä–∞—á–µ–Ω–æ')
        
        plt.title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –±—é–¥–∂–µ—Ç—É —ñ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º')
        plt.xlabel('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó')
        plt.ylabel('–°—É–º–∞ (–≥—Ä–Ω)')
        plt.xticks(x, categories, rotation=45, ha='right')
        plt.legend()
        plt.tight_layout()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —É –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        
        # –û—á–∏—â–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥ –ø–∞–º'—è—Ç—ñ
        plt.close()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        filename = f"budget_analysis_{uuid.uuid4()}.png"
        await query.message.reply_photo(
            photo=buf,
            caption=(
                "üìä *–ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É*\n\n"
                f"–ü–µ—Ä—ñ–æ–¥: {active_budget['budget'].start_date.strftime('%d.%m.%Y')} - "
                f"{active_budget['budget'].end_date.strftime('%d.%m.%Y')}\n"
                f"–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç: {active_budget['budget'].total_budget:.2f} –≥—Ä–Ω\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {active_budget['total_spending']:.2f} –≥—Ä–Ω ({active_budget['usage_percent']:.1f}%)"
            ),
            parse_mode="Markdown"
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –±—é–¥–∂–µ—Ç—É
        await show_budget_menu(query, context)
        
    except Exception as e:
        await query.edit_message_text(
            "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑*\n\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )

async def show_settings_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    keyboard = [
        [
            InlineKeyboardButton("üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="notification_settings"),
            InlineKeyboardButton("üí± –í–∞–ª—é—Ç–∞", callback_data="currency_settings")
        ],
        [
            InlineKeyboardButton("üåê –ú–æ–≤–∞", callback_data="language_settings"),
            InlineKeyboardButton("üìã –§–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—ñ–≤", callback_data="report_format_settings")
        ],
        [
            InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è", callback_data="sync_settings"),
            InlineKeyboardButton("‚öôÔ∏è –Ü–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="other_settings")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è*\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞ –ø—ñ–¥ —Å–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏.\n"
        "–ó–º—ñ–Ω—é–π—Ç–µ –≤–∞–ª—é—Ç—É, –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –Ω–∞–ª–∞—à—Ç–æ–≤—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è "
        "—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏ –∑–≤—ñ—Ç—ñ–≤.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_notification_settings(query, context):
    """–ü–æ–∫–∞–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    keyboard = [
        [
            InlineKeyboardButton("üîî –©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏", callback_data="toggle_daily_reports"),
            InlineKeyboardButton("üîï –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å–µ", callback_data="disable_all_notifications")
        ],
        [
            InlineKeyboardButton("‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤", callback_data="toggle_limit_alerts"),
            InlineKeyboardButton("üí∏ –í–µ–ª–∏–∫—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="toggle_large_transactions")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîî *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å*\n\n"
        "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ, —è–∫—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥ –±–æ—Ç–∞.\n\n"
        "‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏: –æ—Ç—Ä–∏–º—É–π—Ç–µ –ø—ñ–¥—Å—É–º–æ–∫ –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç —â–æ–¥–Ω—è\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤: –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∫–æ–ª–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –ª—ñ–º—ñ—Ç\n"
        "‚Ä¢ –í–µ–ª–∏–∫—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, —â–æ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—É –≤–∞–º–∏ —Å—É–º—É\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_currency_settings(query, context):
    """–ü–æ–∫–∞–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚Ç¥ –ì—Ä–∏–≤–Ω—è (UAH)", callback_data="set_currency_uah"),
            InlineKeyboardButton("$ –î–æ–ª–∞—Ä (USD)", callback_data="set_currency_usd")
        ],
        [
            InlineKeyboardButton("‚Ç¨ –Ñ–≤—Ä–æ (EUR)", callback_data="set_currency_eur"),
            InlineKeyboardButton("¬£ –§—É–Ω—Ç (GBP)", callback_data="set_currency_gbp")
        ],
        [
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏", callback_data="toggle_auto_convert")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí± *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—É –≤–∞–ª—é—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—É–º —Ç–∞ –∑–≤—ñ—Ç—ñ–≤.\n"
        "–¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –º—ñ–∂ –≤–∞–ª—é—Ç–∞–º–∏.\n\n"
        "–ü–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞: *‚Ç¥ –ì—Ä–∏–≤–Ω—è (UAH)*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –≤–∞–ª—é—Ç—É:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_language_settings(query, context):
    """–ü–æ–∫–∞–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    keyboard = [
        [
            InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_lang_uk"),
            InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üåê *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤–∏*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –±–æ—Ç–∞:\n\n"
        "–ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞: *üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞*",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
async def show_add_expense_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏"""
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = query.from_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
    user = get_or_create_user(
        telegram_id=user_id,
        username=query.from_user.username,
        first_name=query.from_user.first_name,
        last_name=query.from_user.last_name
    )
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
    expense_categories = get_user_categories(user.id, 'expense')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    text = (
        "üí∏ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏:\n\n"
        "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∏–∂—á–µ\n"
        "2Ô∏è‚É£ –ê–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`[–û–ø–∏—Å] [–°—É–º–∞] –≥—Ä–Ω`\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `–ü—Ä–æ–¥—É–∫—Ç–∏ 250 –≥—Ä–Ω`"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –≤–∏—Ç—Ä–∞—Ç
    keyboard = []
    row = []
    
    for i, category in enumerate(expense_categories):
        # –î–æ–¥–∞—î–º–æ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        category_btn = InlineKeyboardButton(
            f"{category.icon} {category.name}",
            callback_data=f"expense_cat_{category.id}"
        )
        row.append(category_btn)
        
        if len(row) == 2 or i == len(expense_categories) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("‚ûï –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", callback_data="add_expense_category")
    ])
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="add_transaction")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –≤—ñ–Ω –¥–æ–¥–∞—î –≤–∏—Ç—Ä–∞—Ç—É
    if 'user_state' not in context.user_data:
        context.user_data['user_state'] = {}
    context.user_data['user_state']['action'] = 'adding_expense'
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
async def show_add_income_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É"""
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ—Ö–æ–¥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = query.from_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
    user = get_or_create_user(
        telegram_id=user_id,
        username=query.from_user.username,
        first_name=query.from_user.first_name,
        last_name=query.from_user.last_name
    )
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
    income_categories = get_user_categories(user.id, 'income')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    text = (
        "üí∞ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É:\n\n"
        "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∏–∂—á–µ\n"
        "2Ô∏è‚É£ –ê–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`+[–û–ø–∏—Å] [–°—É–º–∞] –≥—Ä–Ω`\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `+–ó–∞—Ä–ø–ª–∞—Ç–∞ 15000 –≥—Ä–Ω`"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –¥–æ—Ö–æ–¥—ñ–≤
    keyboard = []
    row = []
    
    for i, category in enumerate(income_categories):
        # –î–æ–¥–∞—î–º–æ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        category_btn = InlineKeyboardButton(
            f"{category.icon} {category.name}",
            callback_data=f"income_cat_{category.id}"
        )
        row.append(category_btn)
        
        if len(row) == 2 or i == len(income_categories) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("‚ûï –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", callback_data="add_income_category")
    ])
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="add_transaction")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –≤—ñ–Ω –¥–æ–¥–∞—î –¥–æ—Ö—ñ–¥
    if 'user_state' not in context.user_data:
        context.user_data['user_state'] = {}
    context.user_data['user_state']['action'] = 'adding_income'
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è

async def add_expense(query, context):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ñ–æ—Ä–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
    from database.db_operations import get_user_categories
    
    user = get_user(query.from_user.id)
    expense_categories = get_user_categories(user.id, 'expense')
    
    keyboard = []
    row = []
    for i, category in enumerate(expense_categories):
        row.append(InlineKeyboardButton(f"{category.icon} {category.name}", callback_data=f"select_expense_category_{category.id}"))
        if (i + 1) % 2 == 0 or i == len(expense_categories) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí∏ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def add_income(query, context):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ñ–æ—Ä–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—É
    from database.db_operations import get_user_categories
    
    user = get_user(query.from_user.id)
    income_categories = get_user_categories(user.id, 'income')
    
    keyboard = []
    row = []
    for i, category in enumerate(income_categories):
        row.append(InlineKeyboardButton(f"{category.icon} {category.name}", callback_data=f"select_income_category_{category.id}"))
        if (i + 1) % 2 == 0 or i == len(income_categories) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí∞ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ—Ö–æ–¥—É:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_help_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ —ñ —Ä–æ–∑–¥—ñ–ª–∞–º–∏ –¥–æ–≤—ñ–¥–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –ü–µ—Ä—à—ñ –∫—Ä–æ–∫–∏", callback_data="help_getting_started"),
            InlineKeyboardButton("üí∏ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏", callback_data="help_transactions")
        ],
        [
            InlineKeyboardButton("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏", callback_data="help_stats"),
            InlineKeyboardButton("üîÆ AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="help_ai")
        ],
        [
            InlineKeyboardButton("üì± –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞", callback_data="help_commands"),
            InlineKeyboardButton("üîç –ü–æ—à–∏—Ä–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="help_faq")
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìö *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é FinAssist*\n\n"
        "–ë–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏, –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –±—é–¥–∂–µ—Ç —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–∏.\n\n"
        "üî∏ *–ü–æ—Ç—Ä—ñ–±–Ω–∞ —à–≤–∏–¥–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞?* ‚Äî –≤–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ\n"
        "üî∏ *–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏* ‚Äî –¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —á–µ—Ä–µ–∑ '‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é'\n"
        "üî∏ *–©–æ–¥–µ–Ω–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è* ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–æ–¥–∞–≤–∞–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É\n",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def back_to_main(query, context):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ú—ñ–π –±—é–¥–∂–µ—Ç", callback_data="budget"),
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é", callback_data="add_transaction")
        ],
        [
            InlineKeyboardButton("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="reports"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
        ],
        [
            InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    first_name = query.from_user.first_name or "–¥—Ä—É–∂–µ"
    
    await query.edit_message_text(
        f"üëã *–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {first_name}!*\n\n"
        "–í–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )