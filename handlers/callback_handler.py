from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import os
from datetime import datetime, timedelta
import calendar
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∫-–µ–Ω–¥—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–µ–∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
import io
import uuid
import logging
import re

from database.db_operations import get_or_create_user, get_monthly_stats, get_user_categories, get_user, get_user_transactions
from handlers.setup_callbacks import show_currency_selection, complete_setup
from services.financial_advisor import get_financial_advice
from handlers.budget_callbacks import create_budget_from_recommendations, show_budget_total_input
from services.analytics_service import analytics_service
from handlers.transaction_handler import (
    show_add_transaction_menu, show_manual_transaction_type, 
    show_enhanced_expense_form, show_enhanced_income_form,
    show_upload_statement_form, show_upload_pdf_guide, 
    show_upload_excel_guide, show_upload_csv_guide,
    show_receipt_photo_soon, notify_receipt_ready,
    show_transaction_success, show_manual_transaction_form,
    show_add_expense_form, show_add_income_form,
    show_photo_receipt_form, show_all_transactions,
    handle_transactions_pagination, handle_import_all_transactions,
    handle_edit_transactions, handle_cancel_import,
    handle_remove_duplicates, handle_set_import_period,
    handle_back_to_preview, handle_period_selection
)
from handlers.placeholder_handlers import (
    show_help_menu, show_reports_menu, show_charts_menu,
    generate_monthly_report, export_transactions, show_setup_monthly_budget_form,
    show_setup_categories_form, show_budget_menu, show_create_budget_form,
    show_budget_recommendations, show_past_budgets, show_edit_budget_form,
    show_budget_analysis, show_financial_advice_menu,
    show_notification_settings, show_currency_settings, show_language_settings, show_help
)
from handlers.settings_handler import (
    show_settings_menu, show_categories_management, show_add_category_menu,
    show_delete_category_select, confirm_delete_category, delete_category_confirmed,
    show_currency_settings as show_settings_currency, set_currency, show_export_menu,
    export_csv, show_clear_data_menu, confirm_clear_data, clear_data_confirmed,
    handle_add_category_type, show_all_categories
)
from handlers.help_handler import (
    show_help_menu, show_faq_menu, show_faq_add_transaction, show_faq_upload_statement,
    show_faq_change_category, show_faq_export_data, show_faq_clear_data, show_faq_file_formats,
    show_contacts, show_about_bot, show_changelog, show_privacy_policy
)
from handlers.analytics_handler import (
    show_analytics_main_menu, show_expense_statistics, show_period_statistics,
    show_ai_recommendations, show_period_reports, show_period_comparison,
    show_detailed_categories, show_top_transactions, show_analytics_settings,
    show_ai_savings_tips, show_ai_analysis_for_period, show_period_comparison_detail,
    show_category_limits_settings, show_ai_budget_planning, show_savings_goals,
    show_auto_reports_settings, show_report_format_settings, show_goals_reminders_settings,
    show_export_settings, show_custom_period_comparison, show_trend_analysis,
    show_financial_insights, show_spending_heatmap, show_detailed_analysis_menu
)

logger = logging.getLogger(__name__)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = None
    try:
        query = update.callback_query
        await query.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∫–æ–ª–±–µ–∫, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –∑ –∫–Ω–æ–ø–∫–∏
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = get_user(update.effective_user.id)
        if not user:
            await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        callback_data = query.data
        
        # –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        if callback_data == "stats" or callback_data == "show_stats":
            await show_stats(query, context)
        elif callback_data == "add_transaction":
            await show_add_transaction_menu(query, context)
        elif callback_data == "add_expense":
            await show_add_expense_form(query, context)
        elif callback_data == "add_income":
            await show_add_income_form(query, context)
        elif callback_data == "show_help":
            await show_help_menu(query, context)
        elif callback_data == "categories":
            await show_categories_management(query, context)
        elif callback_data == "analytics":
            await show_analytics_main_menu(query, context)
        
        # –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó - –Ω–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞
        elif callback_data == "analytics_expense_stats":
            await show_expense_statistics(query, context)
        elif callback_data == "analytics_ai_recommendations":
            await show_ai_recommendations(query, context)
        elif callback_data == "analytics_period_reports":
            await show_period_reports(query, context)
        elif callback_data == "analytics_period_comparison":
            await show_period_comparison(query, context)
        elif callback_data == "analytics_detailed_analysis":
            await show_detailed_analysis_menu(query, context)
        elif callback_data == "analytics_settings":
            await show_analytics_settings(query, context)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏
        elif callback_data.startswith("expense_stats_"):
            period_type = callback_data.replace("expense_stats_", "")
            await show_period_statistics(query, context, period_type)
        elif callback_data.startswith("detailed_categories_"):
            period_type = callback_data.replace("detailed_categories_", "")
            await show_detailed_categories(query, context, period_type)
        elif callback_data.startswith("top_transactions_"):
            period_type = callback_data.replace("top_transactions_", "")
            await show_top_transactions(query, context, period_type)
        
        # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏
        elif callback_data == "ai_savings_tips":
            await show_ai_savings_tips(query, context)
        elif callback_data.startswith("ai_analysis_"):
            period_type = callback_data.replace("ai_analysis_", "")
            await show_ai_analysis_for_period(query, context, period_type)
        elif callback_data.startswith("compare_periods_"):
            period_type = callback_data.replace("compare_periods_", "")
            await show_period_comparison_detail(query, context, period_type)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        elif callback_data == "set_category_limits":
            await show_category_limits_settings(query, context)
        elif callback_data == "ai_budget_planning":
            await show_ai_budget_planning(query, context)
        elif callback_data == "savings_goals":
            await show_savings_goals(query, context)
        elif callback_data == "analytics_auto_reports":
            await show_auto_reports_settings(query, context)
        elif callback_data == "analytics_report_format":
            await show_report_format_settings(query, context)
        elif callback_data == "analytics_goals_reminders":
            await show_goals_reminders_settings(query, context)
        elif callback_data == "analytics_export_settings":
            await show_export_settings(query, context)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        elif callback_data == "custom_comparison":
            await show_custom_period_comparison(query, context)
        elif callback_data == "trend_analysis":
            await show_trend_analysis(query, context)
        elif callback_data == "financial_insights":
            await show_financial_insights(query, context)
        elif callback_data == "spending_heatmap":
            await show_spending_heatmap(query, context)
        
        # –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        elif callback_data == "ai_analysis_periods":
            await show_ai_analysis_for_period(query, context)
        elif callback_data == "detailed_period_comparison":
            await show_period_comparison_detail(query, context)
        elif callback_data == "custom_period_comparison":
            await show_custom_period_comparison(query, context)
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
        elif callback_data == "compare_current_prev_month":
            await show_period_comparison_detail(query, context, "month")
        elif callback_data == "compare_current_prev_week":
            await show_period_comparison_detail(query, context, "week")
        elif callback_data == "compare_30_days":
            await show_period_comparison_detail(query, context, "30days")
        elif callback_data == "compare_quarters":
            await show_period_comparison_detail(query, context, "quarter")
        elif callback_data == "compare_year_to_year":
            await show_period_comparison_detail(query, context, "year")
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        elif callback_data == "export_trend_data":
            await query.answer("üìä –§—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º", show_alert=True)
        elif callback_data == "financial_forecast":
            await query.answer("üîÆ –§—É–Ω–∫—Ü—ñ—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–æ–±–ª—è—î—Ç—å—Å—è", show_alert=True)
        elif callback_data == "detailed_trend_analysis":
            await show_trend_analysis(query, context)
        elif callback_data == "trend_period_3months":
            await show_trend_analysis(query, context, period="3months")
        elif callback_data == "trend_period_6months":
            await show_trend_analysis(query, context, period="6months")
        elif callback_data == "trend_period_year":
            await show_trend_analysis(query, context, period="year")
        
        # –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó - —Å—Ç–∞—Ä–∞ —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
        elif callback_data == "stats_charts":
            await show_charts_menu(query, context)
        elif callback_data == "generate_report":
            await generate_monthly_report(query, context)
        elif callback_data == "export_transactions":
            await export_transactions(query, context)
        elif callback_data == "back_to_main":
            await back_to_main(query, context)
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (—Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ConversationHandler)
        elif callback_data == "setup_initial_balance":
            await show_currency_selection(query, context)
        elif callback_data == "complete_setup":
            await complete_setup(query, context)
        elif callback_data == "setup_monthly_budget":
            await show_setup_monthly_budget_form(query, context)
        elif callback_data == "setup_categories":
            await show_setup_categories_form(query, context)
        
        # –ë—é–¥–∂–µ—Ç—É–≤–∞–Ω–Ω—è —ñ –ø–æ—Ä–∞–¥–∏
        elif callback_data == "my_budget":
            from handlers.budget_callbacks import show_my_budget_overview
            await show_my_budget_overview(query, context)
        elif callback_data == "my_budget_overview":
            from handlers.budget_callbacks import show_my_budget_overview
            await show_my_budget_overview(query, context)
        elif callback_data == "budget":
            await show_budget_menu(query, context)
        elif callback_data == "create_monthly_budget":
            await show_create_budget_form(query, context)
        elif callback_data == "budget_recommendations":
            await show_budget_recommendations(query, context)
        elif callback_data == "create_budget_from_recommendations":
            await create_budget_from_recommendations(query, context)
        elif callback_data == "view_past_budgets":
            await show_past_budgets(query, context)
        elif callback_data == "edit_budget":
            await show_edit_budget_form(query, context)
        elif callback_data == "detailed_budget_analysis":
            await show_budget_analysis(query, context)
        elif callback_data.startswith("select_budget_month_"):
            # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è –¥–ª—è –±—é–¥–∂–µ—Ç—É
            parts = callback_data.split("_")
            month = int(parts[3])
            year = int(parts[4])
            context.user_data['budget_creation'] = {'step': 'total_input', 'month': month, 'year': year}
            await show_budget_total_input(query, context)
            await show_budget_analysis(query, context)
        elif callback_data == "financial_advice":
            await show_financial_advice_menu(query, context)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        elif callback_data == "settings":
            await show_settings_menu(query, context)
        elif callback_data == "notification_settings":
            await show_notification_settings(query, context)
        elif callback_data == "currency_settings":
            await show_currency_settings(query, context)
        elif callback_data == "language_settings":
            await show_language_settings(query, context)
        
        # –ù–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MVP
        elif callback_data == "settings_categories":
            await show_categories_management(query, context)
        elif callback_data == "add_category":
            await show_add_category_menu(query, context)
        elif callback_data == "view_all_categories":
            await show_all_categories(query, context)
        elif callback_data == "add_category_expense":
            await handle_add_category_type(query, context, "expense")
        elif callback_data == "add_category_income":
            await handle_add_category_type(query, context, "income")
        elif callback_data == "delete_category_select":
            await show_delete_category_select(query, context)
        elif callback_data == "edit_category_select":
            await query.answer("‚úèÔ∏è –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó", show_alert=True)
        elif callback_data.startswith("confirm_delete_cat_"):
            category_id = int(callback_data.replace("confirm_delete_cat_", ""))
            await confirm_delete_category(query, context, category_id)
        elif callback_data.startswith("delete_cat_confirmed_"):
            category_id = int(callback_data.replace("delete_cat_confirmed_", ""))
            await delete_category_confirmed(query, context, category_id)
        elif callback_data == "settings_currency":
            await show_settings_currency(query, context)
        elif callback_data.startswith("set_currency_"):
            currency_code = callback_data.replace("set_currency_", "")
            await set_currency(query, context, currency_code)
        elif callback_data == "settings_export":
            await show_export_menu(query, context)
        elif callback_data == "export_csv":
            await export_csv(query, context)
        elif callback_data == "settings_clear_data":
            await show_clear_data_menu(query, context)
        elif callback_data == "confirm_clear_data":
            await confirm_clear_data(query, context)
        elif callback_data == "clear_data_confirmed":
            await clear_data_confirmed(query, context)
        elif callback_data == "no_data":
            await query.answer("‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–æ–±–∫–∏", show_alert=True)
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è - —É—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        elif callback_data == "back_to_main" or callback_data == "main_menu":
            await back_to_main(query, context)
        elif callback_data == "help":
            await show_help_menu(query, context)
        
        # ==================== –î–û–ü–û–ú–û–ì–ê (HELP) ====================
        
        # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏
        elif callback_data == "help_menu":
            await show_help_menu(query, context)
        
        # FAQ
        elif callback_data == "help_faq":
            await show_faq_menu(query, context)
        elif callback_data == "faq_add_transaction":
            await show_faq_add_transaction(query, context)
        elif callback_data == "faq_upload_statement":
            await show_faq_upload_statement(query, context)
        elif callback_data == "faq_change_category":
            await show_faq_change_category(query, context)
        elif callback_data == "faq_export_data":
            await show_faq_export_data(query, context)
        elif callback_data == "faq_clear_data":
            await show_faq_clear_data(query, context)
        elif callback_data == "faq_file_formats":
            await show_faq_file_formats(query, context)
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        elif callback_data == "help_contacts":
            await show_contacts(query, context)
        elif callback_data == "help_about":
            await show_about_bot(query, context)
        elif callback_data == "about_changelog":
            await show_changelog(query, context)
        elif callback_data == "about_privacy":
            await show_privacy_policy(query, context)
        
        # ==================== –¢–†–ê–ù–ó–ê–ö–¶–Ü–á ====================
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π - –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
        elif callback_data == "add_transaction":
            await show_transaction_menu_enhanced(query, context)
        elif callback_data == "manual_transaction_type":
            await show_manual_type_enhanced(query, context)
        elif callback_data == "upload_statement":
            await show_upload_statement_form(query, context)
        elif callback_data == "receipt_photo_soon":
            await show_receipt_photo_soon(query, context)
        elif callback_data == "notify_receipt_ready":
            await notify_receipt_ready(query, context)
        
        # –†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        elif callback_data == "manual_expense":
            await show_enhanced_expense_form(query, context)
        elif callback_data == "manual_income":
            await show_enhanced_income_form(query, context)
        
        # –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Å—É–º
        elif callback_data.startswith("expense_cat_") or callback_data.startswith("income_cat_"):
            await handle_enhanced_add_transaction(query, context)
        elif callback_data.startswith("quick_amount_"):
            await handle_quick_amount_selection(query, context)
        elif callback_data.startswith("manual_amount_"):
            transaction_type = callback_data.split("_")[2]
            await show_quick_amount_buttons(query, context, transaction_type)
        elif callback_data == "skip_description":
            await handle_enhanced_add_transaction(query, context)
        elif callback_data.startswith("date_"):
            await handle_enhanced_add_transaction(query, context)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        elif callback_data == "upload_pdf_guide":
            await show_upload_pdf_guide(query, context)
        elif callback_data == "upload_excel_guide":
            await show_upload_excel_guide(query, context)
        elif callback_data == "upload_csv_guide":
            await show_upload_csv_guide(query, context)
        
        # –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
        elif callback_data.startswith("add_"):
            if callback_data == "add_expense":
                await show_enhanced_expense_form(query, context)
            elif callback_data == "add_income":
                await show_enhanced_income_form(query, context)
        elif callback_data == "manual_transaction":
            await show_manual_type_enhanced(query, context)
        elif callback_data == "photo_receipt":
            await show_receipt_photo_soon(query, context)
        
        # –ü–µ—Ä–µ–≥–ª—è–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        elif callback_data == "view_all_transactions":
            await show_all_transactions(query, context)
        elif callback_data == "prev_transactions_page":
            await handle_transactions_pagination(query, context, direction="prev")
        elif callback_data == "next_transactions_page":
            await handle_transactions_pagination(query, context, direction="next")
        
        # –û–±—Ä–æ–±–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –≤–∏–ø–∏—Å–æ–∫
        elif callback_data == "confirm_parsed_transactions":
            await handle_import_all_transactions(query, context)
        elif callback_data == "edit_parsed_transactions":
            await handle_edit_transactions(query, context)
        elif callback_data == "cancel_import":
            await handle_cancel_import(query, context)
        elif callback_data == "remove_duplicates":
            await handle_remove_duplicates(query, context)
        elif callback_data == "set_import_period":
            await handle_set_import_period(query, context)
        elif callback_data == "back_to_preview":
            await handle_back_to_preview(query, context)
        elif callback_data.startswith("period_"):
            await handle_period_selection(query, context)
        elif callback_data == "back_to_preview":
            await handle_back_to_preview(query, context)
        elif callback_data.startswith("period_"):
            await handle_period_selection(query, context)
        
        # –ê–Ω–∞–ª—ñ–∑
        elif callback_data.startswith('analyze_'):
            await handle_analysis_callback(query, user)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        elif callback_data == "add_expense_category":
            await show_add_expense_category_form(query, context)
        elif callback_data == "add_income_category":
            await show_add_income_category_form(query, context)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –ø–æ–∫–∏ —â–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ
        elif callback_data in ["stats_daily", "stats_weekly", "stats_monthly", "income_analysis", 
                              "expense_analysis", "chart_expense_pie", "chart_income_expense", 
                              "chart_expense_trend", "chart_heatmap", "chart_patterns",
                              "add_category", "edit_categories", "delete_category",
                              "notification_settings", "currency_settings", "language_settings",
                              "report_format_settings", "sync_settings", "other_settings",
                              "budget_detailed_view", "budget_settings"]:
            await query.edit_message_text(
                f"üöß *–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ*\n\n"
                f"–î–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Ä–æ–∑—Ä–æ–±—Ü—ñ —Ç–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö.\n\n"
                f"–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è! üôè",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
                parse_mode="Markdown"
            )
        
        # –ù–µ—ñ–º–ø–ª–µ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
        else:
            await query.edit_message_text(
                f"üöß *–§—É–Ω–∫—Ü—ñ—è '{callback_data}' –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ*\n\n"
                f"–î–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö –±–æ—Ç–∞.\n\n"
                f"–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]]),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"Error handling callback: {str(e)}")
        if query:
            await query.edit_message_text(
                text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )

async def handle_analysis_callback(query, user):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–ª–±–µ–∫—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ
        end_date = datetime.now()
        start_date = end_date - timedelta(days=90)
        transactions = get_user_transactions(user.id, start_date, end_date)
        
        if query.data == 'analyze_categories':
            # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            report = analytics_service.generate_custom_report(
                transactions,
                'category_analysis'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = report['statistics']
            await query.message.reply_text(
                "üìä –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç\n\n" +
                "\n".join(
                    f"‚Ä¢ {category}: {data['sum']:.2f} (—Å–µ—Ä–µ–¥–Ω—î: {data['mean']:.2f}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {data['count']})"
                    for category, data in stats.items()
                )
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            if report['visualization']:
                await query.message.reply_photo(
                    photo=report['visualization'],
                    caption="–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"
                )
        
        elif query.data == 'analyze_trends':
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤
            report = analytics_service.generate_custom_report(
                transactions,
                'trend_analysis',
                'monthly'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = report['statistics']
            await query.message.reply_text(
                "üìà –¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç\n\n" +
                "\n".join(
                    f"‚Ä¢ –ú—ñ—Å—è—Ü—å {month}: {data['sum']:.2f} (—Å–µ—Ä–µ–¥–Ω—î: {data['mean']:.2f}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {data['count']})"
                    for month, data in stats.items()
                )
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            if report['visualization']:
                await query.message.reply_photo(
                    photo=report['visualization'],
                    caption="–¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è—Ö"
                )
        
        elif query.data == 'analyze_budget':
            # –ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É
            report = analytics_service.generate_custom_report(
                transactions,
                'budget_analysis'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = report['statistics']
            await query.message.reply_text(
                "üí∞ –ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É\n\n" +
                "\n".join(
                    f"‚Ä¢ {category}:\n"
                    f"  - –§–∞–∫—Ç–∏—á–Ω–æ: {data['amount']:.2f}\n"
                    f"  - –ë—é–¥–∂–µ—Ç: {data['budget']:.2f}\n"
                    f"  - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {data['utilization']:.1f}%"
                    for category, data in stats.items()
                )
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            if report['visualization']:
                await query.message.reply_photo(
                    photo=report['visualization'],
                    caption="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç –∑ –±—é–¥–∂–µ—Ç–æ–º"
                )
        
        elif query.data == 'analyze_full':
            # –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –∑–≤—ñ—Ç—ñ–≤
            category_report = analytics_service.generate_custom_report(
                transactions,
                'category_analysis'
            )
            trend_report = analytics_service.generate_custom_report(
                transactions,
                'trend_analysis',
                'monthly'
            )
            budget_report = analytics_service.generate_custom_report(
                transactions,
                'budget_analysis'
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
            await query.message.reply_text(
                "üìä –ü–æ–≤–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑\n\n"
                "–ê–Ω–∞–ª—ñ–∑ –≤–∫–ª—é—á–∞—î:\n"
                "‚Ä¢ –†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏\n"
                "‚Ä¢ –¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è—Ö\n"
                "‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –±—é–¥–∂–µ—Ç–æ–º\n\n"
                "–î–µ—Ç–∞–ª—å–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏."
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏
            for report, title in [
                (category_report, "–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"),
                (trend_report, "–¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è—Ö"),
                (budget_report, "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –±—é–¥–∂–µ—Ç–æ–º")
            ]:
                if report['visualization']:
                    await query.message.reply_photo(
                        photo=report['visualization'],
                        caption=title
                    )
    except Exception as e:
        logger.error(f"Error handling analysis callback: {str(e)}")
        await query.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑—É.")

async def show_stats(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from datetime import datetime
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        telegram_id = query.from_user.id
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        from database.db_operations import get_or_create_user, get_monthly_stats
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        user = get_or_create_user(
            telegram_id=telegram_id, 
            username=query.from_user.username,
            first_name=query.from_user.first_name,
            last_name=query.from_user.last_name
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_monthly_stats(user.id)
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        expenses = stats['expenses']
        income = stats['income']
        balance = stats['balance']
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        current_month = datetime.now().strftime("%B")
        months_uk = {
            "January": "—Å—ñ—á–µ–Ω—å", "February": "–ª—é—Ç–∏–π", "March": "–±–µ—Ä–µ–∑–µ–Ω—å",
            "April": "–∫–≤—ñ—Ç–µ–Ω—å", "May": "—Ç—Ä–∞–≤–µ–Ω—å", "June": "—á–µ—Ä–≤–µ–Ω—å",
            "July": "–ª–∏–ø–µ–Ω—å", "August": "—Å–µ—Ä–ø–µ–Ω—å", "September": "–≤–µ—Ä–µ—Å–µ–Ω—å",
            "October": "–∂–æ–≤—Ç–µ–Ω—å", "November": "–ª–∏—Å—Ç–æ–ø–∞–¥", "December": "–≥—Ä—É–¥–µ–Ω—å"
        }
        month_uk = months_uk.get(current_month, current_month)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (–≥—Ä–∞—Ñ—ñ—á–Ω–∞ —à–∫–∞–ª–∞)
        if income > 0:
            expense_percent = min(expenses / income * 100, 100)
            balance_scale = ""
            filled_blocks = int(expense_percent / 10)
            empty_blocks = 10 - filled_blocks
            
            if expense_percent < 70:
                balance_scale = "üü¢" * filled_blocks + "‚ö™" * empty_blocks
            elif 70 <= expense_percent < 90:
                balance_scale = "üü†" * filled_blocks + "‚ö™" * empty_blocks
            else:
                balance_scale = "üî¥" * filled_blocks + "‚ö™" * empty_blocks
            
            efficiency = f"–í–∏—Ç—Ä–∞—á–µ–Ω–æ {expense_percent:.1f}% –≤—ñ–¥ –¥–æ—Ö–æ–¥—É"
        else:
            balance_scale = "‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™"
            efficiency = "–î–æ–¥–∞–π—Ç–µ –¥–æ—Ö—ñ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = (
            f"üìä *–§–Ü–ù–ê–ù–°–û–í–ò–ô –û–ì–õ–Ø–î: {month_uk.upper()}*\n\n"
            f"üí∞ *–î–æ—Ö–æ–¥–∏:* `{income:.2f} –≥—Ä–Ω`\n"
            f"üí∏ *–í–∏—Ç—Ä–∞—Ç–∏:* `{expenses:.2f} –≥—Ä–Ω`\n"
            f"üíº *–ë–∞–ª–∞–Ω—Å:* `{balance:.2f} –≥—Ä–Ω`\n\n"
            f"{balance_scale}\n"
            f"_{efficiency}_\n\n"
        )
        
        # –î–æ–¥–∞—î–º–æ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é
        if stats['top_categories']:
            stats_text += "*–¢–û–ü –ö–ê–¢–ï–ì–û–†–Ü–ô –í–ò–¢–†–ê–¢:*\n"
            for i, category in enumerate(stats['top_categories'], 1):
                name, icon, amount = category
                percentage = (amount / expenses) * 100 if expenses > 0 else 0
                
                # –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω—É —à–∫–∞–ª—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                category_bar = ""
                bar_length = int(percentage / 10) if percentage > 0 else 0
                if bar_length > 0:
                    category_bar = "‚ñì" * min(bar_length, 10)
                
                stats_text += f"`{i}` {icon} *{name}*\n"
                stats_text += f"   `{amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)` {category_bar}\n"
        else:
            stats_text += "*–¢–û–ü –ö–ê–¢–ï–ì–û–†–Ü–ô –í–ò–¢–†–ê–¢:*\n"
            stats_text += "_–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ - –¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é!_\n\n"
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±—é–¥–∂–µ—Ç
        # –¶–µ –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
        budget_spent_percent = min((expenses / 10000) * 100, 100)  # –£–º–æ–≤–Ω–∏–π –±—é–¥–∂–µ—Ç 10000 –≥—Ä–Ω
        stats_text += f"\n*–ë–Æ–î–ñ–ï–¢ –ú–Ü–°–Ø–¶–Ø:*\n"
        stats_text += f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: `{budget_spent_percent:.1f}%` –≤—ñ–¥ –ø–ª–∞–Ω—É\n"
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data="stats_daily"),
                InlineKeyboardButton("üìÜ –¢–∏–∂–¥–µ–Ω—å", callback_data="stats_weekly"),
                InlineKeyboardButton("üìÜ –ú—ñ—Å—è—Ü—å", callback_data="stats_monthly")
            ],
            [
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏", callback_data="stats_charts")
            ],
            [
                InlineKeyboardButton("üíπ –î–∏–Ω–∞–º—ñ–∫–∞ –¥–æ—Ö–æ–¥—ñ–≤", callback_data="income_analysis"),
                InlineKeyboardButton("üí∏ –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç", callback_data="expense_analysis")
            ],
            [
                InlineKeyboardButton("üì• –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="export_transactions"),
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=stats_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        await query.edit_message_text(
            text=error_message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=error_message,
            reply_markup=reply_markup
        )

# ==================== TRANSACTION PROCESSING FUNCTIONS ====================

async def handle_expense_category_selection(query, context, category_id):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Å—É–º—É"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        from database.session import Session
        from database.models import Category
        
        with Session() as session:
            category = session.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            context.user_data['transaction_data'] = {
                'type': 'expense',
                'category_id': category_id,
                'category_name': category.name,
                'category_icon': category.icon,
                'step': 'amount'
            }
            
            text = (
                f"üí∏ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏*\n\n"
                f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category.icon} {category.name}\n\n"
                f"üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:**\n"
                f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `250` –∞–±–æ `250.50`\n\n"
                f"üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ (–≤–∞–ª—é—Ç–∞ –¥–æ–¥–∞—Å—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_expense")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error in handle_expense_category_selection: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_income_category_selection(query, context, category_id):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –¥–æ—Ö–æ–¥—É —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Å—É–º—É"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        from database.session import Session
        from database.models import Category
        
        with Session() as session:
            category = session.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            context.user_data['transaction_data'] = {
                'type': 'income',
                'category_id': category_id,
                'category_name': category.name,
                'category_icon': category.icon,
                'step': 'amount'
            }
            
            text = (
                f"üí∞ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É*\n\n"
                f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category.icon} {category.name}\n\n"
                f"üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–æ—Ö–æ–¥—É:**\n"
                f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `15000` –∞–±–æ `15000.50`\n\n"
                f"üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ (–≤–∞–ª—é—Ç–∞ –¥–æ–¥–∞—Å—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_income")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error in handle_income_category_selection: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def save_transaction_to_db(query, context):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    try:
        if 'transaction_data' not in context.user_data:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.")
            return
        
        transaction_data = context.user_data['transaction_data']
        user = get_user(query.from_user.id)
        
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥–µ–ª—ñ
        from database.db_operations import add_transaction
        from database.models import TransactionType
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transaction_type = TransactionType.EXPENSE if transaction_data['type'] == 'expense' else TransactionType.INCOME
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        new_transaction = add_transaction(
            user_id=user.id,
            amount=transaction_data['amount'],
            description=transaction_data.get('description', ''),
            category_id=transaction_data['category_id'],
            transaction_type=transaction_type,
            source='manual'
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        currency_symbol = user.currency or "‚Ç¥"
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        type_emoji = "üí∏" if transaction_data['type'] == 'expense' else "üí∞"
        type_text = "–≤–∏—Ç—Ä–∞—Ç—É" if transaction_data['type'] == 'expense' else "–¥–æ—Ö—ñ–¥"
        sign = "-" if transaction_data['type'] == 'expense' else "+"
        
        success_text = (
            f"‚úÖ *{type_text.capitalize()} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!*\n\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {transaction_data['category_icon']} {transaction_data['category_name']}\n"
            f"üí∞ **–°—É–º–∞:** {sign}{transaction_data['amount']:,.2f} {currency_symbol}\n"
        )
        
        if transaction_data.get('description'):
            success_text += f"üìù **–û–ø–∏—Å:** {transaction_data['description']}\n"
        
        success_text += f"üìÖ **–î–∞—Ç–∞:** {new_transaction.transaction_date.strftime('%d.%m.%Y %H:%M')}"
        
        keyboard = [
            [
                InlineKeyboardButton(f"‚ûï –î–æ–¥–∞—Ç–∏ —â–µ {type_text}", 
                                   callback_data=f"manual_{'expense' if transaction_data['type'] == 'expense' else 'income'}"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            success_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        if 'transaction_data' in context.user_data:
            del context.user_data['transaction_data']
            
    except Exception as e:
        logger.error(f"Error saving transaction: {str(e)}")
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {str(e)}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def show_add_expense_category_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç"""
    text = (
        "‚ûï *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç*\n\n"
        "üìù **–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `–°–ø–æ—Ä—Ç–∑–∞–ª`, `–ü—ñ–¥–ø–∏—Å–∫–∏`, `–î–æ–º–∞—à–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏`\n\n"
        "üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –ù–∞–∑–≤–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ—é"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_expense")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    context.user_data['category_creation'] = {
        'type': 'expense',
        'step': 'name'
    }
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_add_income_category_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤"""
    text = (
        "‚ûï *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤*\n\n"
        "üìù **–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `–ü—ñ–¥—Ä–æ–±—ñ—Ç–æ–∫`, `Cashback`, `–î–∏–≤—ñ–¥–µ–Ω–¥–∏`\n\n"
        "üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –ù–∞–∑–≤–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ—é"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_income")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    context.user_data['category_creation'] = {
        'type': 'income',
        'step': 'name'
    }
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== TRANSACTION INPUT HANDLERS ====================

async def handle_transaction_amount_input(update, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        if 'transaction_data' not in context.user_data:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.")
            return
        
        transaction_data = context.user_data['transaction_data']
        amount_text = update.message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º–æ —Å—É–º—É
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä, –∫—Ä–∞–ø–æ–∫ —ñ –∫–æ–º
            amount_text = re.sub(r'[^\d.,]', '', amount_text)
            # –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É
            amount_text = amount_text.replace(',', '.')
            
            amount = float(amount_text)
            if amount <= 0:
                await update.message.reply_text(
                    "‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
                )
                return
            
            if amount > 1000000:
                await update.message.reply_text(
                    "‚ùå –°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: 1,000,000. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
                )
                return
        
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 250 –∞–±–æ 250.50):"
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—É–º—É
        transaction_data['amount'] = amount
        transaction_data['step'] = 'description'
        
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏
        type_text = "–≤–∏—Ç—Ä–∞—Ç–∏" if transaction_data['type'] == 'expense' else "–¥–æ—Ö–æ–¥—É"
        text = (
            f"üí∞ **–°—É–º–∞ {type_text}:** {amount:,.2f} ‚Ç¥\n\n"
            f"üìù **–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó** (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É –ê–¢–ë`\n\n"
            f"–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å", callback_data="skip_description")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error handling transaction amount input: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_transaction_description_input(update, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        if 'transaction_data' not in context.user_data:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.")
            return
        
        transaction_data = context.user_data['transaction_data']
        description = update.message.text.strip()
        
        if len(description) > 255:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å
        transaction_data['description'] = description
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await save_transaction_from_message(update, context)
        
    except Exception as e:
        logger.error(f"Error handling transaction description input: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def save_transaction_from_message(update, context):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        if 'transaction_data' not in context.user_data:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.")
            return
        
        transaction_data = context.user_data['transaction_data']
        user = get_user(update.effective_user.id)
        
        if not user:
            await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥–µ–ª—ñ
        from database.db_operations import add_transaction
        from database.models import TransactionType
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transaction_type = TransactionType.EXPENSE if transaction_data['type'] == 'expense' else TransactionType.INCOME
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        new_transaction = add_transaction(
            user_id=user.id,
            amount=transaction_data['amount'],
            description=transaction_data.get('description', ''),
            category_id=transaction_data['category_id'],
            transaction_type=transaction_type,
            source='manual'
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        currency_symbol = user.currency or "‚Ç¥"
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        type_emoji = "üí∏" if transaction_data['type'] == 'expense' else "üí∞"
        type_text = "–≤–∏—Ç—Ä–∞—Ç—É" if transaction_data['type'] == 'expense' else "–¥–æ—Ö—ñ–¥"
        sign = "-" if transaction_data['type'] == 'expense' else "+"
        
        success_text = (
            f"‚úÖ *{type_text.capitalize()} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!*\n\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {transaction_data['category_icon']} {transaction_data['category_name']}\n"
            f"üí∞ **–°—É–º–∞:** {sign}{transaction_data['amount']:,.2f} {currency_symbol}\n"
        )
        
        if transaction_data.get('description'):
            success_text += f"üìù **–û–ø–∏—Å:** {transaction_data['description']}\n"
        
        success_text += f"üìÖ **–î–∞—Ç–∞:** {new_transaction.transaction_date.strftime('%d.%m.%Y %H:%M')}"
        
        keyboard = [
            [
                InlineKeyboardButton(f"‚ûï –î–æ–¥–∞—Ç–∏ —â–µ {type_text}", 
                                   callback_data=f"manual_{'expense' if transaction_data['type'] == 'expense' else 'income'}"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            success_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        if 'transaction_data' in context.user_data:
            del context.user_data['transaction_data']
            
    except Exception as e:
        logger.error(f"Error saving transaction from message: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {str(e)}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
        )

async def back_to_main(query, context):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    from handlers.main_menu import show_main_menu
    await show_main_menu(query, context, is_query=True)

# ==================== CATEGORY SELECTION HANDLERS ====================

async def handle_expense_category_selection(query, context, category_id):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        from database.db_operations import get_category_by_id
        category = get_category_by_id(category_id)
        
        if not category:
            await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data['transaction_data'] = {
            'type': 'expense',
            'category_id': category.id,
            'category_name': category.name,
            'category_icon': category.icon or 'üí∏',
            'step': 'amount'
        }
        
        # –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É
        user = get_user(query.from_user.id)
        currency_symbol = user.currency or "‚Ç¥"
        
        text = (
            f"üí∏ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏**\n\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category.icon or 'üí∏'} {category.name}\n\n"
            f"üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏** (–≤ {currency_symbol}):\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `250` –∞–±–æ `250.50`\n\n"
            f"üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ, —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –¥–æ–¥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_expense")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_expense_category_selection: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_income_category_selection(query, context, category_id):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –¥–æ—Ö–æ–¥—É"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        from database.db_operations import get_category_by_id
        category = get_category_by_id(category_id)
        
        if not category:
            await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data['transaction_data'] = {
            'type': 'income',
            'category_id': category.id,
            'category_name': category.name,
            'category_icon': category.icon or 'üí∞',
            'step': 'amount'
        }
        
        # –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É
        user = get_user(query.from_user.id)
        currency_symbol = user.currency or "‚Ç¥"
        
        text = (
            f"üí∞ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É**\n\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category.icon or 'üí∞'} {category.name}\n\n"
            f"üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–æ—Ö–æ–¥—É** (–≤ {currency_symbol}):\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `5000` –∞–±–æ `5000.50`\n\n"
            f"üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ, —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –¥–æ–¥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_income")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_income_category_selection: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_skip_description(query, context):
    """–û–±—Ä–æ–±–ª—è—î –ø—Ä–æ–ø—É—Å–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É"""
    try:
        if 'transaction_data' not in context.user_data:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.")
            return
        
        transaction_data = context.user_data['transaction_data']
        transaction_data['description'] = ''  # –ü–æ—Ä–æ–∂–Ω—ñ–π –æ–ø–∏—Å
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await save_transaction_to_db(query, context)
        
    except Exception as e:
        logger.error(f"Error in handle_skip_description: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_date_selection(query, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–∞—Ç–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        date_option = query.data.split("_")[-1]
        
        if 'transaction_data' not in context.user_data:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.")
            return
        
        transaction_data = context.user_data['transaction_data']
        
        from datetime import datetime, timedelta
        
        if date_option == "today":
            selected_date = datetime.now()
        elif date_option == "yesterday":
            selected_date = datetime.now() - timedelta(days=1)
        elif date_option == "custom":
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó –¥–∞—Ç–∏
            selected_date = datetime.now()
        else:
            selected_date = datetime.now()
        
        transaction_data['transaction_date'] = selected_date
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        await save_transaction_to_db(query, context)
        
    except Exception as e:
        logger.error(f"Error in handle_date_selection: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# ==================== ENHANCED CALLBACK HANDLERS ====================

async def handle_enhanced_add_transaction(query, context):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º UX"""
    callback_data = query.data
    
    try:
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç
        if callback_data.startswith("expense_cat_"):
            category_id = int(callback_data.split("_")[-1])
            await handle_expense_category_selection(query, context, category_id)
        
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ—Ö–æ–¥—ñ–≤
        elif callback_data.startswith("income_cat_"):
            category_id = int(callback_data.split("_")[-1])
            await handle_income_category_selection(query, context, category_id)
        
        # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É –æ–ø–∏—Å—É
        elif callback_data == "skip_description":
            await handle_skip_description(query, context)
        
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
        elif callback_data.startswith("date_"):
            await handle_date_selection(query, context)
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–æ–≥–æ –∂ —Ç–∏–ø—É
        elif callback_data.startswith("manual_"):
            transaction_type = callback_data.split("_")[1]
            if transaction_type == "expense":
                await show_enhanced_expense_form(query, context)
            elif transaction_type == "income":
                await show_enhanced_income_form(query, context)
            else:
                await show_manual_transaction_type(query, context)
        
        else:
            logger.warning(f"Unhandled callback_data: {callback_data}")
    
    except Exception as e:
        logger.error(f"Error in handle_enhanced_add_transaction: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# ==================== VALIDATION AND UTILITY FUNCTIONS ====================

def validate_amount(amount_text):
    """–í–∞–ª—ñ–¥—É—î –≤–≤–µ–¥–µ–Ω—É —Å—É–º—É"""
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä, –∫—Ä–∞–ø–æ–∫ —ñ –∫–æ–º
        amount_text = re.sub(r'[^\d.,]', '', amount_text)
        # –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É
        amount_text = amount_text.replace(',', '.')
        
        amount = float(amount_text)
        
        if amount <= 0:
            return None, "‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è"
        
        if amount > 1000000:
            return None, "‚ùå –°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞ (–º–∞–∫—Å–∏–º—É–º: 1,000,000)"
        
        return amount, None
    
    except ValueError:
        return None, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 250 –∞–±–æ 250.50)"

async def show_quick_amount_buttons(query, context, transaction_type):
    """–ü–æ–∫–∞–∑—É—î —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å—É–º–∏"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            return
        
        currency_symbol = user.currency or "‚Ç¥"
        
        # –†—ñ–∑–Ω—ñ —Å—É–º–∏ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç —Ç–∞ –¥–æ—Ö–æ–¥—ñ–≤
        if transaction_type == 'expense':
            amounts = [50, 100, 250, 500, 1000, 2000]
            type_name = "–≤–∏—Ç—Ä–∞—Ç–∏"
            emoji = "üí∏"
        else:
            amounts = [1000, 2500, 5000, 10000, 15000, 20000]
            type_name = "–¥–æ—Ö–æ–¥—É"
            emoji = "üí∞"
        
        keyboard = []
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–±–æ—Ä—É —Å—É–º–∏
        for i in range(0, len(amounts), 3):
            row = []
            for j in range(i, min(i + 3, len(amounts))):
                amount = amounts[j]
                row.append(InlineKeyboardButton(
                    f"{amount} {currency_symbol}", 
                    callback_data=f"quick_amount_{transaction_type}_{amount}"
                ))
            keyboard.append(row)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard.append([
            InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data=f"manual_amount_{transaction_type}"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"manual_{transaction_type}")
        ])
        
        text = (
            f"{emoji} **–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä —Å—É–º–∏ {type_name}**\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Å—É–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω—É:\n\n"
            f"üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Å—É–º—É –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É'"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_quick_amount_buttons: {str(e)}")

async def handle_quick_amount_selection(query, context):
    """–û–±—Ä–æ–±–ª—è—î —à–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä —Å—É–º–∏"""
    try:
        # –†–æ–∑–±–∏—Ä–∞—î–º–æ callback_data: quick_amount_expense_250
        parts = query.data.split("_")
        transaction_type = parts[2]
        amount = float(parts[3])
        
        if 'transaction_data' not in context.user_data:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.")
            return
        
        transaction_data = context.user_data['transaction_data']
        transaction_data['amount'] = amount
        transaction_data['step'] = 'description'
        
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏
        user = get_user(query.from_user.id)
        currency_symbol = user.currency or "‚Ç¥"
        type_text = "–≤–∏—Ç—Ä–∞—Ç–∏" if transaction_type == 'expense' else "–¥–æ—Ö–æ–¥—É"
        
        text = (
            f"üí∞ **–°—É–º–∞ {type_text}:** {amount:,.2f} {currency_symbol}\n\n"
            f"üìù **–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó** (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É –ê–¢–ë`\n\n"
            f"–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å", callback_data="skip_description")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"manual_{transaction_type}")]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_quick_amount_selection: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# ==================== IMPORT FROM TRANSACTION_HANDLER ====================

from handlers.transaction_handler import (
    show_add_transaction_menu as show_transaction_menu_enhanced,
    show_manual_transaction_type as show_manual_type_enhanced,
    show_enhanced_expense_form, show_enhanced_income_form,
    show_upload_statement_form, show_upload_pdf_guide,
    show_upload_excel_guide, show_upload_csv_guide,
    show_receipt_photo_soon, notify_receipt_ready
)
