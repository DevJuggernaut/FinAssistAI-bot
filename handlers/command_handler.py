from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from database.models import User, Transaction, Category, TransactionType
from database.session import Session
from datetime import datetime
from .setup_handler import (
    start_setup, setup_balance, setup_budget, setup_notifications,
    cancel_setup, SETUP_START, SETUP_BALANCE, SETUP_BUDGET, SETUP_NOTIFICATIONS
)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
INITIAL_BALANCE, MONTHLY_BUDGET, CURRENCY, NOTIFICATIONS = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    return await start_setup(update, context)

async def setup_initial_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É"""
    try:
        balance = float(update.message.text)
        session = Session()
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        
        user.initial_balance = balance
        session.commit()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = Transaction(
            user_id=user.id,
            amount=balance,
            type=TransactionType.INCOME,
            description="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å",
            transaction_date=datetime.utcnow()
        )
        session.add(transaction)
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {balance} –≥—Ä–Ω\n\n"
            "–¢–µ–ø–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞—à –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç (–≤ –≥—Ä–∏–≤–Ω—è—Ö):"
        )
        return MONTHLY_BUDGET
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1000)"
        )
        return INITIAL_BALANCE

async def setup_monthly_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É"""
    try:
        budget = float(update.message.text)
        session = Session()
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        
        user.monthly_budget = budget
        session.commit()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–ª–∞–Ω
        from database.models import BudgetPlan
        budget_plan = BudgetPlan(
            user_id=user.id,
            name="–ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç",
            start_date=datetime.utcnow(),
            end_date=datetime.utcnow().replace(day=28) + datetime.timedelta(days=4),
            total_budget=budget
        )
        session.add(budget_plan)
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {budget} –≥—Ä–Ω\n\n"
            "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏? (—Ç–∞–∫/–Ω—ñ)"
        )
        return NOTIFICATIONS
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5000)"
        )
        return MONTHLY_BUDGET

async def setup_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    notifications_enabled = query.data == "notifications_on"
    
    with Session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        user.notification_enabled = notifications_enabled
        user.setup_step = 'completed'
        user.is_setup_completed = True
        initial_balance = user.initial_balance
        currency = user.currency
        monthly_budget = user.monthly_budget
        session.commit()
    
    await query.edit_message_text(
        f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ\n\n"
        f"–í–∞—à –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {initial_balance} {currency}\n"
        f"–ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: {monthly_budget} {currency}\n"
        f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if notifications_enabled else '–≤–∏–º–∫–Ω–µ–Ω–æ'}\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/settings - –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
        "/balance - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/add - –¥–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é"
    )
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help –∑—ñ —Å—Ç–∏—Å–ª–∏–º –æ–ø–∏—Å–æ–º —Ñ—É–Ω–∫—Ü—ñ–π"""
    user_id = update.effective_user.id
    
    with Session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            user = User(
                telegram_id=user_id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name,
                is_setup_completed=True
            )
            session.add(user)
            session.commit()
    
    help_text = (
        "*FinAssist - –ö–æ–º–∞–Ω–¥–∏*\n\n"
        "üí∞ *–§—ñ–Ω–∞–Ω—Å–∏*\n"
        "/add - –¥–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é\n"
        "/balance - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç\n\n"
        
        "üìä *–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞*\n"
        "/report - —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç\n"
        "/budget - –∫–µ—Ä—É–≤–∞—Ç–∏ –±—é–¥–∂–µ—Ç–æ–º\n"
        "/advice - –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏\n\n"
        
        "‚öôÔ∏è /settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
        
        "*–®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç:* –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å—É–º—É —Ç–∞ –æ–ø–∏—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 120 –æ–±—ñ–¥)"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /settings"""
    user_id = update.effective_user.id
    
    with Session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.is_setup_completed:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start"
            )
            return
    
    settings_text = (
        f"‚öôÔ∏è –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"
        f"üí∞ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {user.initial_balance} {user.currency}\n"
        f"üìä –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: {user.monthly_budget} {user.currency}\n"
        f"üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if user.notification_enabled else '–≤–∏–º–∫–Ω–µ–Ω–æ'}\n\n"
        "–î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/balance - –∑–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/budget - –∑–º—ñ–Ω–∏—Ç–∏ –±—é–¥–∂–µ—Ç\n"
        "/notifications - –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
    )
    await update.message.reply_text(settings_text)

async def notifications_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /notifications"""
    user_id = update.effective_user.id
    
    with Session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.is_setup_completed:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start"
            )
            return
        
        # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π
        user.notification_enabled = not user.notification_enabled
        session.commit()
        
        status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if user.notification_enabled else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        await update.message.reply_text(f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è {status}")

async def add_transaction_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /add"""
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add <—Å—É–º–∞> <–æ–ø–∏—Å>"
        )
        return
    
    try:
        amount = float(context.args[0])
        description = " ".join(context.args[1:])
        
        with Session() as session:
            user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                return
            
            transaction = Transaction(
                user_id=user.id,
                amount=amount,
                type=TransactionType.EXPENSE,
                description=description
            )
            
            session.add(transaction)
            session.commit()
            
            await update.message.reply_text(
                f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!\n"
                f"–°—É–º–∞: {amount} –≥—Ä–Ω\n"
                f"–û–ø–∏—Å: {description}"
            )
            
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stats"""
    with Session() as session:
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        month_ago = datetime.utcnow().replace(day=1)
        transactions = session.query(Transaction).filter(
            Transaction.user_id == user.id,
            Transaction.transaction_date >= month_ago
        ).all()
        
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:\n\n"
            f"üí∞ –î–æ—Ö–æ–¥–∏: {total_income:.2f} –≥—Ä–Ω\n"
            f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏: {total_expenses:.2f} –≥—Ä–Ω\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {total_income - total_expenses:.2f} –≥—Ä–Ω\n\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(transactions)}"
        )
        
        await update.message.reply_text(stats_message)

async def budget_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /budget"""
    # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –±—é–¥–∂–µ—Ç—É
    from handlers.callback_handler import show_budget_menu
    
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ú—ñ–π –±—é–¥–∂–µ—Ç", callback_data="my_budget"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –±—é–¥–∂–µ—Ç:",
        reply_markup=reply_markup
    )
    
    return
    
    if context.args[0] == "–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏" and len(context.args) > 1:
        try:
            amount = float(context.args[1])
            with Session() as session:
                user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user:
                    user.monthly_budget = amount
                    session.commit()
                    await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {amount} –≥—Ä–Ω")
                else:
                    await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞")
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /budget –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ <—Å—É–º–∞>"
        )

def get_setup_handler():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å)"""
    return ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, 
            # –∞–ª–µ –≤–æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
            SETUP_BALANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_balance)],
            SETUP_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_budget)],
            SETUP_NOTIFICATIONS: [CallbackQueryHandler(setup_notifications)]
        },
        fallbacks=[CommandHandler('cancel', cancel_setup)]
    )

async def show_main_menu(message, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
    from handlers.main_menu import show_main_menu as unified_main_menu
    await unified_main_menu(message, context, is_query=False)