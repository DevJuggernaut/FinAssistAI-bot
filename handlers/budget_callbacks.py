from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import calendar

from database.db_operations import get_or_create_user

async def create_budget_from_recommendations(query, context):
    """–°—Ç–≤–æ—Ä—é—î –±—é–¥–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
    from services.budget_manager import BudgetManager
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if 'budget_recommendations' not in context.user_data:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n"
            "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É", callback_data="budget_recommendations")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    recommendations = context.user_data['budget_recommendations']
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ—Å—è—Ü—å –¥–ª—è –±—é–¥–∂–µ—Ç—É (–ø–æ—Ç–æ—á–Ω–∏–π)
    today = datetime.now()
    month = today.month
    year = today.year
    month_name = calendar.month_name[month]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±—é–¥–∂–µ—Ç
    await query.edit_message_text(
        f"üíæ *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –Ω–∞ {month_name} {year}*\n\n"
        "–°—Ç–≤–æ—Ä—é—é –±—é–¥–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...",
        parse_mode="Markdown"
    )
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±—é–¥–∂–µ—Ç—É
        budget_manager = BudgetManager(user.id)
        
        # –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        category_allocations = {}
        for cat in recommendations['category_recommendations']:
            category_allocations[cat['category_id']] = cat['recommended_budget']
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—é–¥–∂–µ—Ç
        budget = budget_manager.create_monthly_budget(
            name=f"–ë—é–¥–∂–µ—Ç –Ω–∞ {month_name} {year}",
            total_budget=recommendations['total_recommended_budget'],
            year=year,
            month=month,
            category_allocations=category_allocations
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—Ö
        await query.edit_message_text(
            f"‚úÖ *–ë—é–¥–∂–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!*\n\n"
            f"üìÖ –ü–µ—Ä—ñ–æ–¥: {budget.start_date.strftime('%d.%m.%Y')} - {budget.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {budget.total_budget:.2f} –≥—Ä–Ω\n\n"
            f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ –±—é–¥–∂–µ—Ç—É —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–¥ –±—é–¥–∂–µ—Ç—É", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç*\n\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budget")]
            ]),
            parse_mode="Markdown"
        )

async def show_budget_total_input(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –±—é–¥–∂–µ—Ç—É"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    budget_data = context.user_data.get('budget_creation', {})
    month = budget_data.get('month', datetime.now().month)
    year = budget_data.get('year', datetime.now().year)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è
    month_name = calendar.month_name[month]
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ
    await query.edit_message_text(
        f"üí∞ *–í–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –±—é–¥–∂–µ—Ç—É –Ω–∞ {month_name} {year}*\n\n"
        "–ù–∞ –¥–∞–Ω–æ–º—É –µ—Ç–∞–ø—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n\n"
        "–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –∑ –ø–æ–≤–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é –º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "
        "–æ–ø—Ü—ñ—é '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É', —è–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ "
        "–∑–∞–ø—Ä–æ–ø–æ–Ω—É—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É", callback_data="budget_recommendations")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –±—é–¥–∂–µ—Ç—ñ–≤", callback_data="budget")]
        ]),
        parse_mode="Markdown"
    )

async def show_my_budget_overview(query, context):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ–¥–Ω–æ–º—É –µ–∫—Ä–∞–Ω—ñ"""
    from services.budget_manager import BudgetManager
    from database.db_operations import get_transactions
    
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    
    # –Ø–∫—â–æ –±—é–¥–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π
    if user.monthly_budget is None or user.monthly_budget <= 0:
        user.monthly_budget = 10000
        from database.session import Session
        session = Session()
        try:
            session.merge(user)
            session.commit()
        finally:
            session.close()
    
    budget_manager = BudgetManager(user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    financial_status = budget_manager.get_user_financial_status()
    comprehensive_status = budget_manager.get_comprehensive_budget_status()
    
    if not financial_status:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n"
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
        return
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞–ª—é—Ç—É
    currency = user.currency or "UAH"
    currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
    
    # =============== –í–ï–†–•–ù–Ø –ß–ê–°–¢–ò–ù–ê: –ó–ê–ì–ê–õ–¨–ù–ò–ô –ë–ê–õ–ê–ù–° ===============
    balance = financial_status['current_balance']
    balance_emoji = "üí∞" if balance >= 0 else "üìâ"
    
    message = f"üíº *–ú—ñ–π –±—é–¥–∂–µ—Ç - –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å*\n\n"
    message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message += f"{balance_emoji} *–ó–ê–ì–ê–õ–¨–ù–ò–ô –ë–ê–õ–ê–ù–°*\n"
    message += f"üî¢ `{balance:,.2f} {currency_symbol}`\n"
    message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # =============== –û–ì–õ–Ø–î –ó–ê –ü–û–¢–û–ß–ù–ò–ô –ú–Ü–°–Ø–¶–¨ ===============
    if comprehensive_status:
        monthly_income = comprehensive_status['current_status']['monthly_income']
        monthly_expenses = comprehensive_status['current_status']['monthly_expenses']
        difference = monthly_income - monthly_expenses
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä—ñ–∑–Ω–∏—Ü—ñ
        if difference > 0:
            diff_emoji = "üíö"
            diff_text = f"–ï–∫–æ–Ω–æ–º—ñ—è: +{difference:.2f} {currency_symbol}"
        elif difference < 0:
            diff_emoji = "üî¥"
            diff_text = f"–ü–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∞: {difference:.2f} {currency_symbol}"
        else:
            diff_emoji = "‚ö™"
            diff_text = f"–†—ñ–≤–Ω–æ–≤–∞–≥–∞: {difference:.2f} {currency_symbol}"
    else:
        monthly_income = 0
        monthly_expenses = 0
        difference = 0
        diff_emoji = "‚ö™"
        diff_text = "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
    
    message += "üìä *–û–ì–õ–Ø–î –ó–ê –ü–û–¢–û–ß–ù–ò–ô –ú–Ü–°–Ø–¶–¨:*\n"
    message += f"üìà –ó–∞–≥–∞–ª—å–Ω—ñ –¥–æ—Ö–æ–¥–∏: `{monthly_income:,.2f} {currency_symbol}`\n"
    message += f"üìâ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: `{monthly_expenses:,.2f} {currency_symbol}`\n"
    message += f"{diff_emoji} {diff_text}\n\n"
    
    # =============== –¶–ï–ù–¢–†–ê–õ–¨–ù–ê –ß–ê–°–¢–ò–ù–ê: –û–°–¢–ê–ù–ù–Ü –¢–†–ê–ù–ó–ê–ö–¶–Ü–á ===============
    message += "üìã *–û–°–¢–ê–ù–ù–Ü –¢–†–ê–ù–ó–ê–ö–¶–Ü–á:*\n"
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 7 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    recent_transactions = get_transactions(user.id, limit=7)
    
    if recent_transactions:
        for i, transaction in enumerate(recent_transactions):
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            date_str = transaction.transaction_date.strftime("%d.%m")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ —ó—ó —ñ–∫–æ–Ω–∫—É
            category_name = "–Ü–Ω—à–µ"
            category_icon = "üìã"
            if transaction.category:
                category_name = transaction.category.name
                category_icon = transaction.category.icon or "üìã"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä —Ç–∞ –∑–Ω–∞–∫ —Å—É–º–∏
            if transaction.type.value == 'income':
                amount_str = f"+{transaction.amount:,.0f} {currency_symbol}"
                amount_emoji = "üü¢"
            else:
                amount_str = f"-{transaction.amount:,.0f} {currency_symbol}"
                amount_emoji = "üî¥"
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            description = transaction.description or "–ë–µ–∑ –æ–ø–∏—Å—É"
            if len(description) > 18:
                description = description[:15] + "..."
            
            message += f"‚Ä¢ `{date_str}` {category_icon} *{description}*\n"
            message += f"  {amount_emoji} `{amount_str}` ‚Ä¢ _{category_name}_\n"
        
        message += "\n"
    else:
        message += "_–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —â–µ –Ω–µ–º–∞—î_\n"
        message += "_–ü–æ—á–Ω—ñ—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏_\n\n"
    
    # =============== –ù–ò–ñ–ù–Ø –ß–ê–°–¢–ò–ù–ê: –®–í–ò–î–ö–Ü –î–Ü–á ===============
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ —à–≤–∏–¥–∫–∏–º–∏ –¥—ñ—è–º–∏
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥", callback_data="add_income"),
            InlineKeyboardButton("‚ûñ –ó–∞–ø–∏—Å–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", callback_data="add_expense")
        ],
        [
            InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó", callback_data="view_all_transactions")
        ],
        [
            InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="budget_detailed_view"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="budget_settings")
        ],
        [
            InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_budget_detailed_view(query, context):
    """–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –±—é–¥–∂–µ—Ç—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"""
    from services.budget_manager import BudgetManager
    
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    budget_manager = BudgetManager(user.id)
    
    comprehensive_status = budget_manager.get_comprehensive_budget_status()
    alerts = budget_manager.get_category_spending_alerts()
    
    if not comprehensive_status:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö", 
                                    parse_mode="Markdown")
        return
    
    currency = comprehensive_status['user_info']['currency']
    active_budget = comprehensive_status['active_budget']
    
    message = "üìä *–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –±—é–¥–∂–µ—Ç—É*\n\n"
    
    # –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if alerts:
        message += "‚ö†Ô∏è *–£–≤–∞–≥–∞:*\n"
        for alert in alerts[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-3
            if alert['type'] == 'exceeded':
                message += f"üî¥ {alert['icon']} {alert['category']}: –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–∞ {alert['overspend']:.2f} {currency}\n"
            else:
                message += f"üü° {alert['icon']} {alert['category']}: –∑–∞–ª–∏—à–∏–ª–æ—Å—å {alert['remaining']:.2f} {currency}\n"
        message += "\n"
    
    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –±—é–¥–∂–µ—Ç—É
    if active_budget and active_budget['category_budgets']:
        message += "üíº *–ë—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:*\n"
        
        for cat in active_budget['category_budgets']:
            progress_bar = create_progress_bar(cat['usage_percent'], width=8)
            message += f"{cat['category_icon']} *{cat['category_name']}*\n"
            message += f"   {progress_bar} `{cat['usage_percent']:.1f}%`\n"
            message += f"   `{cat['actual_spending']:.2f}/{cat['allocated_amount']:.2f} {currency}`\n\n"
    else:
        message += "üìù *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –±—é–¥–∂–µ—Ç—É –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ*\n"
        message += "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ä–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é.\n\n"
    
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="budget_edit_categories")],
        [InlineKeyboardButton("üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="budget_export"),
         InlineKeyboardButton("üìà –ú–µ—Ç—Ä–∏–∫–∏", callback_data="budget_metrics")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_budget_overview")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_budget_settings(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    from services.budget_manager import BudgetManager
    
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    budget_manager = BudgetManager(user.id)
    
    comprehensive_status = budget_manager.get_comprehensive_budget_status()
    currency = comprehensive_status['user_info']['currency'] if comprehensive_status else 'UAH'
    
    current_budget = comprehensive_status['budget_limits']['total_monthly_budget'] if comprehensive_status else 0
    
    message = "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É*\n\n"
    message += f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: `{current_budget:.2f} {currency}`\n\n"
    message += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="budget_change_total")],
        [InlineKeyboardButton("üè∑Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="budget_setup_categories")],
        [InlineKeyboardButton("üìÖ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç", callback_data="budget_set_daily_limit")],
        [InlineKeyboardButton("üéØ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—É–º–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="budget_create_smart")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_budget_overview")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_budget_statistics(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—é–¥–∂–µ—Ç—É"""
    from services.budget_manager import BudgetManager
    
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    budget_manager = BudgetManager(user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    month_comparison = budget_manager.get_month_comparison(3)
    daily_stats = budget_manager.get_daily_spending_stats(7)
    performance_metrics = budget_manager.get_budget_performance_metrics()
    
    currency = 'UAH'  # –ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ comprehensive_status
    
    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—é–¥–∂–µ—Ç—É*\n\n"
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if performance_metrics:
        message += "üéØ *–û—Ü—ñ–Ω–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:*\n"
        message += f"üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: `{performance_metrics['overall_score']:.1f}/100`\n"
        message += f"üíØ –î–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: `{performance_metrics['budget_adherence_score']:.1f}/100`\n"
        message += f"üìä –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç: `{performance_metrics['spending_consistency']:.1f}/100`\n\n"
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞ –º—ñ—Å—è—Ü—è–º–∏
    if month_comparison:
        message += "üìÖ *–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—è–º–∏:*\n"
        for i, month_data in enumerate(month_comparison[:3]):
            emoji = "üìç" if i == 0 else "üìä"
            status = "(–ø–æ—Ç–æ—á–Ω–∏–π)" if i == 0 else ""
            message += f"{emoji} {month_data['period']} {status}: `{month_data['total_expenses']:.2f} {currency}`\n"
        message += "\n"
    
    # –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
    if daily_stats:
        week_total = sum(day['amount'] for day in daily_stats)
        avg_daily = week_total / len(daily_stats) if daily_stats else 0
        message += f"üìà *–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:*\n"
        message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: `{week_total:.2f} {currency}`\n"
        message += f"üìä –°–µ—Ä–µ–¥–Ω—å–æ –∑–∞ –¥–µ–Ω—å: `{avg_daily:.2f} {currency}`\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="budget_detailed_analytics")],
        [InlineKeyboardButton("üìä –ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É", callback_data="budget_export_report")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_budget_overview")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def confirm_budget_reset(query, context):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    message = "‚ö†Ô∏è *–°–∫–∏–¥–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É*\n\n"
    message += "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç?\n\n"
    message += "–¶–µ –¥—ñ—è:\n"
    message += "‚Ä¢ –í–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ª—ñ–º—ñ—Ç–∏\n"
    message += "‚Ä¢ –î–µ–∞–∫—Ç–∏–≤—É—î –ø–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–ª–∞–Ω\n"
    message += "‚Ä¢ –ó–±–µ—Ä–µ–∂–µ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n\n"
    message += "‚ùóÔ∏è –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏!"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, —Å–∫–∏–Ω—É—Ç–∏", callback_data="budget_reset_confirmed"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="my_budget_overview")
        ]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def execute_budget_reset(query, context):
    """–í–∏–∫–æ–Ω—É—î —Å–∫–∏–¥–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    from services.budget_manager import BudgetManager
    
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)
    budget_manager = BudgetManager(user.id)
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∫–∏–¥–∞–Ω–Ω—è
    result = budget_manager.reset_monthly_budget(confirm=True)
    
    if result['status'] == 'success':
        message = "‚úÖ *–ë—é–¥–∂–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ*\n\n"
        message += "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        message += "‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç\n"
        message += "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö\n"
        message += "‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—É–º–Ω–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó\n\n"
        message += "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?"
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç", callback_data="budget_change_total")],
            [InlineKeyboardButton("üéØ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—É–º–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="budget_create_smart")],
            [InlineKeyboardButton("üîô –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        message = "‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n"
        message += "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ –±—é–¥–∂–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="budget_reset_confirm")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_budget_overview")]
        ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def create_progress_bar(percentage, width=10):
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä"""
    filled = int(percentage / 100 * width)
    empty = width - filled
    
    if percentage > 100:
        # –ß–µ—Ä–≤–æ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è
        bar = "üî¥" * min(filled, width) + "‚ö™" * max(0, empty)
    elif percentage > 80:
        # –ñ–æ–≤—Ç–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        bar = "üü°" * filled + "‚ö™" * empty
    else:
        # –ó–µ–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        bar = "üü¢" * filled + "‚ö™" * empty
    
    return bar
