from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database.db_operations import get_user, get_or_create_user, get_user_categories
from database.session import Session
from database.models import User, Category, TransactionType, Transaction
from datetime import datetime
        ("–û–¥—è–≥", "üëö"),
        ("–ó–¥–æ—Ä–æ–≤'—è", "üè•"),
        ("–û—Å–≤—ñ—Ç–∞", "üìö"),
        ("–¢–µ—Ö–Ω—ñ–∫–∞", "üì±"),
        ("–ö–∞—Ñ–µ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", "‚òï"),
        ("–°–ø–æ—Ä—Ç", "üèÉ"),
        ("–ü–æ–¥–∞—Ä—É–Ω–∫–∏", "üéÅ"),
        ("–ö—Ä–∞—Å–∞", "üíÑ"),
        ("–•–æ–±—ñ", "üé®"),
        ("–Ü–Ω—à–µ", "üì¶")
    ]
    
    standard_income_categories = [
        ("–ó–∞—Ä–ø–ª–∞—Ç–∞", "üí∞"),
        ("–§—Ä—ñ–ª–∞–Ω—Å", "üíª"),
        ("–ü–æ–¥–∞—Ä—É–Ω–∫–∏", "üéÅ"),
        ("–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìà"),
        ("–ü—Ä–æ–¥–∞–∂", "üè∑Ô∏è"),
        ("–ë–æ–Ω—É—Å–∏", "üíé"),
        ("–°—Ç–∏–ø–µ–Ω–¥—ñ—è", "üéì"),
        ("–Ü–Ω—à–µ", "üí∏")
    ]egory, TransactionType, Transaction
from datetime import datetime

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
WAITING_CURRENCY_SELECTION = 1
WAITING_BALANCE_INPUT = 2
SETUP_COMPLETE = 3

async def show_currency_selection(update_or_query, context):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ - –∫—Ä–æ–∫ 1: –≤–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏"""
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    context.user_data['setup_step'] = 'currency'
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏
    keyboard = [
        [
            InlineKeyboardButton("üá∫üá¶ UAH (‚Ç¥)", callback_data="currency_UAH"),
            InlineKeyboardButton("üá∫üá∏ USD ($)", callback_data="currency_USD")
        ],
        [
            InlineKeyboardButton("üá™üá∫ EUR (‚Ç¨)", callback_data="currency_EUR"),
            InlineKeyboardButton("üá¨üáß GBP (¬£)", callback_data="currency_GBP")
        ],
        [
            InlineKeyboardButton("¬´ –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "üöÄ *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ - –ö—Ä–æ–∫ 1 –∑ 2*\n\n"
        "üí± *–û–±–µ—Ä—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—É –≤–∞–ª—é—Ç—É*\n\n"
        "–¶—è –≤–∞–ª—é—Ç–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π.\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, –≤ —è–∫—ñ–π –≤–∏ –∑–∞–∑–≤–∏—á–∞–π –≤–µ–¥–µ—Ç–µ –æ–±–ª—ñ–∫ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤:"
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫–∏–π —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏
    if hasattr(update_or_query, 'callback_query'):  # –Ø–∫—â–æ —Ü–µ Update –∑ CallbackQuery
        query = update_or_query.callback_query
        message = await query.edit_message_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        context.user_data['message_id'] = message.message_id
    elif hasattr(update_or_query, 'edit_message_text'):  # –Ø–∫—â–æ —Ü–µ CallbackQuery
        message = await update_or_query.edit_message_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        context.user_data['message_id'] = message.message_id
    else:  # –Ø–∫—â–æ —Ü–µ Update –±–µ–∑ CallbackQuery (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ –∫–æ–º–∞–Ω–¥–∏)
        message = await update_or_query.message.reply_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        context.user_data['message_id'] = message.message_id
    
    return WAITING_CURRENCY_SELECTION

async def process_currency_selection(update_or_query, context):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫–∏–π —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏
    if hasattr(update_or_query, 'callback_query'):
        query = update_or_query.callback_query
    else:
        query = update_or_query
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –≤–∞–ª—é—Ç—É
    currency_code = query.data.split("_")[1]
    user_id = query.from_user.id
    
    with Session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        user.currency = currency_code
        session.commit()
    
    # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_currency")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    currency_symbols = {
        "UAH": "‚Ç¥",
        "USD": "$",
        "EUR": "‚Ç¨",
        "GBP": "¬£"
    }
    currency_symbol = currency_symbols.get(currency_code, currency_code)
    
    message_text = (
        "üöÄ *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ - –ö—Ä–æ–∫ 2 –∑ 2*\n\n"
        f"‚úÖ –í–∞–ª—é—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {currency_code} ({currency_symbol})\n\n"
        "üí∞ *–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å*\n\n"
        f"–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –∫–æ—à—Ç—ñ–≤, —è–∫—É –≤–∏ –º–∞—î—Ç–µ –∑–∞—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5000).\n"
        "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–∏.\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:"
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫–∏–π —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏
    if hasattr(query, 'edit_message_text'):
        await query.edit_message_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    context.user_data['setup_step'] = 'balance'
    
    return WAITING_BALANCE_INPUT

async def back_to_currency(update_or_query, context):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏"""
    return await show_currency_selection(update_or_query, context)

async def process_initial_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É —ñ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        balance = float(update.message.text.replace(',', '.'))
        user_id = update.effective_user.id
        
        with Session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º —Å–µ—Å—ñ—ó
            currency_code = user.currency
            user_db_id = user.id
            
            user.initial_balance = balance
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            user.setup_step = 'completed'
            user.is_setup_completed = True
            
            session.commit()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            transaction = Transaction(
                user_id=user_db_id,
                amount=balance,
                type=TransactionType.INCOME,
                description="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å",
                transaction_date=datetime.utcnow()
            )
            session.add(transaction)
            session.commit()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await setup_default_categories(user_id)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π currency_code –ø–æ–∑–∞ —Å–µ—Å—ñ—î—é
        currency_symbols = {
            "UAH": "‚Ç¥",
            "USD": "$",
            "EUR": "‚Ç¨",
            "GBP": "¬£"
        }
        currency_symbol = currency_symbols.get(currency_code, currency_code)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –ú—ñ–π –±—é–¥–∂–µ—Ç", callback_data="my_budget")
            ],
            [
                InlineKeyboardButton("üí≥ –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction")
            ],
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
            ],
            [
                InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —î–¥–∏–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é
        completion_message = (
            "üéâ *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n"
            f"‚úÖ –í–∞–ª—é—Ç–∞: {currency_code} ({currency_symbol})\n"
            f"‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balance} {currency_symbol}\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞ FinAssist.\n\n"
            "*–©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:*\n"
            "‚Ä¢ –î–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –¥–æ—Ö–æ–¥–∏ —ñ –≤–∏—Ç—Ä–∞—Ç–∏\n"
            "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ú—ñ–π –±—é–¥–∂–µ—Ç'\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'\n\n"
            "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏! üíº"
        )
        
        await update.message.reply_text(
            completion_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5000)."
        )
    
    return WAITING_BALANCE_INPUT

async def complete_setup(query, context):
    """–ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    user_id = query.from_user.id
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    with Session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        user.is_setup_completed = True
        user.setup_step = 'completed'
        session.commit()
    
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ú—ñ–π –±—é–¥–∂–µ—Ç", callback_data="my_budget"),
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é", callback_data="add_transaction")
        ],
        [
            InlineKeyboardButton("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
        ],
        [
            InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéâ *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞ FinAssist.\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ—á–∞—Ç–∏ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞—à–∏—Ö –ø–µ—Ä—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, "
        "—â–æ–± –º–∏ –º–æ–≥–ª–∏ –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –∫–æ—Ä–∏—Å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É —Ç–∞ –ø–æ—Ä–∞–¥–∏.\n\n"
        "*–©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:*\n"
        "‚Ä¢ –î–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –¥–æ—Ö–æ–¥–∏ —ñ –≤–∏—Ç—Ä–∞—Ç–∏\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ú—ñ–π –±—é–¥–∂–µ—Ç'\n"
        "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏! üíº",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def setup_default_categories(user_id):
    """–°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç —Ç–∞ –¥–æ—Ö–æ–¥—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = get_or_create_user(user_id)
    
    categories = get_user_categories(user.id)
    expense_categories = [c for c in categories if c.type == TransactionType.EXPENSE]
    income_categories = [c for c in categories if c.type == TransactionType.INCOME]
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    standard_expense_categories = [
        ("–ü—Ä–æ–¥—É–∫—Ç–∏", "ü•ó"),
        ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üöå"),
        ("–ñ–∏—Ç–ª–æ", "üè†"),
        ("–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "ÔøΩÔøΩ"),
        ("–†–æ–∑–≤–∞–≥–∏", "üé≠"),
        ("–û–¥—è–≥", "üëö"),
        ("–ó–¥–æ—Ä–æ–≤'—è", "üè•"),
        ("–û—Å–≤—ñ—Ç–∞", "üìö"),
        ("–¢–µ—Ö–Ω—ñ–∫–∞", "üì±")
    ]
    
    standard_income_categories = [
        ("–ó–∞—Ä–ø–ª–∞—Ç–∞", "üí∞"),
        ("–§—Ä—ñ–ª–∞–Ω—Å", "üíª"),
        ("–ü–æ–¥–∞—Ä—É–Ω–∫–∏", "üéÅ"),
        ("–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìà"),
        ("–ü—Ä–æ–¥–∞–∂", "üè∑Ô∏è")
    ]
    
    # –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    with Session() as session:
        if not expense_categories:
            for name, emoji in standard_expense_categories:
                category = Category(
                    user_id=user.id,
                    name=name,
                    type=TransactionType.EXPENSE,
                    icon=emoji
                )
                session.add(category)
            
        if not income_categories:
            for name, emoji in standard_income_categories:
                category = Category(
                    user_id=user.id,
                    name=name,
                    type=TransactionType.INCOME,
                    icon=emoji
                )
                session.add(category)
        
        session.commit()
