"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞.
–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É—î –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ.
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging

logger = logging.getLogger(__name__)

def create_main_menu_keyboard():
    """–°—Ç–≤–æ—Ä—é—î —î–¥–∏–Ω—É –≤–µ—Ä—Å—ñ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –û–≥–ª—è–¥ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤", callback_data="my_budget"),
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction")
        ],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics"),
            InlineKeyboardButton("ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")
        ],
        [
            InlineKeyboardButton("üí≥ –†–∞—Ö—É–Ω–∫–∏", callback_data="accounts_menu"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def show_main_menu(message_or_query, context, is_query=None):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    Args:
        message_or_query: –ú–æ–∂–µ –±—É—Ç–∏ –∞–±–æ Message, –∞–±–æ CallbackQuery
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        is_query: –†—É—á–Ω–µ –≤–∫–∞–∑—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É (—è–∫—â–æ –∞–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î)
    """
    try:
        keyboard = create_main_menu_keyboard()
        text = "‚óÄÔ∏è **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é FinAssist**\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–±'—î–∫—Ç–∞
        if is_query is None:
            is_query = hasattr(message_or_query, 'edit_message_text')
        
        if is_query:
            # –¶–µ CallbackQuery
            await message_or_query.edit_message_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –¶–µ Message
            await message_or_query.reply_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error in show_main_menu: {str(e)}")
        # Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        fallback_text = "‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏: /add, /budget, /analytics, /settings"
        
        if is_query or hasattr(message_or_query, 'edit_message_text'):
            try:
                await message_or_query.edit_message_text(fallback_text)
            except:
                await message_or_query.message.reply_text(fallback_text)
        else:
            await message_or_query.reply_text(fallback_text)

async def back_to_main_menu(query, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    await show_main_menu(query, context, is_query=True)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –Ω–∞–∑–≤–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
show_main_menu_callback = back_to_main_menu
back_to_main = back_to_main_menu
main_menu = back_to_main_menu
