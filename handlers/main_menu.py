"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞.
–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É—î –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ.
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging

logger = logging.getLogger(__name__)

def create_main_menu_keyboard():
    """–°—Ç–≤–æ—Ä—é—î —î–¥–∏–Ω—É –≤–µ—Ä—Å—ñ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –û–≥–ª—è–¥ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤", callback_data="my_budget"),
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction")
        ],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics"),
            InlineKeyboardButton("ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")
        ],
        [
            InlineKeyboardButton("üí≥ –†–∞—Ö—É–Ω–∫–∏", callback_data="accounts_menu"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def show_main_menu(message_or_query, context, is_query=None):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    Args:
        message_or_query: –ú–æ–∂–µ –±—É—Ç–∏ –∞–±–æ Message, –∞–±–æ CallbackQuery, –∞–±–æ Update
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        is_query: –†—É—á–Ω–µ –≤–∫–∞–∑—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É (—è–∫—â–æ –∞–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î)
    """
    try:
        logger.info(f"show_main_menu called with: {type(message_or_query)}, is_query={is_query}")
        
        keyboard = create_main_menu_keyboard()
        text = "‚óÄÔ∏è **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é FinAssist**\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ Update –æ–±'—î–∫—Ç
        if hasattr(message_or_query, 'callback_query') and message_or_query.callback_query:
            # –¶–µ Update –∑ CallbackQuery
            query = message_or_query.callback_query
            logger.info(f"Extracted CallbackQuery from Update: {type(query)}")
            await query.edit_message_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        elif hasattr(message_or_query, 'message') and message_or_query.message and not hasattr(message_or_query, 'edit_message_text'):
            # –¶–µ Update –∑ Message (–∞–ª–µ –ù–ï CallbackQuery)
            message = message_or_query.message
            logger.info(f"Extracted Message from Update: {type(message)}")
            await message.reply_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        # –¢–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä—è–º—ñ CallbackQuery —Ç–∞ Message –æ–±'—î–∫—Ç–∏
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –¥–ª—è CallbackQuery —Ç–∞ Message
        if is_query is None:
            is_query = hasattr(message_or_query, 'edit_message_text')
        
        logger.info(f"Determined is_query={is_query} for type {type(message_or_query)}")
        
        if is_query or hasattr(message_or_query, 'edit_message_text'):
            # –¶–µ CallbackQuery
            logger.info("Using edit_message_text for CallbackQuery")
            await message_or_query.edit_message_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –¶–µ Message
            logger.info("Using reply_text for Message")
            await message_or_query.reply_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error in show_main_menu: {str(e)}")
        # Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        fallback_text = "‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏: /add, /budget, /analytics, /settings"
        
        try:
            # –û–±—Ä–æ–±–ª—è—î–º–æ Update –æ–±'—î–∫—Ç
            if hasattr(message_or_query, 'callback_query') and message_or_query.callback_query:
                await message_or_query.callback_query.edit_message_text(fallback_text)
            elif hasattr(message_or_query, 'message') and message_or_query.message:
                await message_or_query.message.reply_text(fallback_text)
            elif hasattr(message_or_query, 'effective_message') and message_or_query.effective_message:
                await message_or_query.effective_message.reply_text(fallback_text)
            elif hasattr(message_or_query, 'edit_message_text'):
                # –¶–µ CallbackQuery
                await message_or_query.edit_message_text(fallback_text)
            elif hasattr(message_or_query, 'reply_text'):
                # –¶–µ Message
                await message_or_query.reply_text(fallback_text)
            else:
                logger.error(f"Cannot send fallback message, unknown object type: {type(message_or_query)}")
        except Exception as fallback_error:
            logger.error(f"Even fallback failed: {fallback_error}")

async def back_to_main_menu(update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    logger.info(f"back_to_main_menu called with: {type(update)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ Update –æ–±'—î–∫—Ç –∑ callback_query
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        await show_main_menu(query, context, is_query=True)
    elif hasattr(update, 'edit_message_text'):
        # –¶–µ CallbackQuery
        await show_main_menu(update, context, is_query=True)
    else:
        # Fallback - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ message
        if hasattr(update, 'message') and update.message:
            await show_main_menu(update.message, context, is_query=False)
        else:
            logger.error(f"Cannot handle update type in back_to_main_menu: {type(update)}")
            # –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ effective_message
            if hasattr(update, 'effective_message') and update.effective_message:
                await show_main_menu(update.effective_message, context, is_query=False)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –Ω–∞–∑–≤–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
show_main_menu_callback = back_to_main_menu
back_to_main = back_to_main_menu
main_menu = back_to_main_menu
