"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import os
from datetime import datetime
from database.db_operations import get_user, get_user_categories
from services.statement_parser import StatementParser
from services.vision_parser import VisionReceiptParser

logger = logging.getLogger(__name__)

# ==================== –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –î–û–î–ê–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ====================

async def show_add_transaction_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ç—Ä—å–æ–º–∞ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è", callback_data="manual_transaction_type")
        ],
        [
            InlineKeyboardButton("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É", callback_data="upload_statement")
        ],
        [
            InlineKeyboardButton("üì∏ –§–æ—Ç–æ —á–µ–∫—É (—Å–∫–æ—Ä–æ)", callback_data="receipt_photo_soon")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üí≥ *–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:\n\n"
        "‚ûï *–†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è* - —à–≤–∏–¥–∫–µ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        "üì§ *–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É* - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –≤–∏–ø–∏—Å–∫–∏\n"
        "üì∏ *–§–æ—Ç–æ —á–µ–∫—É* - —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ–∫—É (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)\n\n"
        "üéØ *–ú–µ—Ç–∞:* –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑—Ä—É—á–Ω—ñ —Ç–∞ —à–≤–∏–¥–∫—ñ —Å–ø–æ—Å–æ–±–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö."
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –†–£–ß–ù–ï –î–û–î–ê–í–ê–ù–ù–Ø ====================

async def show_manual_transaction_type(query, context):
    """–ü–æ–∫–∞–∑—É—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"""
    keyboard = [
        [
            InlineKeyboardButton("üí∏ –í–∏—Ç—Ä–∞—Ç–∞", callback_data="manual_expense"),
            InlineKeyboardButton("üí∞ –î–æ—Ö—ñ–¥", callback_data="manual_income")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_transaction")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚ûï *–†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó*\n\n"
        "üéØ **–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è:**\n"
        "‚Ä¢ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó: –î–æ—Ö—ñ–¥/–í–∏—Ç—Ä–∞—Ç–∞\n"
        "‚Ä¢ –°—É–º–∞: —á–∏—Å–ª–æ–≤–µ –ø–æ–ª–µ –∑ –≤–∞–ª—é—Ç–æ—é\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ –∑ —ñ–∫–æ–Ω–∫–∞–º–∏\n"
        "‚Ä¢ –ö–æ–º–µ–Ω—Ç–∞—Ä/–û–ø–∏—Å: —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)\n"
        "‚Ä¢ –î–∞—Ç–∞: –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Å—å–æ–≥–æ–¥–Ω—ñ\n\n"
        "‚ú® **–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:**\n"
        "‚Ä¢ –ê–≤—Ç–æ–ø—ñ–¥–∫–∞–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n"
        "‚Ä¢ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n"
        "‚Ä¢ –ú–∏—Ç—Ç—î–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_enhanced_expense_form(query, context):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ç–∞ —ñ–∫–æ–Ω–∫–∞–º–∏"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        expense_categories = get_user_categories(user.id, category_type='expense')
        
        text = (
            "üí∏ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏*\n\n"
            "üìÇ **–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏:**\n"
            "_–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è_\n\n"
        )
        
        keyboard = []
        
        if expense_categories:
            # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–µ—Ä—Ö—É
            popular_categories = [cat for cat in expense_categories if cat.name.lower() in 
                                ['—ó–∂–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ø–æ–∫—É–ø–∫–∏', '—Ä–æ–∑–≤–∞–≥–∏']]
            other_categories = [cat for cat in expense_categories if cat not in popular_categories]
            
            # –î–æ–¥–∞—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            if popular_categories:
                text += "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
                for i in range(0, len(popular_categories), 2):
                    row = []
                    for j in range(i, min(i + 2, len(popular_categories))):
                        category = popular_categories[j]
                        button_text = f"{category.icon or 'üì¶'} {category.name}"
                        callback_data = f"expense_cat_{category.id}"
                        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                    keyboard.append(row)
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            if other_categories:
                if popular_categories:
                    text += "\nüìã **–Ü–Ω—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
                for i in range(0, len(other_categories), 2):
                    row = []
                    for j in range(i, min(i + 2, len(other_categories))):
                        category = other_categories[j]
                        button_text = f"{category.icon or 'üì¶'} {category.name}"
                        callback_data = f"expense_cat_{category.id}"
                        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                    keyboard.append(row)
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            keyboard.append([InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="add_expense_category")])
        else:
            text += "‚ùó *–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç*\n"
            text += "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:\n\n"
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:** –á–∂–∞, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ü–æ–∫—É–ø–∫–∏, –†–æ–∑–≤–∞–≥–∏, –Ü–Ω—à–µ"
            keyboard.append([InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç", callback_data="add_expense_category")])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard.append([
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="manual_expense"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_transaction_type")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_enhanced_expense_form: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def show_enhanced_income_form(query, context):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ç–∞ —ñ–∫–æ–Ω–∫–∞–º–∏"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        income_categories = get_user_categories(user.id, category_type='income')
        
        text = (
            "üí∞ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É*\n\n"
            "üìÇ **–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ—Ö–æ–¥—É:**\n"
            "_–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è_\n\n"
        )
        
        keyboard = []
        
        if income_categories:
            # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–µ—Ä—Ö—É
            popular_categories = [cat for cat in income_categories if cat.name.lower() in 
                                ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ñ—Ä–∏–ª–∞–Ω—Å', '–±–æ–Ω—É—Å', '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó']]
            other_categories = [cat for cat in income_categories if cat not in popular_categories]
            
            # –î–æ–¥–∞—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            if popular_categories:
                text += "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
                for i in range(0, len(popular_categories), 2):
                    row = []
                    for j in range(i, min(i + 2, len(popular_categories))):
                        category = popular_categories[j]
                        button_text = f"{category.icon or 'üí∞'} {category.name}"
                        callback_data = f"income_cat_{category.id}"
                        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                    keyboard.append(row)
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            if other_categories:
                if popular_categories:
                    text += "\nüìã **–Ü–Ω—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
                for i in range(0, len(other_categories), 2):
                    row = []
                    for j in range(i, min(i + 2, len(other_categories))):
                        category = other_categories[j]
                        button_text = f"{category.icon or 'üí∞'} {category.name}"
                        callback_data = f"income_cat_{category.id}"
                        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                    keyboard.append(row)
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            keyboard.append([InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="add_income_category")])
        else:
            text += "‚ùó *–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ—Ö–æ–¥—ñ–≤*\n"
            text += "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:\n\n"
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:** –ó–∞—Ä–ø–ª–∞—Ç–∞, –§—Ä–∏–ª–∞–Ω—Å, –ë–æ–Ω—É—Å, –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó, –Ü–Ω—à–µ"
            keyboard.append([InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ—Ö–æ–¥—ñ–≤", callback_data="add_income_category")])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard.append([
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="manual_income"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_transaction_type")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_enhanced_income_form: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# ==================== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –í–ò–ü–ò–°–ö–ò ====================

async def show_upload_statement_form(query, context):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìÑ PDF –≤–∏–ø–∏—Å–∫–∞", callback_data="upload_pdf_guide"),
            InlineKeyboardButton("üìä Excel —Ñ–∞–π–ª", callback_data="upload_excel_guide")
        ],
        [
            InlineKeyboardButton("üìã CSV —Ñ–∞–π–ª", callback_data="upload_csv_guide")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="upload_settings"),
            InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="upload_help")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_transaction")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üì§ *–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É*\n\n"
        "üìÑ **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:** PDF, Excel (.xlsx, .xls), CSV\n\n"
        "üìã **–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:**\n"
        "1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–∞–π–ª—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó\n"
        "2Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –≤–∏–ø–∏—Å–∫–∏\n"
        "3Ô∏è‚É£ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π\n"
        "4Ô∏è‚É£ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—É–º, –¥–∞—Ç, –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n"
        "5Ô∏è‚É£ –í–∏–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π\n"
        "6Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\n"
        "üí° **–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**\n"
        "‚Ä¢ –í–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É\n"
        "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç\n"
        "‚Ä¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π:"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_upload_pdf_guide(query, context):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF –≤–∏–ø–∏—Å–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ PDF —Ñ–∞–π–ª", callback_data="start_pdf_upload")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="upload_statement")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìÑ *PDF –≤–∏–ø–∏—Å–∫–∞*\n\n"
        "‚úÖ **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –±–∞–Ω–∫–∏:**\n"
        "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫\n"
        "‚Ä¢ –ú–æ–Ω–æ–±–∞–Ω–∫\n"
        "‚Ä¢ –ü–£–ú–ë\n"
        "‚Ä¢ –û—â–∞–¥–±–∞–Ω–∫\n"
        "‚Ä¢ –Ü–Ω—à—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –±–∞–Ω–∫–∏\n\n"
        "üìã **–©–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î—Ç—å—Å—è:**\n"
        "‚Ä¢ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó\n"
        "‚Ä¢ –°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        "‚Ä¢ –û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó\n"
        "‚Ä¢ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó (–¥–æ—Ö—ñ–¥/–≤–∏—Ç—Ä–∞—Ç–∞)\n\n"
        "‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:**\n"
        "‚Ä¢ –§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–º PDF (–Ω–µ —Å–∫–∞–Ω)\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–æ 10 –ú–ë\n"
        "‚Ä¢ –í–∏–ø–∏—Å–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å PDF —Ñ–∞–π–ª:"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    context.user_data['awaiting_file'] = 'pdf'
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_upload_excel_guide(query, context):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É"""
    keyboard = [
        [
            InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ Excel —Ñ–∞–π–ª", callback_data="start_excel_upload")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="upload_statement")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìä *Excel —Ñ–∞–π–ª*\n\n"
        "‚úÖ **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:** .xlsx, .xls\n\n"
        "üìã **–û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–î–∞—Ç–∞' –∞–±–æ 'Date'\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–°—É–º–∞' –∞–±–æ 'Amount'\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–û–ø–∏—Å' –∞–±–æ 'Description'\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–¢–∏–ø' (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "üí° **–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:**\n"
        "```\n"
        "–î–∞—Ç–∞       | –°—É–º–∞    | –û–ø–∏—Å\n"
        "01.01.2024 | -150.00 | –ü—Ä–æ–¥—É–∫—Ç–∏\n"
        "02.01.2024 | +5000   | –ó–∞—Ä–ø–ª–∞—Ç–∞\n"
        "```\n\n"
        "‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:**\n"
        "‚Ä¢ –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - –∑–∞–≥–æ–ª–æ–≤–∫–∏\n"
        "‚Ä¢ –î–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†\n"
        "‚Ä¢ –í—ñ–¥'—î–º–Ω—ñ —Å—É–º–∏ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–æ 5 –ú–ë\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å Excel —Ñ–∞–π–ª:"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    context.user_data['awaiting_file'] = 'excel'
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_upload_csv_guide(query, context):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É"""
    keyboard = [
        [
            InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ CSV —Ñ–∞–π–ª", callback_data="start_csv_upload")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="upload_statement")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìã *CSV —Ñ–∞–π–ª*\n\n"
        "‚úÖ **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏:** –∫–æ–º–∞, –∫—Ä–∞–ø–∫–∞ –∑ –∫–æ–º–æ—é\n\n"
        "üìã **–û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–î–∞—Ç–∞'\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–°—É–º–∞'\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–û–ø–∏—Å'\n"
        "‚Ä¢ –°—Ç–æ–≤–ø–µ—Ü—å '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è' (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "üí° **–ü—Ä–∏–∫–ª–∞–¥ –≤–º—ñ—Å—Ç—É:**\n"
        "```\n"
        "–î–∞—Ç–∞,–°—É–º–∞,–û–ø–∏—Å,–ö–∞—Ç–µ–≥–æ—Ä—ñ—è\n"
        "01.01.2024,-150.00,–ü—Ä–æ–¥—É–∫—Ç–∏,–á–∂–∞\n"
        "02.01.2024,5000,–ó–∞—Ä–ø–ª–∞—Ç–∞,–î–æ—Ö—ñ–¥\n"
        "```\n\n"
        "‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:**\n"
        "‚Ä¢ –ö–æ–¥—É–≤–∞–Ω–Ω—è UTF-8\n"
        "‚Ä¢ –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - –∑–∞–≥–æ–ª–æ–≤–∫–∏\n"
        "‚Ä¢ –î–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†\n"
        "‚Ä¢ –í—ñ–¥'—î–º–Ω—ñ —Å—É–º–∏ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–æ 2 –ú–ë\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å CSV —Ñ–∞–π–ª:"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    context.user_data['awaiting_file'] = 'csv'
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –§–û–¢–û –ß–ï–ö–£ (–ú–ê–ô–ë–£–¢–ù–Ø –§–£–ù–ö–¶–Ü–Ø) ====================

async def show_receipt_photo_soon(query, context):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ç–æ —á–µ–∫—ñ–≤"""
    keyboard = [
        [
            InlineKeyboardButton("üìß –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å", callback_data="notify_receipt_ready")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_transaction")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üì∏ *–§–æ—Ç–æ —á–µ–∫—É* (–º–∞–π–±—É—Ç–Ω—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è)\n\n"
        "üöß **–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Ä–æ–∑—Ä–æ–±—Ü—ñ**\n\n"
        "üì± **–ü–ª–∞–Ω–æ–≤–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:**\n"
        "‚Ä¢ –ö–∞–º–µ—Ä–∞ –∞–±–æ –≤–∏–±—ñ—Ä —Ñ–æ—Ç–æ –∑ –≥–∞–ª–µ—Ä–µ—ó\n"
        "‚Ä¢ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É (OCR) –∑ –≤–∏—Å–æ–∫–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è:\n"
        "  - –°—É–º–∏ –ø–æ–∫—É–ø–∫–∏\n"
        "  - –î–∞—Ç–∏ —Ç–∞ —á–∞—Å—É\n"
        "  - –ù–∞–∑–≤–∏ –º–∞–≥–∞–∑–∏–Ω—É\n"
        "  - –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤\n"
        "‚Ä¢ –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —á–µ–∫—É —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
        "üéØ **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —á–µ–∫–∏:**\n"
        "‚Ä¢ –ö–∞—Å–æ–≤—ñ —á–µ–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤\n"
        "‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–∏ —Ç–∞ –∫–∞—Ñ–µ\n"
        "‚Ä¢ –û–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∏\n"
        "‚Ä¢ –ö–≤–∏—Ç–∞–Ω—Ü—ñ—ó –∑–∞ –ø–æ—Å–ª—É–≥–∏\n\n"
        "‚è∞ **–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω:** Q3 2024\n\n"
        "üîî –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–∏—â–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó!\n\n"
        "–ê –ø–æ–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏."
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def notify_receipt_ready(query, context):
    """–†–µ—î—Å—Ç—Ä—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó"""
    user_id = query.from_user.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞–∂–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª—ñ
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ó—Ä–æ–∑—É–º—ñ–ª–æ", callback_data="add_transaction")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üîî *–£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!*\n\n"
        "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫ —Ç—ñ–ª—å–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ–∫—ñ–≤ –±—É–¥–µ –≥–æ—Ç–æ–≤–∞.\n\n"
        "üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ–π–¥–µ –ø—Ä—è–º–æ –≤ —Ü–µ–π —á–∞—Ç.\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É! üôè"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á ====================

async def show_manual_transaction_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    await show_manual_transaction_type(query, context)

async def show_add_expense_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    await show_enhanced_expense_form(query, context)

async def show_add_income_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫  
    await show_enhanced_income_form(query, context)

async def show_photo_receipt_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ç–æ —á–µ–∫—ñ–≤"""
    await show_receipt_photo_soon(query, context)

async def handle_receipt_photo_soon(query, context):
    """–ê–ª—ñ–∞—Å –¥–ª—è show_receipt_photo_soon"""
    await show_receipt_photo_soon(query, context)

async def show_all_transactions(query, context):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìä *–í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó*\n\n"
        "üîß –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n"
        "–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è."
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_transactions_pagination(query, context, direction="next"):
    """–û–±—Ä–æ–±–ª—è—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìÑ *–ü–∞–≥—ñ–Ω–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*\n\n"
        "üîß –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n"
        f"–ù–∞–ø—Ä—è–º: {direction}"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –û–ë–†–û–ë–ù–ò–ö–ò CALLBACK'–Ü–í –î–õ–Ø –Ü–ú–ü–û–†–¢–£ ====================

async def handle_import_all_transactions(query, context):
    """–û–±—Ä–æ–±–ª—è—î —ñ–º–ø–æ—Ä—Ç –≤—Å—ñ—Ö –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        transactions = context.user_data.get('parsed_transactions', [])
        
        if not transactions:
            await query.answer("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É")
            return
        
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="add_transaction")],
            [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="view_transactions")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚úÖ *–£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!*\n\n"
            f"üì• –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {sum(t.get('amount', 0) for t in transactions):.2f} –≥—Ä–Ω\n\n"
            f"üéâ –í–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"*–©–æ –¥–∞–ª—ñ?*\n"
            f"‚Ä¢ –î–æ–¥–∞–π—Ç–µ —â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
            f"‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∑–≤—ñ—Ç–∏\n"
            f"‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –±—é–¥–∂–µ—Ç–∏"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        context.user_data.pop('parsed_transactions', None)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")

async def handle_edit_transactions(query, context):
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —è–∫ —î", callback_data="import_all_transactions")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É", callback_data="upload_statement")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*\n\n"
        "üîß –§—É–Ω–∫—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n\n"
        "–ü–æ–∫–∏ —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —è–∫ —î\n"
        "‚Ä¢ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É\n\n"
        "‚è≥ –°–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        "‚Ä¢ –ó–º—ñ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n"
        "‚Ä¢ –ö–æ—Ä–µ–∫—Ü—ñ—è —Å—É–º —Ç–∞ –¥–∞—Ç"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_cancel_import(query, context):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É"""
    # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    context.user_data.pop('parsed_transactions', None)
    context.user_data.pop('uploaded_file', None)
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="upload_statement")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚ùå *–Ü–º–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ*\n\n"
        "–§–∞–π–ª —Ç–∞ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ.\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–∏–π —Ñ–∞–π–ª\n"
        "‚Ä¢ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_remove_duplicates(query, context):
    """–í–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        parsed_transactions = context.user_data.get('parsed_transactions', [])
        if not parsed_transactions:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
            return
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞ –¥–∞—Ç–æ—é —Ç–∞ —Å—É–º–æ—é
        unique_transactions = []
        seen = set()
        
        for transaction in parsed_transactions:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –∑ –¥–∞—Ç–∏ —Ç–∞ —Å—É–º–∏
            key = (transaction.get('date'), transaction.get('amount'))
            if key not in seen:
                seen.add(key)
                unique_transactions.append(transaction)
        
        removed_count = len(parsed_transactions) - len(unique_transactions)
        context.user_data['parsed_transactions'] = unique_transactions
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        from handlers.message_handler import show_transactions_preview
        await show_transactions_preview(query.message, context, unique_transactions)
        
        if removed_count > 0:
            await query.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
        else:
            await query.message.reply_text("‚ÑπÔ∏è –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"Error removing duplicates: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")

async def handle_set_import_period(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å", callback_data="period_last_month"),
                InlineKeyboardButton("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ", callback_data="period_last_3_months")
            ],
            [
                InlineKeyboardButton("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤", callback_data="period_last_6_months"),
                InlineKeyboardButton("üìÖ –í–µ—Å—å —Ä—ñ–∫", callback_data="period_whole_year")
            ],
            [
                InlineKeyboardButton("üìÖ –í–∏–±—Ä–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="period_custom"),
                InlineKeyboardButton("üìÖ –í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="period_all")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_preview")
            ]
        ]
        
        await query.edit_message_text(
            "üìÖ **–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É:**\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –æ–±–º–µ–∂–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–µ–≤–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º, "
            "—â–æ–± –Ω–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –∞–±–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –∑–∞–ø–∏—Å–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error setting import period: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –ø–µ—Ä—ñ–æ–¥—É")

async def handle_back_to_preview(query, context):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        parsed_transactions = context.user_data.get('parsed_transactions', [])
        if not parsed_transactions:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
            return
        
        from handlers.message_handler import show_transactions_preview
        await show_transactions_preview(query.message, context, parsed_transactions)
        
    except Exception as e:
        logger.error(f"Error returning to preview: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É")

async def handle_period_selection(query, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É"""
    try:
        period_type = query.data.replace("period_", "")
        parsed_transactions = context.user_data.get('parsed_transactions', [])
        
        if not parsed_transactions:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è.")
            return
        
        from datetime import datetime, timedelta
        now = datetime.now()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≥—Ä–∞–Ω–∏—á–Ω—É –¥–∞—Ç—É
        if period_type == "last_month":
            cutoff_date = now - timedelta(days=30)
        elif period_type == "last_3_months":
            cutoff_date = now - timedelta(days=90)
        elif period_type == "last_6_months":
            cutoff_date = now - timedelta(days=180)
        elif period_type == "whole_year":
            cutoff_date = now - timedelta(days=365)
        elif period_type == "all":
            cutoff_date = None
        elif period_type == "custom":
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
            cutoff_date = None
        else:
            cutoff_date = None
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        if cutoff_date:
            filtered_transactions = []
            for transaction in parsed_transactions:
                trans_date = transaction.get('date')
                if isinstance(trans_date, datetime) and trans_date >= cutoff_date:
                    filtered_transactions.append(transaction)
        else:
            filtered_transactions = parsed_transactions
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data['parsed_transactions'] = filtered_transactions
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥
        from handlers.message_handler import show_transactions_preview
        await show_transactions_preview(query.message, context, filtered_transactions)
        
        period_names = {
            "last_month": "–æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å",
            "last_3_months": "–æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ",
            "last_6_months": "–æ—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤",
            "whole_year": "–≤–µ—Å—å —Ä—ñ–∫",
            "all": "–≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥",
            "custom": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø–µ—Ä—ñ–æ–¥"
        }
        
        period_name = period_names.get(period_type, "–≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥")
        original_count = len(parsed_transactions)
        filtered_count = len(filtered_transactions)
        
        if filtered_count < original_count:
            await query.message.reply_text(
                f"üìÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä: {period_name}\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–æ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è: {original_count}\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è: {filtered_count}"
            )
        
    except Exception as e:
        logger.error(f"Error handling period selection: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É")

# ==================== –ö–Ü–ù–ï–¶–¨ –§–ê–ô–õ–£ ====================

async def show_transaction_success(query, context, transaction_data):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        transaction_type = transaction_data.get('type', 'expense')
        amount = transaction_data.get('amount', 0)
        description = transaction_data.get('description', '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è')
        category = transaction_data.get('category', '–Ü–Ω—à–µ')
        
        type_emoji = "üí∏" if transaction_type == "expense" else "üí∞"
        type_name = "–í–∏—Ç—Ä–∞—Ç–∞" if transaction_type == "expense" else "–î–æ—Ö—ñ–¥"
        
        success_text = f"""‚úÖ **{type_name} –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**

{type_emoji} **–°—É–º–∞:** {amount:.2f} ‚Ç¥
üìù **–û–ø–∏—Å:** {description}
üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category}
üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–æ –≤–∞—à–æ—ó —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó."""

        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="add_transaction"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")
            ],
            [
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error showing transaction success: {str(e)}")
        await query.edit_message_text(
            "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
