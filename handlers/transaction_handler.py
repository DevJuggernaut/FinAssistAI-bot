"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import os
from datetime import datetime
from database.db_operations import get_user, get_user_categories
from services.statement_parser import StatementParser
from services.vision_parser import VisionReceiptParser

logger = logging.getLogger(__name__)

# ==================== –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –î–û–î–ê–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ====================

async def show_add_transaction_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ç—Ä—å–æ–º–∞ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è", callback_data="manual_transaction_type")
        ],
        [
            InlineKeyboardButton("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É", callback_data="upload_statement")
        ],
        [
            InlineKeyboardButton("üì∏ –§–æ—Ç–æ —á–µ–∫—É", callback_data="start_receipt_photo_upload")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üí≥ *–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–±:\n\n"
        "‚ûï *–†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è* ‚Äî —à–≤–∏–¥–∫–æ –¥–æ–¥–∞–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç—É –∞–±–æ –¥–æ—Ö—ñ–¥\n"
        "üì§ *–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É* ‚Äî —ñ–º–ø–æ—Ä—Ç—É–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n"
        "üì∏ *–§–æ—Ç–æ —á–µ–∫—É* ‚Äî –∑—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è\n"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –†–£–ß–ù–ï –î–û–î–ê–í–ê–ù–ù–Ø ====================

async def show_manual_transaction_type(query, context):
    """–ü–æ–∫–∞–∑—É—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"""
    keyboard = [
        [
            InlineKeyboardButton("üí∏ –í–∏—Ç—Ä–∞—Ç–∞", callback_data="manual_expense"),
            InlineKeyboardButton("üí∞ –î–æ—Ö—ñ–¥", callback_data="manual_income")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="add_transaction")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚ûï *–†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è*\n\n"
        "–®–≤–∏–¥–∫–æ –¥–æ–¥–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ü—ñ—é –≤—Ä—É—á–Ω—É:\n\n"
        "üí∏ *–í–∏—Ç—Ä–∞—Ç–∞* ‚Äî –ø–æ–∫—É–ø–∫–∏, –æ–ø–ª–∞—Ç–∏, –≤–∏—Ç—Ä–∞—Ç–∏\n"
        "üí∞ *–î–æ—Ö—ñ–¥* ‚Äî –∑–∞—Ä–ø–ª–∞—Ç–∞, –±–æ–Ω—É—Å–∏, –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:\n"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_enhanced_expense_form(query, context):
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ –æ–ø–∏—Å—É –≤–∏—Ç—Ä–∞—Ç–∏"""
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data['transaction_type'] = 'expense'
        
        text = (
            "üí∏ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏*\n\n"
            "üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:**\n"
            "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 450 –∞–±–æ 1500.50_\n\n"
            "üìù **–ü—ñ—Å–ª—è —Å—É–º–∏ –¥–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª):**\n"
            "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 450 –ê–¢–ë –ø—Ä–æ–¥—É–∫—Ç–∏_\n\n"
            "ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–ø–∏—Å—É"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_transaction_type")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è
        context.user_data['awaiting_transaction_input'] = True
        
    except Exception as e:
        logger.error(f"Error in show_enhanced_expense_form: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def show_enhanced_income_form(query, context):
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ –æ–ø–∏—Å—É –¥–æ—Ö–æ–¥—É"""
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data['transaction_type'] = 'income'
        
        text = (
            "üí∞ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É*\n\n"
            "ÔøΩ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–æ—Ö–æ–¥—É:**\n"
            "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 15000 –∞–±–æ 5000.75_\n\n"
            "üìù **–ü—ñ—Å–ª—è —Å—É–º–∏ –¥–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª):**\n"
            "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 15000 –∑–∞—Ä–ø–ª–∞—Ç–∞_\n\n"
            "ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–ø–∏—Å—É"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="manual_transaction_type")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è
        context.user_data['awaiting_transaction_input'] = True
        
    except Exception as e:
        logger.error(f"Error in show_enhanced_income_form: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# ==================== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –í–ò–ü–ò–°–ö–ò ====================

async def show_upload_statement_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –≤–∏–±–æ—Ä—É –±–∞–Ω–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üè¶ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫", callback_data="select_bank_privatbank"),
            InlineKeyboardButton("üè¶ –ú–æ–Ω–æ–ë–∞–Ω–∫", callback_data="select_bank_monobank")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="add_transaction")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üì§ *–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏ –∑ –±–∞–Ω–∫—É*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–∞–Ω–∫, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É.\n\n"
        "–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –≤—ñ–¥–∫—Ä–∏—é—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ –¥–æ–∑–≤–æ–ª—è—Ç—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.\n\n"
        "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ ‚Äî –ª–∏—à–µ Excel (.xlsx)\n"
        "‚Ä¢ –ú–æ–Ω–æ–ë–∞–Ω–∫ ‚Äî CSV, Excel (.xls/.xlsx), PDF\n\n"
        "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó\n"
        "2Ô∏è‚É£ –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –∞–±–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —ñ–º–ø–æ—Ä—Ç\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –±–∞–Ω–∫, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:"
    )

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_upload_pdf_guide(query, context):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF –≤–∏–ø–∏—Å–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ PDF —Ñ–∞–π–ª", callback_data="start_pdf_upload")
        ]
    ]
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–Ω–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    back_button_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ñ–æ—Ä–º–∞—Ç—ñ–≤"
    if query.data == "privatbank_pdf_guide":
        back_button_callback = "select_bank_privatbank"
        context.user_data['file_source'] = 'privatbank'
    elif query.data == "monobank_pdf_guide":  
        back_button_callback = "select_bank_monobank"
        context.user_data['file_source'] = 'monobank'
    else:
        back_button_callback = "upload_statement"
    
    keyboard.append([InlineKeyboardButton(back_button_text, callback_data=back_button_callback)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìÑ *–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ - PDF –≤–∏–ø–∏—Å–∫–∞*\n\n"
        "üí° **–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ PDF –≤–∏–ø–∏—Å–∫—É –∑ –ü—Ä–∏–≤–∞—Ç24:**\n"
        "1Ô∏è‚É£ –£–≤—ñ–π–¥—ñ—Ç—å –≤ –ü—Ä–∏–≤–∞—Ç24\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ä—Ç–∫–∏/—Ä–∞—Ö—É–Ω–∫—É\n"
        "3Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å '–í–∏–ø–∏—Å–∫–∞'\n"
        "4Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥\n"
        "5Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∏—Å–∫—É'\n"
        "6Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç 'PDF'\n\n"
        "üìã **–©–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î—Ç—å—Å—è:**\n"
        "‚Ä¢ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó\n"
        "‚Ä¢ –°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        "‚Ä¢ –û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó\n"
        "‚Ä¢ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó (–¥–æ—Ö—ñ–¥/–≤–∏—Ç—Ä–∞—Ç–∞)\n\n"
        "‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:**\n"
        "‚Ä¢ –§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–º PDF (–Ω–µ —Å–∫–∞–Ω)\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–æ 10 –ú–ë\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å PDF —Ñ–∞–π–ª:"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    context.user_data['awaiting_file'] = 'pdf'
    # –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ privatbank —è–∫ –¥–∂–µ—Ä–µ–ª–æ –¥–ª—è PDF, –æ—Å–∫—ñ–ª—å–∫–∏ PDF –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–ª—è –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É
    if query.data == "privatbank_pdf_guide":
        context.user_data['file_source'] = 'other'  # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—É—î–º–æ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    elif query.data == "monobank_pdf_guide":  
        context.user_data['file_source'] = 'monobank'
    else:
        context.user_data['file_source'] = 'other'
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_upload_excel_guide(query, context):
    """–°—É—á–∞—Å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel –≤–∏–ø–∏—Å–∫–∏ Monobank –∑ —á—ñ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º –∫–Ω–æ–ø–∫–∏."""
    keyboard = [
        [InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ Excel —Ñ–∞–π–ª", callback_data="start_excel_upload")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="select_bank_monobank")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üìä *Monobank ‚Äî Excel –≤–∏–ø–∏—Å–∫–∞*\n\n"
        "1Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel —Ñ–∞–π–ª –∑ –¥–æ–¥–∞—Ç–∫—É Monobank:\n"
        "‚Ä¢ –í—ñ–¥–∫—Ä–∏–π—Ç–µ Monobank, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É\n"
        "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —ñ–∫–æ–Ω–∫—É –≤–∏–ø–∏—Å–∫–∏ (—Å–ø—Ä–∞–≤–∞ –≤–≥–æ—Ä—ñ)\n"
        "‚Ä¢ –í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —ñ —Ñ–æ—Ä–º–∞—Ç Excel (.xls/.xlsx)\n"
        "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ü–µ–π —á–∞—Ç\n\n"
        "‚ö†Ô∏è –í–∏–º–æ–≥–∏ –¥–æ —Ñ–∞–π–ª—É:\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: .xls –∞–±–æ .xlsx\n"
        "‚Ä¢ –ù–µ –∑–º—ñ–Ω—é–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä –¥–æ 10 –ú–ë\n\n"
        "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª."
    )

    context.user_data['awaiting_file'] = 'excel'
    context.user_data['file_source'] = 'monobank'

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
async def show_privatbank_excel_guide(query, context):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏ –∑ –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫—É"""
    keyboard = [
        [
            InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ Excel —Ñ–∞–π–ª", callback_data="start_excel_upload")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ñ–æ—Ä–º–∞—Ç—ñ–≤", callback_data="select_bank_privatbank")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìä *–ï–∫—Å–ø–æ—Ä—Ç –≤–∏–ø–∏—Å–∫–∏ –∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É (Excel)*\n\n"
        "1Ô∏è‚É£ –£–≤—ñ–π–¥—ñ—Ç—å —É –ü—Ä–∏–≤–∞—Ç24 (–≤–µ–± –∞–±–æ –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫)\n"
        "2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É –∞–±–æ —Ä–∞—Ö—É–Ω–æ–∫\n"
        "3Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥\n"
        "4Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–í–∏–ø–∏—Å–∫–∞' ‚Üí 'Excel'\n"
        "5Ô∏è‚É£ –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ñ–∞–π–ª —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ –±–æ—Ç—É\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó, —Å—É–º–∏, –¥–∞—Ç–∏ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel —Ñ–∞–π–ª."
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_upload_csv_guide(query, context):
    """–°—É—á–∞—Å–Ω–∞, –ª–∞–∫–æ–Ω—ñ—á–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV –≤–∏–ø–∏—Å–∫–∏ Monobank –∑ —á—ñ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º –∫–Ω–æ–ø–æ–∫."""
    keyboard = [
        [InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ CSV —Ñ–∞–π–ª", callback_data="start_csv_upload")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="select_bank_monobank")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üìã *Monobank ‚Äî CSV –≤–∏–ø–∏—Å–∫–∞*\n\n"
        "1Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª –∑ –¥–æ–¥–∞—Ç–∫—É Monobank:\n"
        "‚Ä¢ –í—ñ–¥–∫—Ä–∏–π—Ç–µ Monobank, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É\n"
        "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —ñ–∫–æ–Ω–∫—É –≤–∏–ø–∏—Å–∫–∏ (—Å–ø—Ä–∞–≤–∞ –≤–≥–æ—Ä—ñ)\n"
        "‚Ä¢ –í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —ñ —Ñ–æ—Ä–º–∞—Ç CSV\n"
        "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ü–µ–π —á–∞—Ç\n\n"
        "‚ö†Ô∏è –í–∏–º–æ–≥–∏ –¥–æ —Ñ–∞–π–ª—É:\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: .csv\n"
        "‚Ä¢ –ù–µ –∑–º—ñ–Ω—é–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä –¥–æ 10 –ú–ë\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª."
    )

    context.user_data['awaiting_file'] = 'csv'

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_monobank_pdf_guide(query, context):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF –≤–∏–ø–∏—Å–∫–∏ –∑ –ú–æ–Ω–æ–ë–∞–Ω–∫—É"""
    keyboard = [
        [
            InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ PDF —Ñ–∞–π–ª", callback_data="start_pdf_upload")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ñ–æ—Ä–º–∞—Ç—ñ–≤", callback_data="select_bank_monobank")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üìÑ *Monobank ‚Äî PDF –≤–∏–ø–∏—Å–∫–∞*\n\n"
        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ Monobank —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —ñ–∫–æ–Ω–∫—É –≤–∏–ø–∏—Å–∫–∏ (—É–≥–æ—Ä—ñ)\n"
        "3Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —ñ —Ñ–æ—Ä–º–∞—Ç PDF\n"
        "4Ô∏è‚É£ –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ñ–∞–π–ª —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ –±–æ—Ç—É\n\n"
        "‚ö° *–©–æ –¥–∞–ª—ñ?*\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó\n"
        "‚Ä¢ –í–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç\n\n"
        "‚ö†Ô∏è *–í–∏–º–æ–≥–∏:*\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: PDF (–Ω–µ —Å–∫–∞–Ω, –∞ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª)\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä –¥–æ 10 –ú–ë\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF –≤–∏–ø–∏—Å–∫—É."
    )

    context.user_data['awaiting_file'] = 'pdf'
    context.user_data['file_source'] = 'monobank'

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_other_bank_statement_form(query, context):
    """–ü–æ–∫–∞–∑—É—î –æ–ø—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏ –∑ —ñ–Ω—à–∏—Ö –±–∞–Ω–∫—ñ–≤"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω–∏–π –±–∞–Ω–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['selected_bank'] = 'other'
    
    keyboard = [
        [
            InlineKeyboardButton("üìã CSV –≤–∏–ø–∏—Å–∫–∞", callback_data="upload_csv_guide")
        ],
        [
            InlineKeyboardButton("üìä Excel –≤–∏–ø–∏—Å–∫–∞", callback_data="upload_excel_guide")
        ],
        [
            InlineKeyboardButton("üìÑ PDF –≤–∏–ø–∏—Å–∫–∞", callback_data="upload_pdf_guide")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –±–∞–Ω–∫—É", callback_data="upload_statement")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üèõÔ∏è *–Ü–Ω—à–∏–π –±–∞–Ω–∫ - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏*\n\n"
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:**\n"
        "‚Ä¢ CSV —Ñ–∞–π–ª (.csv)\n"
        "‚Ä¢ Excel —Ñ–∞–π–ª (.xlsx, .xls)\n"
        "‚Ä¢ PDF —Ñ–∞–π–ª (.pdf)\n\n"
        "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∏–ø–∏—Å–∫–∏:**\n"
        "‚Ä¢ –í–∏–±–∏—Ä–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–ø–∏—Å–∫–∏\n"
        "‚Ä¢ –û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (CSV –∞–±–æ Excel)\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤–∏–ø–∏—Å–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –¥–∞—Ç–∏, —Å—É–º–∏ —Ç–∞ –æ–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π\n"
        "‚Ä¢ –Ø–∫—â–æ –º–æ–∂–ª–∏–≤–æ, –≤–∫–ª—é—á—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É –≤–∏–ø–∏—Å–∫—É\n\n"
        "‚ö†Ô∏è **–£–≤–∞–≥–∞:**\n"
        "‚Ä¢ –£ –≤–∏–ø–∞–¥–∫—É —Å–∫–ª–∞–¥–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –±–æ—Ç –º–æ–∂–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –Ω–µ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        "‚Ä¢ –í–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –ø—ñ–¥–∫–æ—Ä–∏–≥—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–æ—ó –≤–∏–ø–∏—Å–∫–∏:"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ====================

async def show_edit_transaction_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="edit_transaction")
        ],
        [
            InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="delete_transaction")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üõ†Ô∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é:\n\n"
        "‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é* - –∑–º—ñ–Ω—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        "üóëÔ∏è *–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é* - –≤–∏–¥–∞–ª—ñ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ —ñ—Å—Ç–æ—Ä—ñ—ó\n\n"
        "‚óÄÔ∏è *–ù–∞–∑–∞–¥* - –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_edit_transaction_form(query, context, transaction_data):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        context.user_data['editing_transaction'] = transaction_data
        
        text = (
            "‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó*\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏.\n\n"
            "üóìÔ∏è *–î–∞—Ç–∞:* {date}\n"
            "üí∞ *–°—É–º–∞:* {amount} ‚Ç¥\n"
            "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* {category}\n"
            "üìù *–û–ø–∏—Å:* {description}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
        ).format(
            date=transaction_data['date'].strftime("%d.%m.%Y"),
            amount=f"{transaction_data['amount']:.2f}",
            category=transaction_data.get('category', '–Ü–Ω—à–µ'),
            description=transaction_data.get('description', '')
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üñäÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É", callback_data="edit_amount"),
                InlineKeyboardButton("üìÖ –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É", callback_data="edit_date")
            ],
            [
                InlineKeyboardButton("üè∑Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="edit_category"),
                InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å", callback_data="edit_description")
            ],
            [
                InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", callback_data="save_transaction"),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_edit")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_edit_transaction_form: {str(e)}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_edit_single_transaction(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    from database.db_operations import get_user, get_transaction_by_id
    
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ callback_data
        transaction_id = int(query.data.split('_')[-1])
        
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        transaction = get_transaction_by_id(transaction_id, user.id)
        if not transaction:
            await query.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        date_str = transaction.transaction_date.strftime("%d.%m.%Y %H:%M")
        type_icon = "üí∏" if transaction.type.value == "expense" else "üí∞"
        type_name = "–í–∏—Ç—Ä–∞—Ç–∞" if transaction.type.value == "expense" else "–î–æ—Ö—ñ–¥"
        category_name = transaction.category_name if hasattr(transaction, 'category_name') and transaction.category_name else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
        description = transaction.description or "–ë–µ–∑ –æ–ø–∏—Å—É"
        
        text = (
            f"‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó*\n\n"
            f"{type_icon} *{type_name}*\n"
            f"üí∞ **–°—É–º–∞:** {transaction.amount:.2f} ‚Ç¥\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category_name}\n"
            f"üìÖ **–î–∞—Ç–∞:** {date_str}\n"
            f"üìù **–û–ø–∏—Å:** {description}\n\n"
            f"–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –°—É–º–∞", callback_data=f"edit_amount_{transaction_id}"),
                InlineKeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback_data=f"edit_category_{transaction_id}")
            ],
            [
                InlineKeyboardButton("üìù –û–ø–∏—Å", callback_data=f"edit_description_{transaction_id}"),
                InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date_{transaction_id}")
            ],
            [
                InlineKeyboardButton("üîÑ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó", callback_data=f"edit_type_{transaction_id}")
            ],
            [
                InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_transaction_{transaction_id}"),
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_all_transactions")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        context.user_data['editing_transaction_id'] = transaction_id
        
    except Exception as e:
        logger.error(f"Error in handle_edit_single_transaction: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.", show_alert=True)

async def handle_edit_amount(query, context):
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        transaction_id = int(query.data.split('_')[-1])
        context.user_data['editing_transaction_id'] = transaction_id
        context.user_data['editing_field'] = 'amount'
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"edit_transaction_{transaction_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üí∞ *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—É–º–∏*\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞):\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: 150.50 –∞–±–æ 1500",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_edit_amount: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

async def handle_edit_description(query, context):
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        transaction_id = int(query.data.split('_')[-1])
        context.user_data['editing_transaction_id'] = transaction_id
        context.user_data['editing_field'] = 'description'
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"edit_transaction_{transaction_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìù *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É*\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_edit_description: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

async def handle_edit_category(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    from database.db_operations import get_user, get_user_categories, get_transaction_by_id
    
    try:
        transaction_id = int(query.data.split('_')[-1])
        
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        transaction = get_transaction_by_id(transaction_id, user.id)
        if not transaction:
            await query.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É
        categories = get_user_categories(user.id, category_type=transaction.type.value)
        
        if not categories:
            await query.answer("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.", show_alert=True)
            return
        
        text = "üìÇ *–í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó*\n\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:"
        
        keyboard = []
        for category in categories:
            icon = category.icon if category.icon else "üìÇ"
            button_text = f"{icon} {category.name}"
            keyboard.append([
                InlineKeyboardButton(
                    button_text, 
                    callback_data=f"set_category_{transaction_id}_{category.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_transaction_{transaction_id}")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_edit_category: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

async def handle_set_category(query, context):
    """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    from database.db_operations import update_transaction
    
    try:
        parts = query.data.split('_')
        transaction_id = int(parts[2])
        category_id = int(parts[3])
        
        result = update_transaction(transaction_id, query.from_user.id, category_id=category_id)
        
        if result:
            await query.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞!", show_alert=False)
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            context.user_data['editing_transaction_id'] = transaction_id
            await handle_edit_single_transaction(query, context)
        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in handle_set_category: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

async def handle_delete_transaction(query, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    from database.db_operations import delete_transaction
    
    try:
        transaction_id = int(query.data.split('_')[-1])
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"confirm_delete_{transaction_id}"),
                InlineKeyboardButton("‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏", callback_data=f"edit_transaction_{transaction_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üóë *–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó*\n\n"
            "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é?\n\n"
            "‚ö†Ô∏è **–£–≤–∞–≥–∞!** –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_delete_transaction: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

async def handle_confirm_delete(query, context):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    from database.db_operations import get_user, delete_transaction
    
    try:
        transaction_id = int(query.data.split('_')[-1])
        
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        success = delete_transaction(transaction_id, user.id)
        
        if success:
            await query.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞!", show_alert=True)
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            await handle_edit_transactions(query, context)
        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in handle_confirm_delete: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

# ==================== –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á ====================

async def show_manual_transaction_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    await show_manual_transaction_type(query, context)

async def show_add_expense_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    await show_enhanced_expense_form(query, context)

async def show_add_income_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫  
    await show_enhanced_income_form(query, context)

async def show_photo_receipt_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è —Ñ–æ—Ç–æ —á–µ–∫—É - —Ç–µ–ø–µ—Ä –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    await handle_start_receipt_photo_upload(query, context)

async def handle_receipt_photo_soon(query, context):
    """–ê–ª—ñ–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ —á–µ–∫—É"""
    await handle_start_receipt_photo_upload(query, context)

async def show_all_transactions(query, context):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é"""
    from database.db_operations import get_transactions, get_user_categories
    from database.models import TransactionType
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if 'transactions_view' not in context.user_data:
        context.user_data['transactions_view'] = {
            'page': 1,
            'per_page': 5,
            'category_id': None,
            'type': None,
            'period': 'month'  # –ú–æ–∂–µ –±—É—Ç–∏ 'all', 'month', 'week', 'day', 'year'
        }
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    if 'transaction_filters' not in context.user_data:
        context.user_data['transaction_filters'] = {
            'period': 'month',
            'type': 'all',
            'category': 'all'
        }
    # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    filters = context.user_data['transaction_filters']
    view_params = context.user_data['transactions_view']
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    view_params['period'] = filters.get('period', 'month')
    view_params['type'] = filters.get('type', 'all') if filters.get('type', 'all') != 'all' else None
    view_params['category_id'] = filters.get('category', 'all') if filters.get('category', 'all') != 'all' else None
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    context.user_data['transactions_view'] = view_params
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö view_params
    page = view_params.get('page', 1)
    per_page = view_params.get('per_page', 5)
    
    # Convert category_id from string to int if needed
    category_id = view_params.get('category_id', None)
    if category_id and category_id != 'all' and isinstance(category_id, str):
        try:
            category_id = int(category_id)
        except ValueError:
            category_id = None
    elif category_id == 'all':
        category_id = None
        
    # Handle transaction_type properly
    transaction_type = view_params.get('type', None)
    from database.models import TransactionType
    if transaction_type == 'income':
        transaction_type = TransactionType.INCOME
    elif transaction_type == 'expense':
        transaction_type = TransactionType.EXPENSE
    elif transaction_type == 'all' or not transaction_type:
        transaction_type = None
        
    period = view_params.get('period', 'month')
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–∞—Ç–∏
    from datetime import datetime, timedelta
    import calendar
    today = datetime.now()
    
    start_date = None
    end_date = None
    
    if period == 'day':
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        start_date = today.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = today.replace(hour=23, minute=59, second=59, microsecond=999999)
        period_text = "–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
    elif period == 'week':
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫ - –Ω–µ–¥—ñ–ª—è)
        start_date = today - timedelta(days=today.weekday())
        start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = start_date + timedelta(days=6, hours=23, minutes=59, seconds=59, microseconds=999999)
        period_text = "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å"
    elif period == 'month':
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
        start_date = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è
        last_day = calendar.monthrange(today.year, today.month)[1]
        end_date = today.replace(day=last_day, hour=23, minute=59, second=59, microsecond=999999)
        period_text = "–∑–∞ –º—ñ—Å—è—Ü—å"
    elif period == 'year':
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫
        start_date = today.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
        end_date = today.replace(month=12, day=31, hour=23, minute=59, second=59, microsecond=999999)
        period_text = "–∑–∞ —Ä—ñ–∫"
    elif period == 'all':
        # –ë–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –¥–∞—Ç–æ—é
        start_date = None
        end_date = None
        period_text = "–≤—Å—ñ"
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = query.from_user.id
    from database.db_operations import get_or_create_user
    user = get_or_create_user(telegram_id)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞–ª—é—Ç—É
    currency = user.currency or "UAH"
    currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
    offset = (page - 1) * per_page
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    try:
        # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"Getting transactions with filters: user_id={user.id}, category_id={category_id}, type={transaction_type}, period={period}")
        if start_date and end_date:
            logger.info(f"Date range: {start_date} to {end_date}")
        
        transactions = get_transactions(
            user_id=user.id,
            limit=per_page,
            offset=offset,
            category_id=category_id,
            transaction_type=transaction_type,
            start_date=start_date,
            end_date=end_date
        )
        logger.info(f"Got {len(transactions)} transactions with filters: category_id={category_id}, type={transaction_type}, period={period}")
    except Exception as e:
        logger.error(f"Error getting transactions: {str(e)}")
        transactions = []
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    # –î–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ –ª—ñ–º—ñ—Ç—É, –∞–ª–µ –∑ —Ç–∏–º–∏ –∂ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    try:
        total_transactions = len(get_transactions(
            user_id=user.id,
            limit=1000,  # –í–∏—Å–æ–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ
            category_id=category_id,
            transaction_type=transaction_type,
            start_date=start_date,
            end_date=end_date
        ))
        
        # –î–æ–¥–∞—î–º–æ —Ç–∞–∫–æ–∂ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        total_all_transactions = len(get_transactions(
            user_id=user.id,
            limit=1000
        ))
        logger.info(f"Total transactions with filters: {total_transactions}, Total all transactions: {total_all_transactions}")
    except Exception as e:
        logger.error(f"Error getting total transaction count: {str(e)}")
        total_transactions = 0
    
    total_pages = max(1, (total_transactions + per_page - 1) // per_page)
    
    # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    filter_info = []
    if category_id:
        categories = get_user_categories(user.id)
        category_name = next((c.name for c in categories if c.id == category_id), "–ù–µ–≤—ñ–¥–æ–º–∞")
        filter_info.append(f"–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_name}")
        
    if transaction_type:
        type_text = "–¥–æ—Ö–æ–¥–∏" if transaction_type == TransactionType.INCOME else "–≤–∏—Ç—Ä–∞—Ç–∏"
        filter_info.append(f"—Ç–∏–ø: {type_text}")
    
    filter_text = ""
    if filter_info:
        filter_text = f" ({', '.join(filter_info)})"
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    filters = context.user_data.get('transaction_filters', {})
    active_filters = []
    if filters.get('period', 'month') != 'month':
        active_filters.append('–ø–µ—Ä—ñ–æ–¥')
    if filters.get('type', 'all') != 'all':
        active_filters.append('—Ç–∏–ø')
    if filters.get('category', 'all') != 'all':
        active_filters.append('–∫–∞—Ç–µ–≥–æ—Ä—ñ—è')
    
    # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –æ–∫—Ä–µ–º–∏–º–∏ —Ä—è–¥–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    header = f"üìä *–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó {period_text}{filter_text}*\n"
    header += f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –∑ {total_pages} | –í—Å—å–æ–≥–æ: {total_transactions}\n"
    
    if active_filters:
        header += f"üîç –ê–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: {', '.join(active_filters)}\n"
    
    header += "\n"
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    if not transactions:
        text = header + "\n‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ."
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", callback_data="reset_transactions_filters"),
                InlineKeyboardButton("ÔøΩ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", callback_data="transaction_filters")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –æ–≥–ª—è–¥—É", callback_data="my_budget_overview")
            ]
        ]
    else:
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –∫–Ω–æ–ø–∞–º–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        text = header
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        keyboard = []
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —è–∫ –æ–∫—Ä–µ–º—É –∫–Ω–æ–ø–∫—É
        for i, transaction in enumerate(transactions):
            date_str = transaction.transaction_date.strftime("%d.%m")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ —ó—ó —ñ–∫–æ–Ω–∫—É
            category_name = "–Ü–Ω—à–µ"
            category_icon = "üìã"
            if transaction.category:
                category_name = transaction.category.name
                category_icon = transaction.category.icon or "üìã"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–¥–æ—Ö—ñ–¥/–≤–∏—Ç—Ä–∞—Ç–∞)
            if transaction.type.value == 'income':
                amount_str = f"+{transaction.amount:,.0f} {currency_symbol}"
                type_emoji = "ÔøΩ"
            else:
                amount_str = f"{transaction.amount:,.0f} {currency_symbol}"
                type_emoji = "ÔøΩ"
            
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –æ–ø–∏—Å—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
            description = transaction.description or category_name
            if len(description) > 15:
                description = description[:12] + "..."
            
            # –°—É—á–∞—Å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: –µ–º–æ–¥–∑—ñ —Ç–∏–ø—É, —Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞
            button_text = f"{type_emoji} {amount_str} ‚Ä¢ {description} ‚Ä¢ {date_str}"
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é
            keyboard.append([
                InlineKeyboardButton(
                    button_text, 
                    callback_data=f"view_transaction_{transaction.id}"
                )
            ])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        pagination_row = []
        if page > 1:
            pagination_row.append(InlineKeyboardButton("‚óÄÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data="prev_transactions_page"))
        if page < total_pages:
            pagination_row.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚ñ∂Ô∏è", callback_data="next_transactions_page"))
            
        if pagination_row:
            keyboard.append(pagination_row)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–°–∫–∏–Ω—É—Ç–∏")
        keyboard.append([InlineKeyboardButton("üîç –§—ñ–ª—å—Ç—Ä–∏", callback_data="transaction_filters")])
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –æ–≥–ª—è–¥—É", callback_data="my_budget_overview")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —è–∫—â–æ —Ç–µ–∫—Å—Ç —ñ —Ä–æ–∑–º—ñ—Ç–∫–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è, –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        current_message = query.message
        current_text = current_message.text or current_message.caption or ""
        current_reply_markup = current_message.reply_markup
        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç —ñ —Ä–æ–∑–º—ñ—Ç–∫—É
        if text.strip() == current_text.strip() and (current_reply_markup == reply_markup or (current_reply_markup and reply_markup and current_reply_markup.to_dict() == reply_markup.to_dict())):
            await query.answer("–í–∏ –≤–∂–µ –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.")
            return
    except Exception:
        pass  # –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –û–ë–†–û–ë–ù–ò–ö–ò CALLBACK'–Ü–í –î–õ–Ø –Ü–ú–ü–û–†–¢–£ ====================

async def handle_import_all_transactions(query, context):
    """–û–±—Ä–æ–±–ª—è—î —ñ–º–ø–æ—Ä—Ç –≤—Å—ñ—Ö –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —É –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        transactions = context.user_data.get('parsed_transactions', [])
        
        if not transactions:
            await query.answer("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        telegram_id = query.from_user.id
        from database.db_operations import get_or_create_user
        user = get_or_create_user(telegram_id)
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        from database.models import Transaction, TransactionType
        from database.session import Session
        from database.db_operations import get_category_by_name, create_category
        from datetime import datetime
        import uuid
        
        session = Session()
        imported_count = 0
        total_amount = 0
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–∂–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        for trans in transactions:
            try:
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                if isinstance(trans['type'], str):
                    transaction_type = TransactionType.EXPENSE if trans['type'] == 'expense' else TransactionType.INCOME
                else:
                    transaction_type = trans['type']
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—É–º—É (–∑–∞–≤–∂–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ)
                amount = abs(float(trans.get('amount', 0)))
                total_amount += amount
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç—É
                date = trans.get('date')
                if isinstance(date, str):
                    try:
                        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç–∏
                        formats = ['%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y', '%m/%d/%Y']
                        for fmt in formats:
                            try:
                                date = datetime.strptime(date, fmt).date()
                                break
                            except ValueError:
                                continue
                    except Exception:
                        date = datetime.now().date()
                elif not date:
                    date = datetime.now().date()
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ–ø–∏—Å
                description = trans.get('description', '').strip() or "–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"
                if len(description) > 500:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –æ–ø–∏—Å—É
                    description = description[:497] + "..."
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                category_id = None
                category_name = trans.get('category', '')
                
                if category_name:
                    # –®—É–∫–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
                    category = get_category_by_name(user.id, category_name)
                    if not category:
                        category = create_category(user.id, category_name)
                    
                    category_id = category.id if category else None
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                transaction = Transaction(
                    user_id=user.id,
                    amount=amount,
                    type=transaction_type,
                    description=description,
                    transaction_date=date,
                    category_id=category_id,
                    created_at=datetime.now(),
                    source='import'
                )
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                session.add(transaction)
                imported_count += 1
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –æ–∫—Ä–µ–º–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
                continue
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤—Å—ñ –∑–º—ñ–Ω–∏
        session.commit()
        session.close()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="add_transaction")],
            [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="view_all_transactions")],
            [InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞–ª—é—Ç—É
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        text = (
            f"‚úÖ *–£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!*\n\n"
            f"üì• –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:,.2f} {currency_symbol}\n\n"
            f"üéâ –í–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"*–©–æ –¥–∞–ª—ñ?*\n"
            f"‚Ä¢ –î–æ–¥–∞–π—Ç–µ —â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
            f"‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
            f"‚Ä¢ –°—Ç–≤–æ—Ä—ñ—Ç—å –±—é–¥–∂–µ—Ç"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        context.user_data.pop('parsed_transactions', None)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")

async def handle_edit_transactions(query, context):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    from database.db_operations import get_user, get_transactions
    
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        transactions = get_transactions(user.id, limit=10, offset=0)
        
        if not transactions:
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_all_transactions")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìù *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.\n\n"
                "–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ –º–µ–Ω—é '–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é'.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –∫–Ω–æ–ø–∞–º–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        text = "‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*\n\n"
        text += "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:\n\n"
        
        keyboard = []
        for transaction in transactions:
            date_str = transaction.transaction_date.strftime("%d.%m.%Y")
            type_icon = "üí∏" if transaction.type.value == "expense" else "üí∞"
            category_name = transaction.category_name if hasattr(transaction, 'category_name') and transaction.category_name else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
            
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –æ–ø–∏—Å—É
            description = transaction.description or "–ë–µ–∑ –æ–ø–∏—Å—É"
            if len(description) > 25:
                description = description[:22] + "..."
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–∂–µ—Ä–µ–ª–∞
            button_text = f"{type_icon} {transaction.amount:.0f} ‚Ç¥ | {category_name} | {date_str}"
            keyboard.append([
                InlineKeyboardButton(
                    button_text, 
                    callback_data=f"edit_transaction_{transaction.id}"
                )
            ])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ", callback_data="edit_transactions_prev"),
            InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω—ñ ‚û°Ô∏è", callback_data="edit_transactions_next")
        ])
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_all_transactions")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        context.user_data['edit_transactions_page'] = 0
        
    except Exception as e:
        logger.error(f"Error in handle_edit_transactions: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.", show_alert=True)

async def handle_cancel_import(query, context):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É"""
    # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    context.user_data.pop('parsed_transactions', None)
    context.user_data.pop('uploaded_file', None)
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="upload_statement")],
        [InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚ùå *–Ü–º–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ*\n\n"
        "–§–∞–π–ª —Ç–∞ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ.\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–∏–π —Ñ–∞–π–ª\n"
        "‚Ä¢ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_remove_duplicates(query, context):
    """–í–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        parsed_transactions = context.user_data.get('parsed_transactions', [])
        if not parsed_transactions:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
            return
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞ –¥–∞—Ç–æ—é —Ç–∞ —Å—É–º–æ—é
        unique_transactions = []
        seen = set()
        
        for transaction in parsed_transactions:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –∑ –¥–∞—Ç–∏ —Ç–∞ —Å—É–º–∏
            key = (transaction.get('date'), transaction.get('amount'))
            if key not in seen:
                seen.add(key)
                unique_transactions.append(transaction)
        
        removed_count = len(parsed_transactions) - len(unique_transactions)
        context.user_data['parsed_transactions'] = unique_transactions
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        from handlers.message_handler import show_transactions_preview
        await show_transactions_preview(query.message, context, unique_transactions)
        
        if removed_count > 0:
            await query.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
        else:
            await query.message.reply_text("‚ÑπÔ∏è –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"Error removing duplicates: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")

async def handle_set_import_period(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å", callback_data="period_last_month"),
                InlineKeyboardButton("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ", callback_data="period_last_3_months")
            ],
            [
                InlineKeyboardButton("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤", callback_data="period_last_6_months"),
                InlineKeyboardButton("üìÖ –í–µ—Å—å —Ä—ñ–∫", callback_data="period_whole_year")
            ],
            [
                InlineKeyboardButton("üìÖ –í–∏–±—Ä–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="period_custom"),
                InlineKeyboardButton("üìÖ –í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="period_all")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_preview")
            ]
        ]
        
        await query.edit_message_text(
            "üìÖ **–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É:**\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –æ–±–º–µ–∂–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–µ–≤–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º, "
            "—â–æ–± –Ω–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –∞–±–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –∑–∞–ø–∏—Å–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error setting import period: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –ø–µ—Ä—ñ–æ–¥—É")

async def handle_back_to_preview(query, context):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        parsed_transactions = context.user_data.get('parsed_transactions', [])
        if not parsed_transactions:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
            return
        
        from handlers.message_handler import show_transactions_preview
        await show_transactions_preview(query.message, context, parsed_transactions)
        
    except Exception as e:
        logger.error(f"Error returning to preview: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É")

async def handle_period_selection(query, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É"""
    try:
        period_type = query.data.replace("period_", "")
        parsed_transactions = context.user_data.get('parsed_transactions', [])
        
        if not parsed_transactions:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è.")
            return
        
        from datetime import datetime, timedelta
        now = datetime.now()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≥—Ä–∞–Ω–∏—á–Ω—É –¥–∞—Ç—É
        if period_type == "last_month":
            cutoff_date = now - timedelta(days=30)
        elif period_type == "last_3_months":
            cutoff_date = now - timedelta(days=90)
        elif period_type == "last_6_months":
            cutoff_date = now - timedelta(days=180)
        elif period_type == "whole_year":
            cutoff_date = now - timedelta(days=365)
        elif period_type == "all":
            cutoff_date = None
        elif period_type == "custom":
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
            cutoff_date = None
        else:
            cutoff_date = None
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        if cutoff_date:
            filtered_transactions = []
            for transaction in parsed_transactions:
                trans_date = transaction.get('date')
                if isinstance(trans_date, datetime) and trans_date >= cutoff_date:
                    filtered_transactions.append(transaction)
        else:
            filtered_transactions = parsed_transactions
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data['parsed_transactions'] = filtered_transactions
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥
        from handlers.message_handler import show_transactions_preview
        await show_transactions_preview(query.message, context, filtered_transactions)
        
        period_names = {
            "last_month": "–æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å",
            "last_3_months": "–æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ",
            "last_6_months": "–æ—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤",
            "whole_year": "–≤–µ—Å—å —Ä—ñ–∫",
            "all": "–≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥",
            "custom": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø–µ—Ä—ñ–æ–¥"
        }
        
        period_name = period_names.get(period_type, "–≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥")
        original_count = len(parsed_transactions)
        filtered_count = len(filtered_transactions)
        
        if filtered_count < original_count:
            await query.message.reply_text(
                f"üìÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä: {period_name}\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–æ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è: {original_count}\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è: {filtered_count}"
            )
        
    except Exception as e:
        logger.error(f"Error handling period selection: {str(e)}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É")

async def show_receipt_photo_soon(query, context):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ç–æ —á–µ–∫—É –≤–∂–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–≤–∞—Ç–∏ —á–µ–∫", callback_data="start_receipt_photo_upload")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="manual_transaction_type"),
            InlineKeyboardButton("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É", callback_data="upload_statement")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="add_transaction")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üì∏ *–§–æ—Ç–æ —á–µ–∫—É ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è*\n\n"
        "1Ô∏è‚É£ –ó—Ä–æ–±—ñ—Ç—å —á—ñ—Ç–∫–µ —Ñ–æ—Ç–æ —á–µ–∫—É –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑ –≥–∞–ª–µ—Ä–µ—ó\n"
        "2Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î —Å—É–º—É —Ç–∞ —Ç–æ–≤–∞—Ä–∏\n"
        "3Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é\n\n"
        "‚ö° *–©–æ –¥–∞–ª—ñ?*\n"
        "‚Ä¢ –®–≤–∏–¥–∫–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n"
        "‚Ä¢ –ú–∏—Ç—Ç—î–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –≤–∞—à –±—é–¥–∂–µ—Ç\n\n"
        "üí° *–î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:*\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è, —á—ñ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –í–µ—Å—å —á–µ–∫ –≤ –∫–∞–¥—Ä—ñ, –±–µ–∑ –≤—ñ–¥–±–ª–∏—Å–∫—ñ–≤\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–≤–∞—Ç–∏ —á–µ–∫."
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def notify_receipt_ready(query, context):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó —Ñ–æ—Ç–æ —á–µ–∫—É"""
    from database.db_operations import update_user_settings
    
    user_id = query.from_user.id
    update_user_settings(user_id, {"notify_receipt_ready": True})
    
    await query.answer("‚úÖ –ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å, –∫–æ–ª–∏ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –≥–æ—Ç–æ–≤–∞!")
    await show_receipt_photo_soon(query, context)

async def handle_enhanced_add_transaction(query, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    await query.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_add_transaction_menu(query, context)

async def handle_quick_amount_selection(query, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —à–≤–∏–¥–∫–æ—ó —Å—É–º–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–∞–Ω—É —Å—É–º—É
    amount_str = query.data.split('_')[2]
    amount = float(amount_str)
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—É–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['transaction_amount'] = amount
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    await handle_enhanced_add_transaction(query, context)

async def show_quick_amount_buttons(query, context, transaction_type):
    """–ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–±–æ—Ä—É —Å—É–º–∏"""
    keyboard = []
    
    # –¢–∏–ø–æ–≤—ñ —Å—É–º–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    if transaction_type == "expense":
        amounts = [50, 100, 200, 500, 1000]
    else:  # income
        amounts = [1000, 5000, 10000, 15000, 20000]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–±–æ—Ä—É —Å—É–º–∏
    for i in range(0, len(amounts), 3):
        row = []
        for j in range(i, min(i + 3, len(amounts))):
            amount = amounts[j]
            button_text = f"{amount} –≥—Ä–Ω"
            callback_data = f"quick_amount_{amount}"
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        keyboard.append(row)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É
    keyboard.append([InlineKeyboardButton("‚ûï –í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É —Å—É–º—É", callback_data="manual_amount")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manual_transaction_type")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"{'üí∏' if transaction_type == 'expense' else 'üí∞'} *"
        f"{'–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏' if transaction_type == 'expense' else '–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É'}*\n\n"
        "üí≤ **–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É:**\n"
        "–û–±–µ—Ä—ñ—Ç—å –≥–æ—Ç–æ–≤—É —Å—É–º—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_transaction_success(query, context):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    transaction_data = context.user_data.get('transaction_data', {})
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ —ñ–∫–æ–Ω–∫—É
    transaction_type = transaction_data.get('type', 'expense')
    icon = 'üí∏' if transaction_type == 'expense' else 'üí∞'
    type_text = '–≤–∏—Ç—Ä–∞—Ç–∏' if transaction_type == 'expense' else '–¥–æ—Ö–æ–¥—É'
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å—É–º—É
    amount = transaction_data.get('amount', 0)
    currency = transaction_data.get('currency', '‚Ç¥')
    amount_text = f"{amount} {currency}"
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
   
    category = transaction_data.get('category_name', '–ù–µ–≤—ñ–¥–æ–º–æ')
    category_icon = transaction_data.get('category_icon', 'üìÅ')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å (—è–∫—â–æ —î)
    description = transaction_data.get('description', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É
    date_str = transaction_data.get('date_str', '–°—å–æ–≥–æ–¥–Ω—ñ')
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = (
        f"‚úÖ *–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!*\n\n"
        f"{icon} **–¢–∏–ø:** {type_text.capitalize()}\n"
        f"üí∞ **–°—É–º–∞:** {amount_text}\n"
        f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category}\n"
        f"üìù **–û–ø–∏—Å:** {description}\n"
        f"üìÖ **–î–∞—Ç–∞:** {date_str}\n\n"
        f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É –≤–∞—à—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó."
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="add_transaction")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if 'transaction_data' in context.user_data:
        del context.user_data['transaction_data']
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_transactions_pagination(query, context, direction=None):
    """–û–±—Ä–æ–±–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –Ω–∞–ø—Ä—è–º–æ–∫
        if direction is None:
            data = query.data.split('_')
            direction = data[2] if len(data) > 2 else 'next'
        # --- –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞—Ü—é—î–º–æ –∑ transactions_view ---
        if 'transactions_view' not in context.user_data:
            context.user_data['transactions_view'] = {
                'page': 1,
                'per_page': 5,
                'category_id': None,
                'type': None,
                'period': 'month'  # –ú–æ–∂–µ –±—É—Ç–∏ 'all', 'month', 'week', 'day', 'year'
            }
        view_params = context.user_data['transactions_view']
        current_page = view_params.get('page', 1)
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        if direction == 'next':
            view_params['page'] = current_page + 1
        else:  # prev
            view_params['page'] = max(1, current_page - 1)
        context.user_data['transactions_view'] = view_params
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –Ω–æ–≤–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é
        await show_all_transactions(query, context)
    except Exception as e:
        logger.error(f"Error handling pagination: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.")

async def show_transaction_filters(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = context.user_data.get('transaction_filters', {})
        period = filters.get('period', 'month')
        transaction_type = filters.get('type', 'all')
        category = filters.get('category', 'all')
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Ç–æ—á–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        period_text = {
            'day': '–°—å–æ–≥–æ–¥–Ω—ñ',
            'week': '–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å',
            'month': '–¶–µ–π –º—ñ—Å—è—Ü—å',
            'year': '–¶–µ–π —Ä—ñ–∫',
            'all': '–í–µ—Å—å —á–∞—Å'
        }.get(period, '–¶–µ–π –º—ñ—Å—è—Ü—å')
        
        type_text = {
            'income': '–î–æ—Ö–æ–¥–∏',
            'expense': '–í–∏—Ç—Ä–∞—Ç–∏',
            'all': '–£—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó'
        }.get(transaction_type, '–£—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if category != 'all' and isinstance(category, int):
            from database.db_operations import get_user, get_user_categories
            user = get_user(query.from_user.id)
            categories = get_user_categories(user.id)
            category_obj = next((c for c in categories if c.id == category), None)
            category_text = category_obj.name if category_obj else '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è'
        else:
            category_text = '–£—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {period_text}", callback_data="filter_period")],
            [InlineKeyboardButton(f"üíº –¢–∏–ø: {type_text}", callback_data="filter_type")],
            [InlineKeyboardButton(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_text}", callback_data="filter_category")],
            [
                InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", callback_data="reset_transactions_filters"),
                InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ", callback_data="apply_filters")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_transactions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üîç *–§—ñ–ª—å—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*\n\n"
            "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:\n\n"
            f"üìÖ **–ü–µ—Ä—ñ–æ–¥:** {period_text}\n"
            f"üíº **–¢–∏–ø:** {type_text}\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category_text}\n\n"
            "‚û°Ô∏è –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏\n"
            "‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üîç –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    except Exception as e:
        logger.error(f"Error showing filters: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.")

async def reset_transactions_filters(query, context):
    """–°–∫–∏–¥–∞—î –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        # –°–∫–∏–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
        context.user_data['transaction_filters'] = {
            'period': 'month',
            'type': 'all',
            'category': 'all'
        }
        
        # –°–∫–∏–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
       

        context.user_data['transactions_view'] = {
            'page': 1,
            'per_page': 5,
            'category_id': None,
            'type': None,
            'period': 'month'  # –ú–æ–∂–µ –±—É—Ç–∏ 'all', 'month', 'week', 'day', 'year'
        }
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Å–∫–∏–¥–∞–Ω–Ω—è
        await query.answer("‚úÖ –§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ")
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
        await show_all_transactions(query, context)
    
    except Exception as e:
        logger.error(f"Error resetting filters: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.")

async def handle_period_filter(query, context, period=None):
    """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É —Ñ—ñ–ª—å—Ç—Ä–∞ –ø–µ—Ä—ñ–æ–¥—É"""
    try:
        # –Ø–∫—â–æ period –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∞–±–æ –≤—ñ–Ω –¥–æ—Ä—ñ–≤–Ω—é—î 'next', –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É

        if period is None or period == 'next':
            await show_period_filter_menu(query, context)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = context.user_data.get('transaction_filters', {})
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
        filters['period'] = period
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        context.user_data['transaction_filters'] = filters
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        view_params = context.user_data.get('transactions_view', {})
        view_params['period'] = filters['period']
        view_params['page'] = 1   # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        context.user_data['transactions_view'] = view_params
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
        await query.answer(f"‚úÖ –ü–µ—Ä—ñ–æ–¥ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {period}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –µ–∫—Ä–∞–Ω —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        await show_transaction_filters(query, context)
    
    except Exception as e:
        logger.error(f"Error handling period filter: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∞ –ø–µ—Ä—ñ–æ–¥—É.")

async def handle_type_filter(query, context, preset_type=None):
    """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É —Ñ—ñ–ª—å—Ç—Ä–∞ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        # –Ø–∫—â–æ preset_type –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∞–±–æ –≤—ñ–Ω –¥–æ—Ä—ñ–≤–Ω—é—î 'next', –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–∏–ø—É
        if preset_type is None or preset_type == 'next':
            await show_type_filter_menu(query, context)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = context.user_data.get('transaction_filters', {})
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–∏–ø
        filters['type'] = preset_type
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        context.user_data['transaction_filters'] = filters
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        view_params = context.user_data.get('transactions_view', {})
        view_params['type'] = filters['type'] if filters['type'] != 'all' else None
        view_params['page'] = 1  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        context.user_data['transactions_view'] = view_params
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
        type_text = "–î–æ—Ö–æ–¥–∏" if preset_type == "income" else "–í–∏—Ç—Ä–∞—Ç–∏" if preset_type == "expense" else "–í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"
        await query.answer(f"‚úÖ –¢–∏–ø –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {type_text}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –µ–∫—Ä–∞–Ω —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        await show_transaction_filters(query, context)
    
    except Exception as e:
        logger.error(f"Error handling type filter: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∞ —Ç–∏–ø—É.")

async def handle_category_filter(query, context, preset_category=None):
    """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É —Ñ—ñ–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = context.user_data.get('transaction_filters', {})
        
        if preset_category is not None:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
            filters['category'] = preset_category
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
            context.user_data['transaction_filters'] = filters
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            view_params = context.user_data.get('transactions_view', {})
            view_params['category_id'] = preset_category if preset_category != 'all' else None
            view_params['page'] = 1  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            context.user_data['transactions_view'] = view_params
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –µ–∫—Ä–∞–Ω —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            await show_transaction_filters(query, context)
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
            await show_category_filter_menu(query, context, page=1)
    
    except Exception as e:
        logger.error(f"Error handling category filter: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")

async def show_privatbank_statement_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å—É—á–∞—Å–Ω–µ, –ª–∞–∫–æ–Ω—ñ—á–Ω–µ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏ –∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É –∑ —á—ñ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º –∫–Ω–æ–ø–æ–∫."""
    context.user_data['selected_bank'] = 'privatbank'

    keyboard = [
        [InlineKeyboardButton("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel –≤–∏–ø–∏—Å–∫—É (.xlsx)", callback_data="privatbank_excel_guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üè¶ *–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ ‚Äî —ñ–º–ø–æ—Ä—Ç –≤–∏–ø–∏—Å–∫–∏*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ —Ñ–æ—Ä–º–∞—Ç Excel (.xlsx).\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª.\n\n"
        "–ü–µ—Ä–µ–≤–∞–≥–∏ Excel –≤–∏–ø–∏—Å–∫–∏:\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü—ñ—ó\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —É—Å—ñ—Ö –¥–∞–Ω–∏—Ö\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_monobank_statement_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å—É—á–∞—Å–Ω–µ, –ª–∞–∫–æ–Ω—ñ—á–Ω–µ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–ø–∏—Å–∫–∏ –∑ –ú–æ–Ω–æ–ë–∞–Ω–∫—É –∑ —á—ñ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º –∫–Ω–æ–ø–æ–∫."""
    context.user_data['selected_bank'] = 'monobank'

    keyboard = [
        [InlineKeyboardButton("üìã CSV –≤–∏–ø–∏—Å–∫–∞", callback_data="monobank_csv_guide")],
        [InlineKeyboardButton("üìä Excel (.xls/.xlsx)", callback_data="monobank_excel_guide")],
        [InlineKeyboardButton("üìÑ PDF –≤–∏–ø–∏—Å–∫–∞", callback_data="monobank_pdf_guide")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="upload_statement")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üè¶ *–í–∏–ø–∏—Å–∫–∞ –∑ Monobank*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–∏–ø–∏—Å–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:\n"
        "‚Ä¢ üìã CSV ‚Äî —à–≤–∏–¥–∫–æ, –¥–µ—Ç–∞–ª—å–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ\n"
        "‚Ä¢ üìä Excel ‚Äî –∑—Ä—É—á–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n"
        "‚Ä¢ üìÑ PDF ‚Äî –±–∞–∑–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n"
        "–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª —É –¥–æ–¥–∞—Ç–∫—É Monobank:\n"
        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ Monobank —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —ñ–∫–æ–Ω–∫—É –≤–∏–ø–∏—Å–∫–∏ (—Å–ø—Ä–∞–≤–∞ –≤–≥–æ—Ä—ñ)\n"
        "3Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç (CSV, Excel –∞–±–æ PDF)\n"
        "4Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ü–µ–π —á–∞—Ç\n\n"
        "‚ÑπÔ∏è –ù–µ –∑–º—ñ–Ω—é–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä ‚Äî 5 –ú–ë."
    )

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_period_filter_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = context.user_data.get('transaction_filters', {})
        current_period = filters.get('period', 'month')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
        keyboard = [
            [InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="period_day")],
            [InlineKeyboardButton("üìÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="period_week")],
            [InlineKeyboardButton("üìÜ –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å", callback_data="period_month")],
            [InlineKeyboardButton("üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫", callback_data="period_year")],
            [InlineKeyboardButton("üìä –í–µ—Å—å —á–∞—Å", callback_data="period_all")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="transaction_filters")]
        ]
        
        # –í—ñ–¥–º—ñ—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
        period_texts = {
            'day': "–°—å–æ–≥–æ–¥–Ω—ñ",
            'week': "–ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å",
            'month': "–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å",
            'year': "–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫",
            'all': "–í–µ—Å—å —á–∞—Å"
        }
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        await query.edit_message_text(
            f"üìÖ *–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó*\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä: *{period_texts.get(current_period, '–ù–µ –≤–∏–±—Ä–∞–Ω–æ')}*\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    except Exception as e:
        logger.error(f"Error showing period filter menu: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é –ø–µ—Ä—ñ–æ–¥—ñ–≤.")

async def show_type_filter_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = context.user_data.get('transaction_filters', {})
        current_type = filters.get('type', 'all')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
        keyboard = [
            [InlineKeyboardButton("üí∞ –¢—ñ–ª—å–∫–∏ –¥–æ—Ö–æ–¥–∏", callback_data="type_income")],
            [InlineKeyboardButton("üí∏ –¢—ñ–ª—å–∫–∏ –≤–∏—Ç—Ä–∞—Ç–∏", callback_data="type_expense")],
            [InlineKeyboardButton("üìä –í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="type_all")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="transaction_filters")]
        ]
        
        # –í—ñ–¥–º—ñ—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—Ä–∞–Ω–∏–π —Ç–∏–ø
        type_texts = {
            'income': "–¢—ñ–ª—å–∫–∏ –¥–æ—Ö–æ–¥–∏",
            'expense': "–¢—ñ–ª—å–∫–∏ –≤–∏—Ç—Ä–∞—Ç–∏",
            'all': "–í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"
        }
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        await query.edit_message_text(
            f"üíº *–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó*\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä: *{type_texts.get(current_type, '–ù–µ –≤–∏–±—Ä–∞–Ω–æ')}*\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    except Exception as e:
        logger.error(f"Error showing type filter menu: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é —Ç–∏–ø—ñ–≤.")

async def handle_view_single_transaction(query, context):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é"""
    from database.db_operations import get_user, get_transaction_by_id
    
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ callback_data
        transaction_id = int(query.data.split('_')[-1])
        
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        transaction = get_transaction_by_id(transaction_id, user.id)
        if not transaction:
            await query.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        date_str = transaction.transaction_date.strftime("%d.%m.%Y")
        time_str = transaction.transaction_date.strftime("%H:%M")
        type_icon = "üí∞" if transaction.type.value == "income" else "üí∏"
        type_name = "–î–æ—Ö—ñ–¥" if transaction.type.value == "income" else "–í–∏—Ç—Ä–∞—Ç–∞"
        category_name = transaction.category_name if hasattr(transaction, 'category_name') and transaction.category_name else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
        category_icon = transaction.category_icon if hasattr(transaction, 'category_icon') and transaction.category_icon else "üìã"
        description = transaction.description or "–ë–µ–∑ –æ–ø–∏—Å—É"
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å—É–º—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∑–Ω–∞–∫–æ–º
        amount_sign = "+" if transaction.type.value == "income" else ""
        amount_display = f"{amount_sign}{transaction.amount:,.0f} {currency_symbol}"
        
        text = (
            f"{type_icon} *{type_name}*\n\n"
            f"üí∞ **{amount_display}**\n"
            f"{category_icon} {category_name}\n"
            f"üìÖ {date_str} –≤ {time_str}\n\n"
            f"ÔøΩ {description}"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_transaction_{transaction_id}"),
                InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_transaction_{transaction_id}")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="view_all_transactions")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_view_single_transaction: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.", show_alert=True)

async def handle_monobank_excel_upload(query, context):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É –≤—ñ–¥ Monobank"""
    from database.db_operations import import_monobank_excel
    
    try:
        user_id = query.from_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if 'uploaded_file' not in context.user_data:
            await query.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –≤–∏–ø–∏—Å–∫–∏.")
            return
        
        file_info = context.user_data['uploaded_file']
        file_id = file_info['file_id']
        file_name = file_info['file_name']
        file_size = file_info['file_size']
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        await query.answer("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...")
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ Excel —Ñ–∞–π–ª—É
        result = import_monobank_excel(user_id, file_id, file_name, file_size)
        
        if result['success']:
            await query.answer("‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ!")
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ —ñ–º–ø–æ—Ä—Ç—É
            summary = result.get('summary', {})
            imported_count = summary.get('imported_count', 0)
            total_amount = summary.get('total_amount', 0)
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞–ª—é—Ç—É
            user = get_user(user_id)
            currency = user.currency or "UAH"
            currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
            
            text = (
                f"üìä *–Ü–º–ø–æ—Ä—Ç –∑ Monobank - Excel –≤–∏–ø–∏—Å–∫–∞*\n\n"
                f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {imported_count}\n"
                f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:,.2f} {currency_symbol}\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É —Å–≤–æ—î–º—É —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π."
            )
            
            keyboard = [
                [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="view_all_transactions")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É.")
    
    except Exception as e:
        logger.error(f"Error in handle_monobank_excel_upload: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É.", show_alert=True)

async def show_monobank_excel_guide(query, context):
    """–°—É—á–∞—Å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel –≤–∏–ø–∏—Å–∫–∏ Monobank –∑ —á—ñ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º –∫–Ω–æ–ø–∫–∏."""
    keyboard = [
        [InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ Excel —Ñ–∞–π–ª", callback_data="start_excel_upload")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="select_bank_monobank")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üìä *Monobank ‚Äî Excel –≤–∏–ø–∏—Å–∫–∞*\n\n"
        "1Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel —Ñ–∞–π–ª –∑ –¥–æ–¥–∞—Ç–∫—É Monobank:\n"
        "‚Ä¢ –í—ñ–¥–∫—Ä–∏–π—Ç–µ Monobank, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É\n"
        "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —ñ–∫–æ–Ω–∫—É –≤–∏–ø–∏—Å–∫–∏ (—Å–ø—Ä–∞–≤–∞ –≤–≥–æ—Ä—ñ)\n"
        "‚Ä¢ –í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —ñ —Ñ–æ—Ä–º–∞—Ç Excel (.xls/.xlsx)\n"
        "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ü–µ–π —á–∞—Ç\n\n"
        "‚ö†Ô∏è –í–∏–º–æ–≥–∏ –¥–æ —Ñ–∞–π–ª—É:\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: .xls –∞–±–æ .xlsx\n"
        "‚Ä¢ –ù–µ –∑–º—ñ–Ω—é–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
        "‚Ä¢ –†–æ–∑–º—ñ—Ä –¥–æ 10 –ú–ë\n\n"
        "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª."
    )

    context.user_data['awaiting_file'] = 'excel'
    context.user_data['file_source'] = 'monobank'

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_start_receipt_photo_upload(query, context):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —á–µ–∫—É"""
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ —á–µ–∫—É
    context.user_data['awaiting_file'] = 'receipt_photo'
    context.user_data['receipt_step'] = 'waiting_photo'
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="add_transaction")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "ÔøΩ *–§–æ—Ç–æ —á–µ–∫—É ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è*\n\n"
        "1Ô∏è‚É£ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–π—Ç–µ —á–µ–∫ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑ –≥–∞–ª–µ—Ä–µ—ó\n"
        "2Ô∏è‚É£ –ë–æ—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞—î —Å—É–º—É, –º–∞–≥–∞–∑–∏–Ω —Ç–∞ —Ç–æ–≤–∞—Ä–∏\n"
        "3Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –¥–∞–Ω—ñ —ñ –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é\n\n"
        "‚ö° *–©–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î—Ç—å—Å—è:*\n"
        "‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —Ç–∞ –¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏\n"
        "‚Ä¢ –ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)\n\n"
        "ÔøΩ *–î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:*\n"
        "‚Ä¢ –ß—ñ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç, —Ö–æ—Ä–æ—à–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è\n"
        "‚Ä¢ –í–µ—Å—å —á–µ–∫ –≤ –∫–∞–¥—Ä—ñ, –±–µ–∑ –≤—ñ–¥–±–ª–∏—Å–∫—ñ–≤\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —á–µ–∫—É –∑–∞—Ä–∞–∑."
    )
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–Ü–Ø ====================

async def process_transaction_input(update, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ –æ–ø–∏—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        if not context.user_data.get('awaiting_transaction_input'):
            return
        
        user_input = update.message.text.strip()
        transaction_type = context.user_data.get('transaction_type')
        
        # –ü–∞—Ä—Å–∏–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è: —Å—É–º–∞ + –æ–ø–∏—Å
        parts = user_input.split(' ', 1)
        if len(parts) < 1:
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É.\n"
                "–ü—Ä–∏–∫–ª–∞–¥: 450 –ê–¢–ë –ø—Ä–æ–¥—É–∫—Ç–∏"
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—É–º—É
        try:
            amount = float(parts[0].replace(',', '.'))
            if amount <= 0:
                await update.message.reply_text(
                    "‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
                )
                return
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏.\n"
                "–ü—Ä–∏–∫–ª–∞–¥: 450 –∞–±–æ 1500.50"
            )
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å
        description = parts[1] if len(parts) > 1 else "–ë–µ–∑ –æ–ø–∏—Å—É"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data['pending_transaction'] = {
            'amount': amount,
            'description': description,
            'type': transaction_type
        }
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        context.user_data.pop('awaiting_transaction_input', None)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—é
        await perform_auto_categorization(update, context)
        
    except Exception as e:
        logger.error(f"Error in process_transaction_input: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def perform_auto_categorization(update, context):
    """–í–∏–∫–æ–Ω—É—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        from database.db_operations import get_user, get_user_categories, get_category_by_name, create_category
        from services.ml_categorizer import TransactionCategorizer
        
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        transaction_data = context.user_data.get('pending_transaction')
        if not transaction_data:
            await update.message.reply_text("–î–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            return
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä
        categorizer = TransactionCategorizer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        suggested_category = categorizer.categorize_transaction(
            description=transaction_data['description'],
            amount=transaction_data['amount'],
            transaction_type=transaction_data['type']
        )
        
        # –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –Ω–∞–∑–≤–æ—é
        user_categories = get_user_categories(user.id, category_type=transaction_data['type'])
        real_category = None
        
        # –ü–æ—à—É–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –Ω–∞–∑–≤–æ—é
        for category in user_categories:
            if category.name.lower() == suggested_category['name'].lower():
                real_category = {
                    'id': category.id,
                    'name': category.name,
                    'icon': category.icon or suggested_category['icon']
                }
                break
        
        # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
        if not real_category:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
                from database.models import TransactionType as DBTransactionType
                db_type = DBTransactionType.EXPENSE if transaction_data['type'] == 'expense' else DBTransactionType.INCOME
                
                new_category = create_category(
                    user_id=user.id,
                    category_name=suggested_category['name'],
                    category_type=db_type,
                    icon=suggested_category['icon']
                )
                if new_category:
                    real_category = {
                        'id': new_category.id,
                        'name': new_category.name,
                        'icon': new_category.icon or suggested_category['icon']
                    }
                else:
                    # Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                    if user_categories:
                        first_category = user_categories[0]
                        real_category = {
                            'id': first_category.id,
                            'name': first_category.name,
                            'icon': first_category.icon or 'üì¶'
                        }
                    else:
                        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—Ä—É—á–Ω—É.")
                        return
            except Exception as e:
                logger.error(f"Error creating category: {e}")
                # Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                if user_categories:
                    first_category = user_categories[0]
                    real_category = {
                        'id': first_category.id,
                        'name': first_category.name,
                        'icon': first_category.icon or 'üì¶'
                    }
                else:
                    await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—Ä—É—á–Ω—É.")
                    return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó
        type_icon = "üí∏" if transaction_data['type'] == 'expense' else "üí∞"
        amount_str = f"-{transaction_data['amount']:.0f}{currency_symbol}" if transaction_data['type'] == 'expense' else f"+{transaction_data['amount']:.0f}{currency_symbol}"
        
        text = (
            f"ü§ñ *–Ø –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞–≤ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü—ñ—é:*\n\n"
            f"{type_icon} {amount_str} ‚Ä¢ {transaction_data['description']}\n"
            f"üìç *–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–Ω–µ—Å–µ–Ω–æ –¥–æ:* {real_category['icon']} {real_category['name']}\n\n"
            f"–¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['suggested_category'] = real_category
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_auto_category"),
                InlineKeyboardButton("‚ùå –ù—ñ, –∑–º—ñ–Ω–∏—Ç–∏", callback_data="change_category")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in perform_auto_categorization: {e}")
        # –Ø–∫—â–æ –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥
        await update.message.reply_text(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."
        )

async def handle_confirm_auto_category(query, context):
    """–û–±—Ä–æ–±–ª—è—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        transaction_data = context.user_data.get('pending_transaction')
        suggested_category = context.user_data.get('suggested_category')
        
        if not transaction_data or not suggested_category:
            await query.answer("–î–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.", show_alert=True)
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await save_transaction_to_db(query, context, suggested_category['id'])
        
    except Exception as e:
        logger.error(f"Error in handle_confirm_auto_category: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.", show_alert=True)

async def handle_change_category(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ä—É—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        transaction_data = context.user_data.get('pending_transaction')
        if not transaction_data:
            await query.answer("–î–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.", show_alert=True)
            return
        
        from database.db_operations import get_user, get_user_categories
        
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É
        categories = get_user_categories(user.id, category_type=transaction_data['type'])
        
        if not categories:
            await query.edit_message_text(
                "üìÇ *–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π*\n\n"
                "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transaction_filters")]
                ]),
                parse_mode="Markdown"
            )
            return
        
        text = (
            f"üîÑ *–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:*\n\n"
            f"{'üí∏' if transaction_data['type'] == 'expense' else 'üí∞'} "
            f"{transaction_data['amount']:.0f}‚Ç¥ ‚Ä¢ {transaction_data['description']}"
        )
        
        keyboard = []
        
        # –ì—Ä—É–ø—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        for i in range(0, len(categories), 2):
            row = []
            for j in range(i, min(i + 2, len(categories))):
                category = categories[j]
                icon = category.icon or "üìÇ"
                button_text = f"{icon} {category.name}"
                
                row.append(InlineKeyboardButton(
                    button_text, 
                    callback_data=f"select_manual_category_{category.id}"
                ))
            keyboard.append(row)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        keyboard.append([
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_transaction")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_change_category: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

async def handle_manual_category_selection(query, context):
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–∏–π –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ callback_data
        category_id = int(query.data.split('_')[-1])
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await save_transaction_to_db(query, context, category_id)
        
    except Exception as e:
        logger.error(f"Error in handle_manual_category_selection: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.", show_alert=True)

async def save_transaction_to_db(query, context, category_id):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    try:
        from database.db_operations import get_user, add_transaction
        from database.models import TransactionType
        
        user = get_user(query.from_user.id)
        transaction_data = context.user_data.get('pending_transaction')
        
        if not user or not transaction_data:
            await query.answer("–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.", show_alert=True)
            return
        
        # –î–æ–¥–∞–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"Saving transaction: user_id={user.id}, category_id={category_id}, amount={transaction_data['amount']}, description={transaction_data['description']}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transaction_type = TransactionType.EXPENSE if transaction_data['type'] == 'expense' else TransactionType.INCOME
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = add_transaction(
            user_id=user.id,
            amount=transaction_data['amount'],
            description=transaction_data['description'],
            category_id=category_id,
            transaction_type=transaction_type,
            source="manual"
        )
        
        if transaction:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            from database.db_operations import get_category_by_id
            category = get_category_by_id(category_id)
            
            # –î–æ–¥–∞–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            logger.info(f"Retrieved category: id={category.id if category else None}, name={category.name if category else None}")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞–ª—é—Ç—É
            currency = user.currency or "UAH"
            currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
            
            text = (
                f"‚úÖ *–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!*\n\n"
                f"{'üí∏' if transaction_data['type'] == 'expense' else 'üí∞'} {transaction_data['amount']:.0f}‚Ç¥ ‚Ä¢ {transaction_data['description']}\n"
                f"üìÇ {category.icon or 'üìÇ'} {category.name}\n\n"
                f"–©–æ –¥–∞–ª—ñ?"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="add_transaction")],
                [
                    InlineKeyboardButton("üìä –ú—ñ–π –±—é–¥–∂–µ—Ç", callback_data="my_budget_overview"),
                    InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
            context.user_data.pop('pending_transaction', None)
            context.user_data.pop('suggested_category', None)
            context.user_data.pop('transaction_type', None)
            
        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in save_transaction_to_db: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.", show_alert=True)

async def handle_cancel_transaction(query, context):
    """–°–∫–∞—Å–æ–≤—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        # –û—á–∏—â—É—î–º–æ –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        context.user_data.pop('pending_transaction', None)
        context.user_data.pop('suggested_category', None)
        context.user_data.pop('transaction_type', None)
        context.user_data.pop('awaiting_transaction_input', None)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="add_transaction")],
            [InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ùå *–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ*\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_cancel_transaction: {e}")
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

async def show_category_filter_menu(query, context, page=1):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    try:
        from database.db_operations import get_user, get_user_categories
        
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = context.user_data.get('transaction_filters', {})
        current_category = filters.get('category', 'all')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        categories = get_user_categories(user.id)
        
        if not categories:
            await query.edit_message_text(
                "üìÇ *–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π*\n\n"
                "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transaction_filters")]
                ]),
                parse_mode="Markdown"
            )
            return
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ—Ö–æ–¥–∏
        from database.models import TransactionType
        expense_categories = [c for c in categories if c.type == TransactionType.EXPENSE.value]
        income_categories = [c for c in categories if c.type == TransactionType.INCOME.value]
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
        per_page = 8  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        total_categories = len(categories)
        total_pages = max(1, (total_categories + per_page - 1) // per_page)
        page = max(1, min(page, total_pages))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó (–≤–∏—Ç—Ä–∞—Ç–∏ + –¥–æ—Ö–æ–¥–∏)
        all_categories_for_pagination = expense_categories + income_categories
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_categories = all_categories_for_pagination[start_idx:end_idx]
        
        # –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = []
        
        # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é "–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó" —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø–µ—Ä—à—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        if page == 1:
            all_button_text = "‚úÖ –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó" if current_category == 'all' else "üìÇ –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
            keyboard.append([InlineKeyboardButton(all_button_text, callback_data="category_all")])
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑–∞ —Ç–∏–ø–æ–º
        page_expense_categories = [c for c in page_categories if c.type == TransactionType.EXPENSE.value]
        page_income_categories = [c for c in page_categories if c.type == TransactionType.INCOME.value]
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        if page_expense_categories:
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó –≤–∏—Ç—Ä–∞—Ç
            keyboard.append([InlineKeyboardButton("üí∏ ‚îÄ‚îÄ –í–ò–¢–†–ê–¢–ò ‚îÄ‚îÄ", callback_data="noop_header")])
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ 2 –≤ —Ä—è–¥
            current_section_expenses = []
            for category in page_expense_categories:
                icon = category.icon or "üí∏"
                is_selected = current_category == category.id
                button_text = f"‚úÖ {icon} {category.name}" if is_selected else f"{icon} {category.name}"
                current_section_expenses.append((button_text, f"category_{category.id}"))
            
            for i in range(0, len(current_section_expenses), 2):
                row = []
                for j in range(i, min(i + 2, len(current_section_expenses))):
                    button_text, callback_data = current_section_expenses[j]
                    row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                keyboard.append(row)
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
        if page_income_categories:
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –≤–∏—Ç—Ä–∞—Ç–∏, —ñ–Ω–∞–∫—à–µ —Ü–µ –ø–µ—Ä—à–∞ —Å–µ–∫—Ü—ñ—è)
            if page_expense_categories:
                keyboard.append([InlineKeyboardButton("üí∞ ‚îÄ‚îÄ –î–û–•–û–î–ò ‚îÄ‚îÄ", callback_data="noop_header")])
            else:
                keyboard.append([InlineKeyboardButton("üí∞ ‚îÄ‚îÄ –î–û–•–û–î–ò ‚îÄ‚îÄ", callback_data="noop_header")])
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–æ—Ö–æ–¥—ñ–≤ –ø–æ 2 –≤ —Ä—è–¥
            current_section_incomes = []
            for category in page_income_categories:
                icon = category.icon or "üí∞"
                is_selected = current_category == category.id
                button_text = f"‚úÖ {icon} {category.name}" if is_selected else f"{icon} {category.name}"
                current_section_incomes.append((button_text, f"category_{category.id}"))
            
            for i in range(0, len(current_section_incomes), 2):
                row = []
                for j in range(i, min(i + 2, len(current_section_incomes))):
                    button_text, callback_data = current_section_incomes[j]
                    row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                keyboard.append(row)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if total_pages > 1:
            nav_buttons = []
            
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ", callback_data=f"category_page_{page-1}"))
            
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω—ñ ‚û°Ô∏è", callback_data=f"category_page_{page+1}"))
            
            if nav_buttons:  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î
                keyboard.append(nav_buttons)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="transaction_filters")])
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É –ø–æ—Ç–æ—á–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        current_category_name = "–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
        if current_category != 'all' and isinstance(current_category, int):
            category_obj = next((c for c in categories if c.id == current_category), None)
            if category_obj:
                current_category_name = f"{category_obj.icon or 'üìÇ'} {category_obj.name}"
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (
            f"üìÇ *–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞*\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä: *{current_category_name}*\n\n"
        )
        
        if total_pages > 1:
            text += f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –∑ {total_pages} | –í—Å—å–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {total_categories}\n"
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ —Ç–∏–ø–∞–º–∏
        expenses_count = len(expense_categories)
        incomes_count = len(income_categories)
        text += f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏: {expenses_count} | üí∞ –î–æ—Ö–æ–¥–∏: {incomes_count}\n\n"
        
        text += "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É:"
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        context.user_data['category_filter_page'] = page
        
    except Exception as e:
        logger.error(f"Error showing category filter menu: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.")

async def handle_category_page_navigation(query, context):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ callback_data
        page = int(query.data.split('_')[-1])
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é
        await show_category_filter_menu(query, context, page=page)
        
    except Exception as e:
        logger.error(f"Error handling category page navigation: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö.")

async def handle_category_selection_for_filter(query, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞"""
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ callback_data
        if query.data == "category_all":
            category_id = 'all'
        else:
            category_id = int(query.data.split('_')[1])
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
        await handle_category_filter(query, context, preset_category=category_id)
        
    except Exception as e:
        logger.error(f"Error handling category selection: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
