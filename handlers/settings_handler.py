"""
–ú–æ–¥—É–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –±–æ—Ç–∞ FinAssist.
MVP –≤–µ—Ä—Å—ñ—è –∑ –±–∞–∑–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏: —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏, –≤–∞–ª—é—Ç–∞, –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö, –æ—á–∏—â–µ–Ω–Ω—è.
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import csv
import io
import tempfile
import os
import logging

from database.db_operations import (
    get_user, get_user_categories, get_user_transactions,
    update_user_settings
)
from database.models import Session, User, Category, Transaction, TransactionType

logger = logging.getLogger(__name__)

# ==================== –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ ====================

async def show_settings_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="settings_categories"),
                InlineKeyboardButton("üí± –û—Å–Ω–æ–≤–Ω–∞ –≤–∞–ª—é—Ç–∞", callback_data="settings_currency")
            ],
            [
                InlineKeyboardButton("üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="settings_export"),
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="settings_clear_data")
            ],
            [
                InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        text = (
            "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è FinAssist**\n\n"
            "–ö–µ—Ä—É–π—Ç–µ —Å–≤–æ—ó–º –ø—Ä–æ—Ñ—ñ–ª–µ–º —Ç–∞ –¥–∞–Ω–∏–º–∏:\n\n"
            "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó* ‚Äî —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∞—à–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n"
            "üí± *–û—Å–Ω–æ–≤–Ω–∞ –≤–∞–ª—é—Ç–∞* ‚Äî –≤–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
            "üì§ *–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö* ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n"
            "üóëÔ∏è *–û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ* ‚Äî –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n\n"
            "üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –í—Å—ñ –∑–º—ñ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_settings_menu: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]])
        )

# ==================== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–ê–¢–ï–ì–û–†–Ü–Ø–ú–ò ====================

async def show_categories_management(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        expense_categories = get_user_categories(user.id, TransactionType.EXPENSE)
        income_categories = get_user_categories(user.id, TransactionType.INCOME)
        
        text = "üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó**\n\n"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        if expense_categories:
            text += "üí∏ *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:*\n"
            for cat in expense_categories[:8]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 8
                icon = getattr(cat, 'icon', 'üí∏')
                text += f"‚Ä¢ {icon} {cat.name}\n"
            if len(expense_categories) > 8:
                text += f"... —Ç–∞ —â–µ {len(expense_categories) - 8}\n"
        else:
            text += "üí∏ *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:* –≤—ñ–¥—Å—É—Ç–Ω—ñ\n"
        
        text += "\n"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
        if income_categories:
            text += "üí∞ *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:*\n"
            for cat in income_categories[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                icon = getattr(cat, 'icon', 'üí∞')
                text += f"‚Ä¢ {icon} {cat.name}\n"
            if len(income_categories) > 5:
                text += f"... —Ç–∞ —â–µ {len(income_categories) - 5}\n"
        else:
            text += "üí∞ *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:* –≤—ñ–¥—Å—É—Ç–Ω—ñ\n"
        
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="add_category"),
                InlineKeyboardButton("üìã –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="view_all_categories")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="delete_category_select"),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_category_select")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_categories_management: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]])
        )

async def show_add_category_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    keyboard = [
        [
            InlineKeyboardButton("üí∏ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç", callback_data="add_category_expense"),
            InlineKeyboardButton("üí∞ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–æ—Ö–æ–¥—ñ–≤", callback_data="add_category_income")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")
        ]
    ]
    
    text = (
        "‚ûï **–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é**\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n\n"
        "üí∏ *–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç* ‚Äî –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç\n"
        "üí∞ *–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–æ—Ö–æ–¥—ñ–≤* ‚Äî –¥–ª—è —Ç–∏–ø—ñ–≤ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å\n\n"
        "üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_delete_category_select(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        all_categories = get_user_categories(user.id)
        user_categories = [cat for cat in all_categories if not cat.is_default]
        
        if not user_categories:
            text = (
                "üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π**\n\n"
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, —è–∫—ñ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏.\n"
                "–°–∏—Å—Ç–µ–º–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏–¥–∞–ª—è—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞."
            )
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")]]
        else:
            text = "üóëÔ∏è **–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:**\n\n"
            
            keyboard = []
            for cat in user_categories[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 10
                icon = getattr(cat, 'icon', 'üè∑Ô∏è')
                type_emoji = "üí∏" if cat.type == TransactionType.EXPENSE else "üí∞"
                button_text = f"{type_emoji} {icon} {cat.name}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"confirm_delete_cat_{cat.id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")])
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_delete_category_select: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")]])
        )

async def confirm_delete_category(query, context, category_id):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        session = Session()
        category = session.query(Category).filter(Category.id == category_id).first()
        
        if not category:
            await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            session.close()
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —Ü—ñ—î—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
        transactions_count = session.query(Transaction).filter(Transaction.category_id == category_id).count()
        
        text = (
            f"‚ö†Ô∏è **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è**\n\n"
            f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:\n"
            f"**{category.name}**?\n\n"
        )
        
        if transactions_count > 0:
            text += f"‚ö†Ô∏è *–£–≤–∞–≥–∞:* –ó —Ü—ñ—î—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é –ø–æ–≤'—è–∑–∞–Ω–æ {transactions_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.\n"
            text += "–ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—Ç—å—Å—è, –∞–ª–µ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n\n"
        
        text += "‚ùó *–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!*"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_cat_confirmed_{category_id}"),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="delete_category_select")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        session.close()
        
    except Exception as e:
        logger.error(f"Error in confirm_delete_category: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")]])
        )

async def delete_category_confirmed(query, context, category_id):
    """–í–∏–∫–æ–Ω—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        session = Session()
        category = session.query(Category).filter(Category.id == category_id).first()
        
        if not category:
            await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            session.close()
            return
        
        category_name = category.name
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        session.delete(category)
        session.commit()
        session.close()
        
        text = (
            f"‚úÖ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞**\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è **{category_name}** —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞."
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üîô –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="settings_categories"),
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in delete_category_confirmed: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")]])
        )

# ==================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –í–ê–õ–Æ–¢–ò ====================

async def show_currency_settings(query, context):
    """–ü–æ–∫–∞–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏"""
    try:
        user = get_user(query.from_user.id)
        current_currency = getattr(user, 'currency', 'UAH') if user else 'UAH'
        
        currencies = [
            ('UAH', 'üá∫üá¶', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≥—Ä–∏–≤–Ω—è'),
            ('USD', 'üá∫üá∏', '–î–æ–ª–∞—Ä –°–®–ê'),
            ('EUR', 'üá™üá∫', '–Ñ–≤—Ä–æ'),
            ('PLN', 'üáµüá±', '–ü–æ–ª—å—Å—å–∫–∏–π –∑–ª–æ—Ç–∏–π'),
            ('GBP', 'üá¨üáß', '–ë—Ä–∏—Ç–∞–Ω—Å—å–∫–∏–π —Ñ—É–Ω—Ç')
        ]
        
        text = (
            f"üí± **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏**\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞: **{current_currency}**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—É –≤–∞–ª—é—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—É–º:"
        )
        
        keyboard = []
        for code, flag, name in currencies:
            status = " ‚úÖ" if code == current_currency else ""
            button_text = f"{flag} {code} - {name}{status}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_currency_{code}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")])
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_currency_settings: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∞–ª—é—Ç–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]])
        )

async def set_currency(query, context, currency_code):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤—É –≤–∞–ª—é—Ç—É"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        update_user_settings(query.from_user.id, currency=currency_code)
        
        currencies_map = {
            'UAH': ('üá∫üá¶', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≥—Ä–∏–≤–Ω—è'),
            'USD': ('üá∫üá∏', '–î–æ–ª–∞—Ä –°–®–ê'),
            'EUR': ('üá™üá∫', '–Ñ–≤—Ä–æ'),
            'PLN': ('üáµüá±', '–ü–æ–ª—å—Å—å–∫–∏–π –∑–ª–æ—Ç–∏–π'),
            'GBP': ('üá¨üáß', '–ë—Ä–∏—Ç–∞–Ω—Å—å–∫–∏–π —Ñ—É–Ω—Ç')
        }
        
        flag, name = currencies_map.get(currency_code, ('üí±', currency_code))
        
        text = (
            f"‚úÖ **–í–∞–ª—é—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞**\n\n"
            f"–¢–µ–ø–µ—Ä –æ—Å–Ω–æ–≤–Ω–∞ –≤–∞–ª—é—Ç–∞: {flag} **{currency_code}** ({name})\n\n"
            f"–í—Å—ñ —Å—É–º–∏ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —É {currency_code}."
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üí± –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É", callback_data="settings_currency"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in set_currency: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∞–ª—é—Ç–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_currency")]])
        )

# ==================== –ï–ö–°–ü–û–†–¢ –î–ê–ù–ò–• ====================

async def show_export_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        transactions = get_user_transactions(user.id, limit=None)
        transactions_count = len(transactions) if transactions else 0
        
        text = (
            f"üì§ **–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö**\n\n"
            f"–£ –≤–∞—Å —î **{transactions_count}** —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:\n"
            "üìä *CSV* ‚Äî —Ç–∞–±–ª–∏—Ü—è –¥–ª—è Excel/Google Sheets\n\n"
            "üìã *–©–æ –≤–∫–ª—é—á–∞—î—Ç—å—Å—è –≤ –µ–∫—Å–ø–æ—Ä—Ç:*\n"
            "‚Ä¢ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
            "‚Ä¢ –¢–∏–ø (–¥–æ—Ö—ñ–¥/–≤–∏—Ç—Ä–∞—Ç–∞)\n"
            "‚Ä¢ –°—É–º–∞ —Ç–∞ –≤–∞–ª—é—Ç–∞\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è\n"
            "‚Ä¢ –û–ø–∏—Å\n"
            "‚Ä¢ –î–∂–µ—Ä–µ–ª–æ (—Ä—É—á–Ω–µ/—ñ–º–ø–æ—Ä—Ç)\n\n"
            "üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –§–∞–π–ª –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —É —Ü–µ–π —á–∞—Ç"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", callback_data="export_csv"),
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")
            ]
        ]
        
        if transactions_count == 0:
            keyboard[0] = [InlineKeyboardButton("üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É", callback_data="no_data")]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_export_menu: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç—É",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]])
        )

async def export_csv(query, context):
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        await query.edit_message_text("‚è≥ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transactions = get_user_transactions(user.id, limit=None)
        
        if not transactions:
            await query.edit_message_text(
                "üì≠ **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É**\n\n–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_export")]])
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ CSV —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            '–î–∞—Ç–∞', '–ß–∞—Å', '–¢–∏–ø', '–°—É–º–∞', '–í–∞–ª—é—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–û–ø–∏—Å', '–î–∂–µ—Ä–µ–ª–æ'
        ])
        
        # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ
        for transaction in transactions:
            date_str = transaction.transaction_date.strftime('%Y-%m-%d')
            time_str = transaction.transaction_date.strftime('%H:%M:%S')
            type_str = '–î–æ—Ö—ñ–¥' if transaction.type == TransactionType.INCOME else '–í–∏—Ç—Ä–∞—Ç–∞'
            currency = getattr(user, 'currency', 'UAH')
            category_name = transaction.category.name if transaction.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
            source = transaction.source or 'manual'
            
            writer.writerow([
                date_str,
                time_str,
                type_str,
                transaction.amount,
                currency,
                category_name,
                transaction.description,
                source
            ])
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        csv_content = output.getvalue()
        output.close()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        filename = f"finassist_transactions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ bytes –¥–ª—è Telegram
        csv_bytes = csv_content.encode('utf-8-sig')  # BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Excel
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=io.BytesIO(csv_bytes),
            filename=filename,
            caption=f"üìä **–í–∞—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó**\n\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n–§–æ—Ä–º–∞—Ç: CSV (Excel)"
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        keyboard = [
            [
                InlineKeyboardButton("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data="export_csv"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            f"‚úÖ **–§–∞–π–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!**\n\n–í–∞—à—ñ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ CSV —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in export_csv: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_export")]])
        )

# ==================== –û–ß–ò–©–ï–ù–ù–Ø –î–ê–ù–ò–• ====================

async def show_clear_data_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        transactions = get_user_transactions(user.id, limit=None)
        transactions_count = len(transactions) if transactions else 0
        
        text = (
            f"üóëÔ∏è **–û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö**\n\n"
            f"‚ö†Ô∏è **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!\n\n"
            f"–£ –≤–∞—Å —î **{transactions_count}** —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.\n\n"
            "üóëÔ∏è *–©–æ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ:*\n"
            "‚Ä¢ –í—Å—ñ –≤–∞—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏)\n"
            "‚Ä¢ –Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "‚úÖ *–©–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è:*\n"
            "‚Ä¢ –í–∞—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞\n\n"
            "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:* –°–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±—ñ—Ç—å –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö!"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üì§ –°–ø–æ—á–∞—Ç–∫—É –µ–∫—Å–ø–æ—Ä—Ç", callback_data="settings_export")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="confirm_clear_data")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")
            ]
        ]
        
        if transactions_count == 0:
            keyboard[1] = [InlineKeyboardButton("üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", callback_data="no_data")]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_clear_data_menu: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é –æ—á–∏—â–µ–Ω–Ω—è",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]])
        )

async def confirm_clear_data(query, context):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
    try:
        user = get_user(query.from_user.id)
        transactions = get_user_transactions(user.id, limit=None)
        transactions_count = len(transactions) if transactions else 0
        
        text = (
            f"‚ö†Ô∏è **–û–°–¢–ê–¢–û–ß–ù–ï –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø**\n\n"
            f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ **{transactions_count}** —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π?\n\n"
            "‚ùó **–¶–Ø –î–Ü–Ø –ù–ï–ó–í–û–†–û–¢–ù–ê!**\n\n"
            "–ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏ –≤—Ç—Ä–∞—Ç–∏—Ç–µ:\n"
            "‚Ä¢ –í—Å—é —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n"
            "‚Ä¢ –í—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∞–Ω–∞–ª—ñ–∑—É –º–∏–Ω—É–ª–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤\n\n"
            "üí≠ *–ü–æ–¥—É–º–∞–π—Ç–µ –¥–≤—ñ—á—ñ –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º*"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚ùå –ù–Ü, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="settings_clear_data")
            ],
            [
                InlineKeyboardButton("üíÄ –¢–ê–ö, –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–ï", callback_data="clear_data_confirmed")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in confirm_clear_data: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_clear_data")]])
        )

async def clear_data_confirmed(query, context):
    """–í–∏–∫–æ–Ω—É—î –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        await query.edit_message_text("‚è≥ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        session = Session()
        deleted_count = session.query(Transaction).filter(Transaction.user_id == user.id).delete()
        session.commit()
        session.close()
        
        text = (
            f"‚úÖ **–î–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ**\n\n"
            f"–í–∏–¥–∞–ª–µ–Ω–æ **{deleted_count}** —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.\n\n"
            "üéØ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ —á–∏—Å—Ç–æ–≥–æ –∞—Ä–∫—É—à–∞!\n\n"
            "üí° *–ü—ñ–¥–∫–∞–∑–∫–∞:* –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –æ–±–ª—ñ–∫ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤."
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in clear_data_confirmed: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_clear_data")]])
        )

# ==================== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ====================

async def create_category(query, context, category_type, category_name):
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é
        existing_categories = get_user_categories(user.id, category_type)
        if any(cat.name.lower() == category_name.lower() for cat in existing_categories):
            await query.edit_message_text(
                f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category_name}' –≤–∂–µ —ñ—Å–Ω—É—î!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_category")]])
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        session = Session()
        new_category = Category(
            user_id=user.id,
            name=category_name,
            type=category_type,
            icon='üí∏' if category_type == TransactionType.EXPENSE else 'üí∞',
            is_default=False
        )
        session.add(new_category)
        session.commit()
        session.close()
        
        type_text = "–≤–∏—Ç—Ä–∞—Ç" if category_type == TransactionType.EXPENSE else "–¥–æ—Ö–æ–¥—ñ–≤"
        
        text = (
            f"‚úÖ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞**\n\n"
            f"–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è {type_text}:\n"
            f"**{category_name}**\n\n"
            f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ó—ó –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π."
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="add_category"),
                InlineKeyboardButton("üè∑Ô∏è –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="settings_categories")
            ],
            [
                InlineKeyboardButton("üí≥ –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction"),
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in create_category: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_category")]])
        )

# ==================== –û–ë–†–û–ë–ö–ê –°–¢–ê–ù–£ –í–í–û–î–£ ====================

async def handle_category_name_input(update, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    if 'adding_category' not in context.user_data:
        return
    
    category_type = context.user_data['adding_category']
    category_name = update.message.text.strip()
    
    if len(category_name) < 2:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    
    if len(category_name) > 50:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
    del context.user_data['adding_category']
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ fake query –æ–±'—î–∫—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    class FakeQuery:
        def __init__(self, user_id, chat_id):
            self.from_user = type('obj', (object,), {'id': user_id})
            self.message = type('obj', (object,), {'chat_id': chat_id})
        
        async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
            await context.bot.send_message(
                chat_id=self.message.chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    
    fake_query = FakeQuery(update.effective_user.id, update.effective_chat.id)
    await create_category(fake_query, context, category_type, category_name)

async def handle_add_category_type(query, context, category_type):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É"""
    try:
        from database.models import TransactionType
        
        type_text = "–≤–∏—Ç—Ä–∞—Ç" if category_type == "expense" else "–¥–æ—Ö–æ–¥—ñ–≤"
        transaction_type = TransactionType.EXPENSE if category_type == "expense" else TransactionType.INCOME
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['adding_category'] = transaction_type
        
        text = (
            f"‚ûï **–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {type_text}**\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {type_text}:\n\n"
            "üìù *–í–∏–º–æ–≥–∏ –¥–æ –Ω–∞–∑–≤–∏:*\n"
            "‚Ä¢ –í—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤\n"
            "‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞\n"
            "‚Ä¢ –ë–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
            "üí° *–ü—Ä–∏–∫–ª–∞–¥–∏:*\n"
        )
        
        if category_type == "expense":
            text += "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏\n‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n‚Ä¢ –†–æ–∑–≤–∞–≥–∏\n‚Ä¢ –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏"
        else:
            text += "‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞\n‚Ä¢ –§—Ä—ñ–ª–∞–Ω—Å\n‚Ä¢ –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó\n‚Ä¢ –ü–æ–¥–∞—Ä—É–Ω–∫–∏"
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="add_category")]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_add_category_type: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_category")]])
        )

async def show_all_categories(query, context):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        expense_categories = get_user_categories(user.id, TransactionType.EXPENSE)
        income_categories = get_user_categories(user.id, TransactionType.INCOME)
        
        text = "üìã **–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó**\n\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        if expense_categories:
            text += "üí∏ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:**\n"
            for i, cat in enumerate(expense_categories, 1):
                icon = getattr(cat, 'icon', 'üí∏')
                status = " üîß" if cat.is_default else ""
                text += f"{i}. {icon} {cat.name}{status}\n"
        else:
            text += "üí∏ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:** –≤—ñ–¥—Å—É—Ç–Ω—ñ\n"
        
        text += "\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
        if income_categories:
            text += "üí∞ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:**\n"
            for i, cat in enumerate(income_categories, 1):
                icon = getattr(cat, 'icon', 'üí∞')
                status = " üîß" if cat.is_default else ""
                text += f"{i}. {icon} {cat.name}{status}\n"
        else:
            text += "üí∞ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:** –≤—ñ–¥—Å—É—Ç–Ω—ñ\n"
        
        text += "\nüîß - —Å–∏—Å—Ç–µ–º–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏)"
        
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="add_category"),
                InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_category_select")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_all_categories: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_categories")]])
        )
