"""
AI Assistant Handler - –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞ –∑ –ø–æ—Ä–∞–¥–∞–º–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
"""

import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler

from database.db_operations import get_user_transactions, get_user
from database.models import TransactionType
from services.openai_service import OpenAIService
from database.config import OPENAI_API_KEY

logger = logging.getLogger(__name__)
# –¢–∏–º—á–∞—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ DEBUG —Ä—ñ–≤–µ–Ω—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger.setLevel(logging.DEBUG)

# –°—Ç–∞–Ω–∏ –¥–ª—è conversation handler
WAITING_AI_QUESTION = 1

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI —Å–µ—Ä–≤—ñ—Å—É
openai_service = OpenAIService(OPENAI_API_KEY)

async def show_ai_assistant_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞", callback_data="ai_advice"),
                InlineKeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç", callback_data="ai_forecast")
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ AI", callback_data="ai_custom_question")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        text = (
            "ü§ñ **AI-–ø–æ–º—ñ—á–Ω–∏–∫**\n\n"
            "–í–∞—à —Ä–æ–∑—É–º–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:\n\n"
            "üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞**\n"
            "–ê–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç —ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n\n"
            "üîÆ **–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑**\n"
            "–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å\n\n"
            "‚ùì **–ó–∞–ø–∏—Ç–∞—Ç–∏ AI**\n"
            "–û—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è\n\n"
            "üí° *–í—Å—ñ –ø–æ—Ä–∞–¥–∏ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö*"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_ai_assistant_menu: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )

async def handle_ai_advice(query, context):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø–æ—Ä–∞–¥—É"""
    logger.info("Starting handle_ai_advice")
    try:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        logger.debug("Updating message text to loading state")
        await query.edit_message_text(
            "ü§ñ **–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–∏...**\n\n"
            "‚è≥ *–ì–æ—Ç—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó*"
        )
        
        logger.debug("Getting user by telegram ID")
        user = get_user(query.from_user.id)
        if not user:
            logger.warning(f"User not found for telegram ID: {query.from_user.id}")
            await query.edit_message_text(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
                ])
            )
            return
        
        logger.info(f"Found user: {user}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        logger.debug("Getting transactions for last 30 days")
        now = datetime.now()
        start_date = now - timedelta(days=30)
        logger.debug(f"Date range: {start_date} to {now}")
        
        transactions = get_user_transactions(user.id, limit=1000, start_date=start_date, end_date=now)
        logger.info(f"Retrieved {len(transactions)} transactions")
        
        if not transactions:
            logger.info("No transactions found, returning message to user")
            await query.edit_message_text(
                "üìä **–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö**\n\n"
                "–î–ª—è —è–∫—ñ—Å–Ω–∏—Ö –ø–æ—Ä–∞–¥ –¥–æ–¥–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.\n\n"
                "üí° *–ß–∏–º –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö, —Ç–∏–º —Ç–æ—á–Ω—ñ—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó*",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction")],
                    [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
                ]),
                parse_mode="Markdown"
            )
            return
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        logger.info("Starting transaction data preparation")
        transaction_data = []
        logger.info(f"Processing {len(transactions)} transactions")
        
        for i, t in enumerate(transactions):
            logger.debug(f"=== Processing transaction {i} ===")
            try:
                logger.debug(f"Transaction type: {type(t)}")
                logger.debug(f"Transaction object: {t}")
                
                # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                logger.debug(f"Transaction attributes: {dir(t)}")
                for attr in ['amount', 'transaction_date', 'category', 'type', 'description']:
                    if hasattr(t, attr):
                        value = getattr(t, attr)
                        logger.debug(f"  {attr}: {value} (type: {type(value)})")
                    else:
                        logger.debug(f"  {attr}: MISSING")
                
                # –ë–µ–∑–ø–µ—á–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è amount
                if hasattr(t, 'amount'):
                    raw_amount = getattr(t, 'amount')
                    logger.debug(f"Raw amount: {raw_amount} (type: {type(raw_amount)})")
                    
                    if isinstance(raw_amount, (int, float)):
                        amount = float(raw_amount)
                        logger.debug(f"Converted amount (int/float): {amount}")
                    elif isinstance(raw_amount, str):
                        try:
                            amount = float(raw_amount)
                            logger.debug(f"Converted amount (str): {amount}")
                        except ValueError as e:
                            logger.warning(f"Cannot convert string amount to float: {raw_amount}, error: {e}")
                            amount = 0.0
                    elif hasattr(raw_amount, '__float__'):
                        try:
                            amount = float(raw_amount)
                            logger.debug(f"Converted amount (__float__): {amount}")
                        except (ValueError, TypeError) as e:
                            logger.warning(f"Cannot convert amount to float via __float__: {raw_amount}, error: {e}")
                            amount = 0.0
                    elif raw_amount is None:
                        amount = 0.0
                        logger.debug("Amount is None, using 0.0")
                    else:
                        logger.warning(f"Cannot convert amount to float: {type(raw_amount)} = {raw_amount}")
                        amount = 0.0
                else:
                    amount = 0.0
                    logger.debug("No amount attribute, using 0.0")
                
                # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏
                if hasattr(t, 'transaction_date'):
                    logger.debug(f"Date type: {type(t.transaction_date)}, value: {t.transaction_date}")
                    if hasattr(t.transaction_date, 'isoformat'):
                        date_str = t.transaction_date.isoformat()
                    elif isinstance(t.transaction_date, str):
                        date_str = t.transaction_date
                    else:
                        date_str = str(t.transaction_date)
                else:
                    date_str = str(datetime.now().date())
                
                # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                category_name = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
                if hasattr(t, 'category') and t.category:
                    if hasattr(t.category, 'name'):
                        category_name = t.category.name
                    else:
                        category_name = str(t.category)
                
                # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–∏–ø—É
                transaction_type = 'expense'
                if hasattr(t, 'type'):
                    transaction_type = 'expense' if t.type == TransactionType.EXPENSE else 'income'
                
                transaction_data.append({
                    'amount': amount,
                    'category': category_name,
                    'type': transaction_type,
                    'date': date_str,
                    'description': getattr(t, 'description', '') or ''
                })
                
                logger.debug(f"Successfully processed transaction {i}")
                
            except Exception as e:
                logger.error(f"Error processing transaction {i}: {e}")
                logger.error(f"Transaction object: {t}")
                logger.error(f"Transaction dir: {dir(t) if hasattr(t, '__dict__') else 'No __dict__'}")
                continue
        
        logger.info(f"Successfully processed {len(transaction_data)} transactions")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        if not transaction_data:
            await query.edit_message_text(
                "üìä **–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó**\n\n"
                "–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
                ]),
                parse_mode="Markdown"
            )
            return
        
        logger.info("Starting AI advice generation")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä–∞–¥—É –≤—ñ–¥ AI
        advice = await generate_personal_advice(user, transaction_data)
        
        logger.info("AI advice generated successfully")
        
        keyboard = [
            [
                InlineKeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç", callback_data="ai_forecast"),
                InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ AI", callback_data="ai_custom_question")
            ],
            [
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ä–∞–¥—É", callback_data="ai_advice"),
                InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")
            ]
        ]
        
        await query.edit_message_text(
            text=advice,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_ai_advice: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ AI",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
            ])
        )

async def handle_ai_forecast(query, context):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑"""
    try:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        await query.edit_message_text(
            "üîÆ **–°—Ç–≤–æ—Ä—é—é –ø—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç...**\n\n"
            "‚è≥ *–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏*"
        )
        
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
                ])
            )
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 60 –¥–Ω—ñ–≤ –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
        now = datetime.now()
        start_date = now - timedelta(days=60)
        transactions = get_user_transactions(user.id, limit=1000, start_date=start_date, end_date=now)
        
        if len(transactions) < 5:
            await query.edit_message_text(
                "üìä **–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö**\n\n"
                "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –¥–æ–¥–∞–π—Ç–µ —â–µ –∫—ñ–ª—å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.\n\n"
                "üí° *–ú—ñ–Ω—ñ–º—É–º 5 –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É*",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction")],
                    [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
                ]),
                parse_mode="Markdown"
            )
            return
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
        transaction_data = []
        for t in transactions:
            try:
                # –ë–µ–∑–ø–µ—á–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è amount
                if hasattr(t, 'amount'):
                    if isinstance(t.amount, (int, float)):
                        amount = float(t.amount)
                    elif isinstance(t.amount, str):
                        try:
                            amount = float(t.amount)
                        except ValueError:
                            amount = 0.0
                    elif hasattr(t.amount, '__float__'):
                        try:
                            amount = float(t.amount)
                        except (ValueError, TypeError):
                            amount = 0.0
                    elif t.amount is None:
                        amount = 0.0
                    else:
                        amount = 0.0
                else:
                    amount = 0.0
                
                # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏
                if hasattr(t, 'transaction_date'):
                    if hasattr(t.transaction_date, 'isoformat'):
                        date_str = t.transaction_date.isoformat()
                    elif isinstance(t.transaction_date, str):
                        date_str = t.transaction_date
                    else:
                        date_str = str(t.transaction_date)
                else:
                    date_str = str(datetime.now().date())
                
                transaction_data.append({
                    'amount': amount,
                    'category': t.category.name if t.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó',
                    'type': 'expense' if t.type == TransactionType.EXPENSE else 'income',
                    'date': date_str,
                    'description': t.description or ''
                })
            except Exception as e:
                logger.warning(f"Error processing transaction {t}: {e}")
                continue
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥ AI
        forecast = await generate_financial_forecast(user, transaction_data)
        
        keyboard = [
            [
                InlineKeyboardButton("üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞", callback_data="ai_advice"),
                InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ AI", callback_data="ai_custom_question")
            ],
            [
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", callback_data="ai_forecast"),
                InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")
            ]
        ]
        
        await query.edit_message_text(
            text=forecast,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_ai_forecast: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
            ])
        )

async def start_ai_question(update, context):
    """–ü–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ AI"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ query –∑ update
        if hasattr(update, 'callback_query') and update.callback_query:
            query = update.callback_query
        else:
            query = update  # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É CallbackQuery
            
        await query.edit_message_text(
            "‚ùì **–ó–∞–ø–∏—Ç–∞–π—Ç–µ AI**\n\n"
            "–ü–æ—Å—Ç–∞–≤—Ç–µ –±—É–¥—å-—è–∫–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
            "‚Ä¢ –Ø–∫ –∑–∞–æ—â–∞–¥–∏—Ç–∏ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É?\n"
            "‚Ä¢ –ß–∏ –±–∞–≥–∞—Ç–æ –≤–∏—Ç—Ä–∞—á–∞—é –Ω–∞ —ó–∂—É?\n"
            "‚Ä¢ –Ø–∫ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –±—é–¥–∂–µ—Ç?\n"
            "‚Ä¢ –î–µ –º–æ–∂–Ω–∞ –µ–∫–æ–Ω–æ–º–∏—Ç–∏?\n\n"
            "‚úçÔ∏è *–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:*",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="ai_assistant_menu")]
            ]),
            parse_mode="Markdown"
        )
        
        return WAITING_AI_QUESTION
        
    except Exception as e:
        logger.error(f"Error in start_ai_question: {str(e)}")
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ query —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        query = None
        if hasattr(update, 'callback_query') and update.callback_query:
            query = update.callback_query
        elif hasattr(update, 'edit_message_text'):
            query = update
            
        if query:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ—á–∞—Ç–∫—É–≤–∞–Ω–Ω—ñ –¥—ñ–∞–ª–æ–≥—É",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
                ])
            )
        return ConversationHandler.END

async def handle_ai_question(update, context):
    """–û–±—Ä–æ–±–ª—è—î –∫–∞—Å—Ç–æ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ AI"""
    try:
        user_question = update.message.text
        user = get_user(update.effective_user.id)
        
        if not user:
            await update.message.reply_text(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
                ])
            )
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        processing_msg = await update.message.reply_text(
            "‚åõ **–û–±—Ä–æ–±–ª—è—é –ø–∏—Ç–∞–Ω–Ω—è...**\n\n"
            "‚è≥ *–ì–æ—Ç—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å*"
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, limit=1000, start_date=start_date, end_date=now)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
        transaction_data = []
        for t in transactions:
            try:
                # –ë–µ–∑–ø–µ—á–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è amount
                if hasattr(t, 'amount'):
                    if isinstance(t.amount, (int, float)):
                        amount = float(t.amount)
                    elif isinstance(t.amount, str):
                        try:
                            amount = float(t.amount)
                        except ValueError:
                            amount = 0.0
                    elif hasattr(t.amount, '__float__'):
                        try:
                            amount = float(t.amount)
                        except (ValueError, TypeError):
                            amount = 0.0
                    elif t.amount is None:
                        amount = 0.0
                    else:
                        amount = 0.0
                else:
                    amount = 0.0
                
                # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏
                if hasattr(t, 'transaction_date'):
                    if hasattr(t.transaction_date, 'isoformat'):
                        date_str = t.transaction_date.isoformat()
                    elif isinstance(t.transaction_date, str):
                        date_str = t.transaction_date
                    else:
                        date_str = str(t.transaction_date)
                else:
                    date_str = str(datetime.now().date())
                
                transaction_data.append({
                    'amount': amount,
                    'category': t.category.name if t.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó',
                    'type': 'expense' if t.type == TransactionType.EXPENSE else 'income',
                    'date': date_str,
                    'description': t.description or ''
                })
            except Exception as e:
                logger.warning(f"Error processing transaction {t}: {e}")
                continue
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI
        answer = await answer_custom_question(user_question, user, transaction_data)
        
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –©–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ai_custom_question"),
                InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∞", callback_data="ai_advice")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")
            ]
        ]
        
        await processing_msg.edit_text(
            text=answer,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Error in handle_ai_question: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–∏—Ç–∞–Ω–Ω—è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai_assistant_menu")]
            ])
        )
        return ConversationHandler.END

# AI —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É

async def generate_personal_advice(user, transactions):
    """–ì–µ–Ω–µ—Ä—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø–æ—Ä–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        logger.info(f"Generating advice for {len(transactions)} transactions")
        
        # –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
        total_expenses = 0
        total_income = 0
        
        for i, t in enumerate(transactions):
            try:
                logger.debug(f"Processing transaction {i} for advice: {t}")
                
                if not isinstance(t, dict):
                    logger.error(f"Transaction {i} is not a dict: {type(t)} = {t}")
                    continue
                
                amount = t.get('amount', 0)
                trans_type = t.get('type', 'unknown')
                
                logger.debug(f"Transaction {i}: amount={amount} ({type(amount)}), type={trans_type}")
                
                if not isinstance(amount, (int, float)):
                    logger.error(f"Amount is not numeric: {type(amount)} = {amount}")
                    continue
                
                if trans_type == 'expense':
                    total_expenses += amount
                elif trans_type == 'income':
                    total_income += amount
                    
            except Exception as e:
                logger.error(f"Error processing transaction {i} in advice: {e}")
                continue
        
        logger.info(f"Calculated totals: expenses={total_expenses}, income={total_income}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        expense_categories = {}
        for i, t in enumerate(transactions):
            try:
                if t.get('type') == 'expense':
                    cat = t.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó')
                    amount = t.get('amount', 0)
                    expense_categories[cat] = expense_categories.get(cat, 0) + amount
            except Exception as e:
                logger.error(f"Error processing category for transaction {i}: {e}")
                continue
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç
        logger.info(f"Creating prompt with user data")
        logger.debug(f"User object: {user}")
        logger.debug(f"User type: {type(user)}")
        
        # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            monthly_budget = getattr(user, 'monthly_budget', None) or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'
            currency = getattr(user, 'currency', None) or 'UAH'
            logger.debug(f"User budget: {monthly_budget}, currency: {currency}")
        except Exception as e:
            logger.error(f"Error accessing user attributes: {e}")
            monthly_budget = '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'
            currency = 'UAH'
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É —Å–∏—Ç—É–∞—Ü—ñ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        
        –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
        - –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: {monthly_budget} –≥—Ä–Ω
        - –í–∞–ª—é—Ç–∞: {currency}
        
        –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤:
        - –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_expenses:.2f} –≥—Ä–Ω
        - –ó–∞–≥–∞–ª—å–Ω—ñ –¥–æ—Ö–æ–¥–∏: {total_income:.2f} –≥—Ä–Ω
        - –ë–∞–ª–∞–Ω—Å: {total_income - total_expenses:.2f} –≥—Ä–Ω
        
        –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö: {expense_categories}
        
        –î–∞–π 3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
        üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏:**
        
        1. [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ø–æ—Ä–∞–¥–∞]
        2. [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ø–æ—Ä–∞–¥–∞]
        3. [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ø–æ—Ä–∞–¥–∞]
        
        üéØ **–ì–æ–ª–æ–≤–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:** [–Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∞ –ø–æ—Ä–∞–¥–∞]
        
        –ü–æ—Ä–∞–¥–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        """
        
        response = openai_service.client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –î–∞–≤–∞–π –ø–æ—Ä–∞–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Å–ø–µ—Ü–∏—Ñ—ñ–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ä–∏–Ω–∫—É —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ–∫–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"Error generating advice: {str(e)}")
        return (
            "üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏:**\n\n"
            "1. –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –∫–∞—Ä—Ç–∏–Ω–∏\n"
            "2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç —Ç–∞ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –π–æ–≥–æ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—å\n"
            "3. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–æ–Ω–¥ –Ω–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (10-15% –≤—ñ–¥ –¥–æ—Ö–æ–¥—É)\n\n"
            "üéØ **–ì–æ–ª–æ–≤–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:** –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å–≤–æ—ó —Ñ—ñ–Ω–∞–Ω—Å–∏ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∫—Ä–∞—â–∏—Ö —Ä—ñ—à–µ–Ω—å"
        )

async def generate_financial_forecast(user, transactions):
    """–ì–µ–Ω–µ—Ä—É—î —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å"""
    try:
        # –ê–Ω–∞–ª—ñ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π
        monthly_expenses = {}
        for t in transactions:
            try:
                # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏
                if isinstance(t['date'], str):
                    if 'T' in t['date']:
                        date = datetime.fromisoformat(t['date'])
                    else:
                        date = datetime.strptime(t['date'], '%Y-%m-%d')
                else:
                    date = t['date'] if isinstance(t['date'], datetime) else datetime.now()
                
                month_key = date.strftime('%Y-%m')
                if t['type'] == 'expense':
                    monthly_expenses[month_key] = monthly_expenses.get(month_key, 0) + t['amount']
            except Exception as e:
                logger.warning(f"Error processing date {t['date']}: {e}")
                continue
        
        # –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏
        avg_monthly_expenses = sum(monthly_expenses.values()) / max(len(monthly_expenses), 1)
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category_analysis = {}
        for t in transactions:
            if t['type'] == 'expense':
                cat = t['category']
                category_analysis[cat] = category_analysis.get(cat, 0) + t['amount']
        
        prompt = f"""
        –°—Ç–≤–æ—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        
        –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ (–æ—Å—Ç–∞–Ω–Ω—ñ 60 –¥–Ω—ñ–≤):
        - –°–µ—Ä–µ–¥–Ω—ñ –º—ñ—Å—è—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {avg_monthly_expenses:.2f} –≥—Ä–Ω
        - –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö: {monthly_expenses}
        - –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö: {category_analysis}
        - –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.monthly_budget or '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'} –≥—Ä–Ω
        
        –°—Ç–≤–æ—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
        üîÆ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å:**
        
        üìä **–û—á—ñ–∫—É–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:** [—Å—É–º–∞] –≥—Ä–Ω
        
        üìà **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:**
        ‚Ä¢ [–∫–∞—Ç–µ–≥–æ—Ä—ñ—è]: [—Å—É–º–∞] –≥—Ä–Ω
        ‚Ä¢ [–∫–∞—Ç–µ–≥–æ—Ä—ñ—è]: [—Å—É–º–∞] –≥—Ä–Ω
        
        ‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
        ‚Ä¢ [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 1]
        ‚Ä¢ [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 2]
        
        üéØ **–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Ü—ñ–ª—å –Ω–∞ –º—ñ—Å—è—Ü—å:** [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ü—ñ–ª—å]
        
        –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º —Ç–∞ –±–∞–∑—É–≤–∞—Ç–∏—Å—å –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
        """
        
        response = openai_service.client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –°—Ç–≤–æ—Ä—é–π —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
            max_tokens=500
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"Error generating forecast: {str(e)}")
        return (
            "üîÆ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å:**\n\n"
            f"üìä **–û—á—ñ–∫—É–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:** {avg_monthly_expenses:.2f} –≥—Ä–Ω\n\n"
            "üìà **–ü—Ä–æ–≥–Ω–æ–∑ –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∏—Ç—Ä–∞—Ç–∞—Ö**\n\n"
            "‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n"
            "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º –º—ñ—Å—è—Ü—è\n"
            "‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—é–π—Ç–µ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º\n\n"
            "üéØ **–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Ü—ñ–ª—å –Ω–∞ –º—ñ—Å—è—Ü—å:** –î–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É"
        )

async def answer_custom_question(question, user, transactions):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö
        total_expenses = sum(t['amount'] for t in transactions if t['type'] == 'expense')
        total_income = sum(t['amount'] for t in transactions if t['type'] == 'income')
        
        expense_categories = {}
        for t in transactions:
            if t['type'] == 'expense':
                cat = t['category']
                expense_categories[cat] = expense_categories.get(cat, 0) + t['amount']
        
        prompt = f"""
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î: "{question}"
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
        - –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: {user.monthly_budget or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'} –≥—Ä–Ω
        - –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ 30 –¥–Ω—ñ–≤: {total_expenses:.2f} –≥—Ä–Ω
        - –î–æ—Ö–æ–¥–∏ –∑–∞ 30 –¥–Ω—ñ–≤: {total_income:.2f} –≥—Ä–Ω
        - –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö: {expense_categories}
        
        –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—é.
        
        –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        ‚ùì **–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}
        
        üí¨ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:**
        [–¥–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –¥–∞–Ω–∏—Ö]
        
        üí° **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏:**
        ‚Ä¢ [–ø–æ—Ä–∞–¥–∞ 1]
        ‚Ä¢ [–ø–æ—Ä–∞–¥–∞ 2]
        """
        
        response = openai_service.client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ —ó—Ö–Ω—ñ–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏. –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —Ç–∞ –±–∞–∑—É–π –ø–æ—Ä–∞–¥–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"Error answering custom question: {str(e)}")
        return (
            f"‚ùì **–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}\n\n"
            "üí¨ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:**\n"
            "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è. "
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏.\n\n"
            "üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü—ñ—î—é '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞' –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π."
        )
