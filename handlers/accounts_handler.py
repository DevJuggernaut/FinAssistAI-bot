"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
from datetime import datetime
import logging

from database.db_operations import get_or_create_user, get_user_accounts, get_total_balance, get_accounts_count, create_account, transfer_between_accounts
from database.models import AccountType

logger = logging.getLogger(__name__)

async def show_accounts_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫–∞–º–∏"""
    try:
        user = get_or_create_user(query.from_user.id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        accounts_count = get_accounts_count(user.id)
        total_balance = get_total_balance(user.id)
        
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        message = f"üí≥ **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫–∞–º–∏**\n\n"
        message += f"üìä **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:**\n"
        message += f"üè¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—Ö—É–Ω–∫—ñ–≤: `{accounts_count}`\n"
        message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: `{total_balance:,.2f} {currency_symbol}`\n\n"
        message += "üëÜ *–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏:*"
        
        keyboard = [
            [
                InlineKeyboardButton("üìã –ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏", callback_data="accounts_list"),
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add")
            ],
            [
                InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏", callback_data="accounts_transfer")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_accounts_menu: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é —Ä–∞—Ö—É–Ω–∫—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]]),
            parse_mode="Markdown"
        )

async def show_accounts_list(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user = get_or_create_user(query.from_user.id)
        accounts = get_user_accounts(user.id)
        
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        if not accounts:
            message = "üí≥ **–ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏**\n\n"
            message += "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤.\n\n"
            message += "üí° **–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:**\n\n"
            message += "üíµ **–ì–æ—Ç—ñ–≤–∫–∞** ‚Äî –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Ç—Ä–∞—Ç\n"
            message += "üí≥ **–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞** ‚Äî –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫\n"
            message += "üí∞ **–û—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫** ‚Äî –¥–ª—è –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å\n"
            message += "üìà **–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π** ‚Äî –¥–ª—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π\n\n"
            message += "üëÜ *–ü–æ—á–Ω—ñ—Ç—å –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É —Ä–∞—Ö—É–Ω–∫—É*"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add")],
                [InlineKeyboardButton("‚óÄÔ∏è –†–∞—Ö—É–Ω–∫–∏", callback_data="accounts_menu")]
            ]
        else:
            message = f"üí≥ **–ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏**\n\n"
            
            for account in accounts:
                status_emoji = "‚úÖ" if account.is_active else "üîí"
                balance_color = "üíö" if account.balance >= 0 else "üî¥"
                
                message += f"{status_emoji} *{account.name}* {account.icon}\n"
                message += f"   {balance_color} `{account.balance:,.2f} {currency_symbol}`\n"
                message += f"   üè∑Ô∏è {account.account_type.value.replace('_', ' ').title()}"
                if account.is_main:
                    message += " ‚Ä¢ ‚≠ê –ì–æ–ª–æ–≤–Ω–∏–π"
                message += f" ‚Ä¢ üìÖ {account.created_at.strftime('%d.%m.%Y')}\n\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="accounts_settings")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –†–∞—Ö—É–Ω–∫–∏", callback_data="accounts_menu")]
            ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_accounts_list: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–∞—Ö—É–Ω–∫—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –†–∞—Ö—É–Ω–∫–∏", callback_data="accounts_menu")
            ]]),
            parse_mode="Markdown"
        )

async def show_add_account_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É"""
    message = f"‚ûï **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É**\n\n"
    message += "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–∞—Ö—É–Ω–∫—É:\n\n"
    message += "üíµ **–ì–æ—Ç—ñ–≤–∫–∞** ‚Äî –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç\n"
    message += "üí≥ **–ö–∞—Ä—Ç–∫–∞** ‚Äî –¥–µ–±–µ—Ç–æ–≤–∞ –∞–±–æ –∫—Ä–µ–¥–∏—Ç–Ω–∞\n"
    message += "üè¶ **–ë–∞–Ω–∫** ‚Äî –¥–µ–ø–æ–∑–∏—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫\n"
    message += "üí∞ **–û—â–∞–¥–Ω–∏–π** ‚Äî –¥–ª—è –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å\n"
    message += "üìà **–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π** ‚Äî —Ü—ñ–Ω–Ω—ñ –ø–∞–ø–µ—Ä–∏\n"
    message += "üåê **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞** ‚Äî —Ü–∏—Ñ—Ä–æ–≤–∏–π –≥–∞–º–∞–Ω–µ—Ü—å\n\n"
    message += "üëÜ *–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø*"
    
    keyboard = [
        [
            InlineKeyboardButton("üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="accounts_add_cash"),
            InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="accounts_add_card")
        ],
        [
            InlineKeyboardButton("üè¶ –ë–∞–Ω–∫", callback_data="accounts_add_bank"),
            InlineKeyboardButton("üí∞ –û—â–∞–¥–Ω–∏–π", callback_data="accounts_add_savings")
        ],
        [
            InlineKeyboardButton("üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π", callback_data="accounts_add_investment"),
            InlineKeyboardButton("üåê –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="accounts_add_crypto")
        ],
        [
            InlineKeyboardButton("üéØ –Ü–Ω—à–∏–π", callback_data="accounts_add_other")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –†–∞—Ö—É–Ω–∫–∏", callback_data="accounts_menu")
        ]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_account_transfer(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏"""
    user = get_or_create_user(query.from_user.id)
    accounts = get_user_accounts(user.id)
    
    if len(accounts) < 2:
        message = "üí∏ **–ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏**\n\n"
        message += "‚ùå –î–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Ä–∞—Ö—É–Ω–∫–∏.\n\n"
        message += "üí° **–°—Ç–≤–æ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫:**\n"
        message += "‚Ä¢ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞\n"
        message += "‚Ä¢ –û—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫\n"
        message += "‚Ä¢ –ì–æ—Ç—ñ–≤–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫\n\n"
        message += "üëÜ *–ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏*"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")]
        ]
    else:
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        message = "üí∏ **–ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏**\n\n"
        message += "üì§ **–ö—Ä–æ–∫ 1: –û–±–µ—Ä—ñ—Ç—å —Ä–∞—Ö—É–Ω–æ–∫-–¥–∂–µ—Ä–µ–ª–æ**\n\n"
        message += "–û–±–µ—Ä—ñ—Ç—å —Ä–∞—Ö—É–Ω–æ–∫, –∑ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑–∞—Ç–∏ –∫–æ—à—Ç–∏:\n\n"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–∞—Ö—É–Ω–∫–∏ –∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        available_accounts = [acc for acc in accounts if acc.balance > 0]
        
        if not available_accounts:
            message = "üí∏ **–ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏**\n\n"
            message += "‚ùå –ù–µ–º–∞—î —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ—à—Ç–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.\n\n"
            message += "üí° **–î–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–∞—Ö—É–Ω–æ–∫ –∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º:**\n"
            message += "‚Ä¢ –î–æ–¥–∞–π—Ç–µ –¥–æ—Ö–æ–¥–∏ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤\n"
            message += "‚Ä¢ –ê–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º\n\n"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥", callback_data="add_income")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")]
            ]
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏
            for account in available_accounts:
                balance_text = f"{account.balance:,.2f} {currency_symbol}"
                message += f"{account.icon} **{account.name}**\n"
                message += f"   üí∞ `{balance_text}`\n\n"
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–∞—Ö—É–Ω–∫—É-–¥–∂–µ—Ä–µ–ª–∞
            keyboard = []
            for account in available_accounts:
                button_text = f"{account.icon} {account.name} ({account.balance:,.0f} {currency_symbol})"
                callback_data = f"transfer_from_{account.id}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_transfer_destination(query, context, from_account_id):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É"""
    user = get_or_create_user(query.from_user.id)
    accounts = get_user_accounts(user.id)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–∞—Ö—É–Ω–æ–∫-–¥–∂–µ—Ä–µ–ª–æ
    from_account = next((acc for acc in accounts if acc.id == from_account_id), None)
    if not from_account:
        await query.edit_message_text(
            "‚ùå –†–∞—Ö—É–Ω–æ–∫-–¥–∂–µ—Ä–µ–ª–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")
            ]]),
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ —Ä–∞—Ö—É–Ω–∫–∏ —è–∫ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    destination_accounts = [acc for acc in accounts if acc.id != from_account_id]
    
    currency = user.currency or "UAH"
    currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
    
    message = "üí∏ **–ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏**\n\n"
    message += f"üì§ **–î–∂–µ—Ä–µ–ª–æ:** {from_account.icon} {from_account.name}\n"
    message += f"   üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: `{from_account.balance:,.2f} {currency_symbol}`\n\n"
    message += "üìã **–ö—Ä–æ–∫ 2: –û–±–µ—Ä—ñ—Ç—å —Ä–∞—Ö—É–Ω–æ–∫-–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è**\n\n"
    
    if not destination_accounts:
        message += "‚ùå –ù–µ–º–∞—î —ñ–Ω—à–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É."
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="accounts_transfer")]]
    else:
        for account in destination_accounts:
            balance_text = f"{account.balance:,.2f} {currency_symbol}"
            message += f"{account.icon} **{account.name}**\n"
            message += f"   üí∞ `{balance_text}`\n\n"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–∞—Ö—É–Ω–∫—É-–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        keyboard = []
        for account in destination_accounts:
            button_text = f"{account.icon} {account.name}"
            callback_data = f"transfer_to_{from_account_id}_{account.id}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞", callback_data="accounts_transfer")])
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Ä–∞—Ö—É–Ω–∫—É-–¥–∂–µ—Ä–µ–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['transfer_from_account'] = from_account_id
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_transfer_amount_input(query, context, from_account_id, to_account_id):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –ø–µ—Ä–µ–∫–∞–∑—É"""
    user = get_or_create_user(query.from_user.id)
    accounts = get_user_accounts(user.id)
    
    from_account = next((acc for acc in accounts if acc.id == from_account_id), None)
    to_account = next((acc for acc in accounts if acc.id == to_account_id), None)
    
    if not from_account or not to_account:
        await query.edit_message_text(
            "‚ùå –û–¥–∏–Ω –∑ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")
            ]]),
            parse_mode="Markdown"
        )
        return
    
    currency = user.currency or "UAH"
    currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
    
    message = "üí∏ **–ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏**\n\n"
    message += f"üì§ **–ó —Ä–∞—Ö—É–Ω–∫—É:** {from_account.icon} {from_account.name}\n"
    message += f"   üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: `{from_account.balance:,.2f} {currency_symbol}`\n\n"
    message += f"üì• **–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫:** {to_account.icon} {to_account.name}\n"
    message += f"   üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: `{to_account.balance:,.2f} {currency_symbol}`\n\n"
    message += "üìã **–ö—Ä–æ–∫ 3: –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–µ—Ä–µ–∫–∞–∑—É**\n\n"
    message += f"üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –≤ {currency_symbol}:\n\n"
    message += "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
    message += "‚Ä¢ `1000` ‚Äî –æ–¥–Ω–∞ —Ç–∏—Å—è—á–∞\n"
    message += "‚Ä¢ `500.50` ‚Äî –∑ –∫–æ–ø—ñ–π–∫–∞–º–∏\n"
    message += f"‚Ä¢ `{from_account.balance:,.0f}` ‚Äî –≤–µ—Å—å –±–∞–ª–∞–Ω—Å\n\n"
    message += f"üëÜ *–ú–∞–∫—Å–∏–º—É–º: {from_account.balance:,.2f} {currency_symbol}*\n\n"
    message += "‚úçÔ∏è **–ù–∞–ø–∏—à—ñ—Ç—å —Å—É–º—É –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ**"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –í–∏–±—ñ—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è", callback_data=f"transfer_from_{from_account_id}")]
    ]
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä–µ–∫–∞–∑—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['transfer_data'] = {
        'from_account_id': from_account_id,
        'to_account_id': to_account_id
    }
    context.user_data['awaiting_transfer_amount'] = True
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def execute_transfer(query, context, from_account_id, to_account_id, amount):
    """–í–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏"""
    try:
        user = get_or_create_user(query.from_user.id)
        accounts = get_user_accounts(user.id)
        
        from_account = next((acc for acc in accounts if acc.id == from_account_id), None)
        to_account = next((acc for acc in accounts if acc.id == to_account_id), None)
        
        if not from_account or not to_account:
            await query.edit_message_text(
                "‚ùå –û–¥–∏–Ω –∑ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")
                ]]),
                parse_mode="Markdown"
            )
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
        success, message_text = transfer_between_accounts(
            from_account_id=from_account_id,
            to_account_id=to_account_id,
            amount=amount,
            description="–ü–µ—Ä–µ–∫–∞–∑ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
        )
        
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        if success:
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É
            updated_accounts = get_user_accounts(user.id)
            updated_from = next((acc for acc in updated_accounts if acc.id == from_account_id), None)
            updated_to = next((acc for acc in updated_accounts if acc.id == to_account_id), None)
            
            success_message = "‚úÖ **–ü–µ—Ä–µ–∫–∞–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**\n\n"
            success_message += f"üí∏ **–ü–µ—Ä–µ–∫–∞–∑–∞–Ω–æ:** `{amount:,.2f} {currency_symbol}`\n\n"
            success_message += f"üì§ **–ó —Ä–∞—Ö—É–Ω–∫—É:** {from_account.icon} {from_account.name}\n"
            if updated_from:
                success_message += f"   üí∞ –ó–∞–ª–∏—à–æ–∫: `{updated_from.balance:,.2f} {currency_symbol}`\n\n"
            success_message += f"üì• **–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫:** {to_account.icon} {to_account.name}\n"
            if updated_to:
                success_message += f"   üí∞ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: `{updated_to.balance:,.2f} {currency_symbol}`\n\n"
            success_message += f"üìÖ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            success_message += "üí° **–ü–µ—Ä–µ–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π**"
            
            keyboard = [
                [
                    InlineKeyboardButton("üìã –ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏", callback_data="accounts_list"),
                    InlineKeyboardButton("üîÑ –©–µ –ø–µ—Ä–µ–∫–∞–∑", callback_data="accounts_transfer")
                ],
                [
                    InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]
            ]
        else:
            success_message = f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–∞–∑—É**\n\n"
            success_message += f"–î–µ—Ç–∞–ª—ñ: {message_text}\n\n"
            success_message += "üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
            success_message += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É\n"
            success_message += "‚Ä¢ –†–∞—Ö—É–Ω–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π\n"
            success_message += "‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞\n\n"
            success_message += "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="accounts_transfer"),
                    InlineKeyboardButton("üìã –ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏", callback_data="accounts_list")
                ],
                [
                    InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]
            ]
        
        await query.edit_message_text(
            success_message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä–µ–∫–∞–∑—É
        context.user_data.pop('transfer_data', None)
        context.user_data.pop('awaiting_transfer_amount', None)
        
    except Exception as e:
        logger.error(f"Error executing transfer: {str(e)}")
        await query.edit_message_text(
            f"‚ùå **–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–∞–∑—É**\n\n"
            f"–î–µ—Ç–∞–ª—ñ: {str(e)}\n\n"
            f"üí° –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –±–æ—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")
            ]]),
            parse_mode="Markdown"
        )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ä–∞—Ö—É–Ω–∫—ñ–≤
async def create_cash_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –≥–æ—Ç—ñ–≤–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'cash',
        'icon': 'üíµ',
        'name_template': '–ì–æ—Ç—ñ–≤–∫–∞'
    }
    await show_account_name_input(query, context)

async def create_card_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏"""
    context.user_data['account_creation'] = {
        'type': 'card', 
        'icon': 'üí≥',
        'name_template': '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞'
    }
    await show_account_name_input(query, context)

async def create_bank_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'bank',
        'icon': 'üè¶', 
        'name_template': '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def create_savings_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –æ—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'savings',
        'icon': 'üí∞',
        'name_template': '–û—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def create_investment_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'investment',
        'icon': 'üìà',
        'name_template': '–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def create_crypto_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'crypto',
        'icon': 'üåê',
        'name_template': '–ö—Ä–∏–ø—Ç–æ–≥–∞–º–∞–Ω–µ—Ü—å'
    }
    await show_account_name_input(query, context)

async def create_other_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—à–∏–π —Ç–∏–ø —Ä–∞—Ö—É–Ω–∫—É"""
    context.user_data['account_creation'] = {
        'type': 'other',
        'icon': 'üéØ',
        'name_template': '–Ü–Ω—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def show_account_name_input(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ä–∞—Ö—É–Ω–∫—É"""
    account_data = context.user_data.get('account_creation', {})
    account_type = account_data.get('name_template', '–ù–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫')
    icon = account_data.get('icon', 'üí≥')
    
    message = f"{icon} **–ö—Ä–æ–∫ 1: –ù–∞–∑–≤–∞ —Ä–∞—Ö—É–Ω–∫—É**\n\n"
    message += "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É:\n\n"
    message += "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
    message += "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ä—Ç–∫–∞\n"
    message += "‚Ä¢ –ì–æ—Ç—ñ–≤–∫–∞\n"
    message += "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫\n"
    message += "‚Ä¢ –û—â–∞–¥–∂–µ–Ω–Ω—è\n\n"
    message += f"üëÜ *–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ: {account_type}*\n\n"
    message += "üìã *–ù–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º –±—É–¥–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É*"
    
    keyboard = [
        [InlineKeyboardButton(f"‚úÖ {account_type}", callback_data="accounts_use_default_name")],
        [InlineKeyboardButton("‚óÄÔ∏è –¢–∏–ø —Ä–∞—Ö—É–Ω–∫—É", callback_data="accounts_add")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="accounts_menu")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è
    context.user_data['awaiting_account_name'] = True

async def use_default_account_name(query, context):
    """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞–∑–≤—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É"""
    account_data = context.user_data.get('account_creation', {})
    account_name = account_data.get('name_template', '–ù–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫')
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    context.user_data['account_creation']['name'] = account_name
    await show_account_balance_input(query, context)

async def show_account_balance_input(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É"""
    account_data = context.user_data.get('account_creation', {})
    account_name = account_data.get('name', '–ù–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫')
    icon = account_data.get('icon', 'üí≥')
    
    user = get_or_create_user(query.from_user.id)
    currency = user.currency or "UAH"
    currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
    
    message = f"{icon} **–ö—Ä–æ–∫ 2: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å**\n\n"
    message += f"üìù –†–∞—Ö—É–Ω–æ–∫: *{account_name}*\n\n"
    message += f"üí∞ –í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É –≤ {currency_symbol}:\n\n"
    message += "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
    message += "‚Ä¢ `5000` ‚Äî –ø'—è—Ç—å —Ç–∏—Å—è—á\n"
    message += "‚Ä¢ `12500.50` ‚Äî –∑ –∫–æ–ø—ñ–π–∫–∞–º–∏\n"
    message += "‚Ä¢ `0` ‚Äî –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫\n\n"
    message += f"‚úçÔ∏è **–ù–∞–ø–∏—à—ñ—Ç—å —Å—É–º—É –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ**"
    
    keyboard = [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–≤–∞ —Ä–∞—Ö—É–Ω–∫—É", callback_data="accounts_edit_name"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="accounts_menu")
        ]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    context.user_data['awaiting_account_balance'] = True



async def create_account_with_balance(query, context, account_name, balance):
    """–°—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–∫–∞–∑–∞–Ω–æ—é –Ω–∞–∑–≤–æ—é —Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º"""
    try:
        user = get_or_create_user(query.from_user.id)
        account_data = context.user_data.get('account_creation', {})
        
        # –ú–∞–ø–∏–º–æ —Ç–∏–ø–∏ –∑ —Ç–∏—Ö, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ UI, –Ω–∞ AccountType –∑ –º–æ–¥–µ–ª—ñ
        type_mapping = {
            'cash': AccountType.CASH,
            'card': AccountType.BANK_CARD,
            'bank': AccountType.BANK_CARD,  # –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫ —è–∫ –∫–∞—Ä—Ç–∫–∞
            'savings': AccountType.SAVINGS,
            'investment': AccountType.INVESTMENT,
            'crypto': AccountType.OTHER,  # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —è–∫ —ñ–Ω—à–µ
            'other': AccountType.OTHER
        }
        
        account_type_key = account_data.get('type', 'other')
        account_type = type_mapping.get(account_type_key, AccountType.OTHER)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        new_account = create_account(
            user_id=user.id,
            name=account_name,
            account_type=account_type,
            balance=balance,
            currency=user.currency or 'UAH',
            is_main=False,  # –ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
            icon=account_data.get('icon', 'üí≥'),
            description=f"–°—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ - {account_type_key.title()}"
        )
        
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(user.currency or 'UAH', '‚Ç¥')
        
        success_message = f"‚úÖ **–†–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
        success_message += f"{account_data.get('icon', 'üí≥')} **{account_name}**\n"
        success_message += f"üìù –¢–∏–ø: {account_type_key.replace('_', ' ').title()}\n"
        success_message += f"üí∞ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: `{balance:,.2f} {currency_symbol}`\n"
        success_message += f"üÜî ID —Ä–∞—Ö—É–Ω–∫—É: `{new_account.id}`\n\n"
        
        if balance > 0:
            success_message += "üí° **–†–∞—Ö—É–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!**\n"
            success_message += "‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ñ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏\n"
            success_message += "‚Ä¢ –ü–µ—Ä–µ–∫–∞–∑—É–π—Ç–µ –∫–æ—à—Ç–∏ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏\n"
            success_message += "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É\n"
            success_message += "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Ö—É–Ω–∫—É"
        else:
            success_message += "üí° **–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º:**\n"
            success_message += "‚Ä¢ –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π –¥–æ—Ö—ñ–¥ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è\n"
            success_message += "‚Ä¢ –í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∫–æ—à—Ç–∏ —è–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é\n"
            success_message += "‚Ä¢ –ü–µ—Ä–µ–∫–∞–∑—É–π—Ç–µ –∫–æ—à—Ç–∏ –∑ —ñ–Ω—à–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤"
        
        keyboard = [
            [
                InlineKeyboardButton("üìã –ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏", callback_data="accounts_list"),
                InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ", callback_data="accounts_add")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            success_message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É
        context.user_data.pop('account_creation', None)
        context.user_data.pop('awaiting_account_name', None)
        context.user_data.pop('awaiting_account_balance', None)
        
    except Exception as e:
        logger.error(f"Error creating account: {str(e)}")
        await query.edit_message_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É**\n\n"
            f"–î–µ—Ç–∞–ª—ñ: {str(e)}\n\n"
            f"üí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤", callback_data="accounts_menu")
            ]]),
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É (–±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –≤ text_handler)
async def handle_account_text_input(message, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–ª—è —Ä–∞—Ö—É–Ω–∫—ñ–≤"""
    logger.info(f"handle_account_text_input called with text: '{message.text}'")
    logger.info(f"Context user_data: {context.user_data}")
    
    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ä–∞—Ö—É–Ω–∫—É
    if context.user_data.get('awaiting_account_name'):
        logger.info("Processing as account name input")
        account_name = message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ –Ω–∞–∑–≤–∏
        if len(account_name) > 50:
            await message.reply_text(
                "‚ùå **–ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞**\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: 50 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                "–ü–æ—Ç–æ—á–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: {}\n\n"
                "üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç—à—É –Ω–∞–∑–≤—É".format(len(account_name)),
                parse_mode="Markdown"
            )
            return True
        
        if len(account_name) < 2:
            await message.reply_text(
                "‚ùå **–ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞**\n\n"
                "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: 2 —Å–∏–º–≤–æ–ª–∏\n\n"
                "üí° –í–≤–µ–¥—ñ—Ç—å –±—ñ–ª—å—à –æ–ø–∏—Å–æ–≤—É –Ω–∞–∑–≤—É",
                parse_mode="Markdown"
            )
            return True
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        forbidden_chars = ['<', '>', '&', '"', "'", '`']
        if any(char in account_name for char in forbidden_chars):
            await message.reply_text(
                "‚ùå **–ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏**\n\n"
                f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏: {', '.join(forbidden_chars)}\n\n"
                "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –±–∞–∑–æ–≤—ñ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó",
                parse_mode="Markdown"
            )
            return True
        
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            context.user_data['account_creation']['name'] = account_name
            context.user_data.pop('awaiting_account_name', None)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–µ query –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            class FakeQuery:
                def __init__(self, message):
                    self.message = message
                    self.from_user = message.from_user
                    
                async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                    await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            
            fake_query = FakeQuery(message)
            await show_account_balance_input(fake_query, context)
            
        except Exception as e:
            logger.error(f"Error handling account name input: {str(e)}")
            await message.reply_text(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞–∑–≤–∏ —Ä–∞—Ö—É–Ω–∫—É**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                parse_mode="Markdown"
            )
        
        return True  # –í–∫–∞–∑—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–µ
    
    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É
    elif context.user_data.get('awaiting_account_balance'):
        logger.info("Processing as account balance input")
        balance_text = message.text.strip()
        
        try:
            # –ü–∞—Ä—Å–∏–º–æ —Å—É–º—É
            balance = float(balance_text.replace(',', '.'))
            
            if balance < 0:
                await message.reply_text(
                    "‚ùå **–í—ñ–¥'—î–º–Ω–∏–π –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω–∏–π**\n\n"
                    "üí° –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É —Å—É–º—É –∞–±–æ 0",
                    parse_mode="Markdown"
                )
                return True
            
            if balance > 999999999:
                await message.reply_text(
                    "‚ùå **–°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞**\n\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 999,999,999\n\n"
                    "üí° –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∞–ª—å–Ω—É —Å—É–º—É",
                    parse_mode="Markdown"
                )
                return True
                
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–≤–µ–¥–µ–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º
            account_data = context.user_data.get('account_creation', {})
            account_name = account_data.get('name', '–ù–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫')
            
            class FakeQuery:
                def __init__(self, message):
                    self.message = message
                    self.from_user = message.from_user
                    
                async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                    await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            
            fake_query = FakeQuery(message)
            await create_account_with_balance(fake_query, context, account_name, balance)
            
        except ValueError:
            await message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏**\n\n"
                "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:**\n"
                "‚Ä¢ `5000`\n"
                "‚Ä¢ `12500.50`\n"
                "‚Ä¢ `0`\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error handling account balance input: {str(e)}")
            await message.reply_text(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                parse_mode="Markdown"
            )
        
        return True  # –í–∫–∞–∑—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–µ
    
    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –ø–µ—Ä–µ–∫–∞–∑—É
    elif context.user_data.get('awaiting_transfer_amount'):
        amount_text = message.text.strip()
        transfer_data = context.user_data.get('transfer_data', {})
        
        try:
            # –ü–∞—Ä—Å–∏–º–æ —Å—É–º—É
            amount = float(amount_text.replace(',', '.'))
            
            if amount <= 0:
                await message.reply_text(
                    "‚ùå **–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è**\n\n"
                    "üí° –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É",
                    parse_mode="Markdown"
                )
                return True
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å
            user = get_or_create_user(message.from_user.id)
            accounts = get_user_accounts(user.id)
            from_account = next((acc for acc in accounts if acc.id == transfer_data.get('from_account_id')), None)
            
            if not from_account:
                await message.reply_text(
                    "‚ùå **–†–∞—Ö—É–Ω–æ–∫-–¥–∂–µ—Ä–µ–ª–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**\n\n"
                    "üí° –ü–æ—á–Ω—ñ—Ç—å –ø–µ—Ä–µ–∫–∞–∑ –∑–∞–Ω–æ–≤–æ",
                    parse_mode="Markdown"
                )
                return True
            
            if amount > from_account.balance:
                currency = user.currency or "UAH"
                currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
                await message.reply_text(
                    f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤**\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: `{from_account.balance:,.2f} {currency_symbol}`\n"
                    f"–ó–∞–ø–∏—Ç–∞–Ω–æ: `{amount:,.2f} {currency_symbol}`\n\n"
                    f"üí° –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –Ω–µ –±—ñ–ª—å—à–µ {from_account.balance:,.2f}",
                    parse_mode="Markdown"
                )
                return True
                
            # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
            class FakeQuery:
                def __init__(self, message):
                    self.message = message
                    self.from_user = message.from_user
                    
                async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                    await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            
            fake_query = FakeQuery(message)
            await execute_transfer(
                fake_query, 
                context, 
                transfer_data.get('from_account_id'), 
                transfer_data.get('to_account_id'), 
                amount
            )
            
        except ValueError:
            await message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏**\n\n"
                "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:**\n"
                "‚Ä¢ `1000`\n"
                "‚Ä¢ `500.50`\n"
                "‚Ä¢ `250`\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error handling transfer amount input: {str(e)}")
            await message.reply_text(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                parse_mode="Markdown"
            )
        
        return True  # –í–∫–∞–∑—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–µ
    
    return False  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–µ —Ü–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–æ–º

# –¶–µ–π —Ñ–∞–π–ª –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î —Å–∏–º—É–ª—å–æ–≤–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π, 
# –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–µ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ database.db_operations
