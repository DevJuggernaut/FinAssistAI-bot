"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import logging

from database.db_operations import get_or_create_user, get_user_accounts, get_total_balance, get_accounts_count, create_account, get_accounts_statistics
from database.models import AccountType

logger = logging.getLogger(__name__)

async def show_accounts_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫–∞–º–∏"""
    try:
        user = get_or_create_user(query.from_user.id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        accounts_count = get_accounts_count(user.id)
        total_balance = get_total_balance(user.id)
        
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        message = f"üí≥ *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫–∞–º–∏*\n\n"
        message += f"üìä *–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:*\n"
        message += f"üè¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—Ö—É–Ω–∫—ñ–≤: `{accounts_count}`\n"
        message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: `{total_balance:,.2f} {currency_symbol}`\n\n"
        message += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        
        keyboard = [
            [
                InlineKeyboardButton("üìã –ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏", callback_data="accounts_list"),
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add")
            ],
            [
                InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏", callback_data="accounts_transfer"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="accounts_stats")
            ],
            [
                InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_accounts_menu: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é —Ä–∞—Ö—É–Ω–∫—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]]),
            parse_mode="Markdown"
        )

async def show_accounts_list(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user = get_or_create_user(query.from_user.id)
        accounts = get_user_accounts(user.id)
        
        currency = user.currency or "UAH"
        currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
        
        if not accounts:
            message = "üí≥ *–ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏*\n\n"
            message += "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤.\n\n"
            message += "üí° *–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫:*\n"
            message += "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ (–≥–æ—Ç—ñ–≤–∫–∞)\n"
            message += "‚Ä¢ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞\n"
            message += "‚Ä¢ –û—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫\n"
            message += "‚Ä¢ –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")]
            ]
        else:
            message = f"üí≥ *–ú–æ—ó —Ä–∞—Ö—É–Ω–∫–∏*\n\n"
            
            for account in accounts:
                status_emoji = "‚úÖ" if account.is_active else "üîí"
                balance_color = "üíö" if account.balance >= 0 else "üî¥"
                
                message += f"{status_emoji} *{account.name}* {account.icon}\n"
                message += f"   {balance_color} `{account.balance:,.2f} {currency_symbol}`\n"
                message += f"   üè∑Ô∏è {account.account_type.value.replace('_', ' ').title()}"
                if account.is_main:
                    message += " ‚Ä¢ ‚≠ê –ì–æ–ª–æ–≤–Ω–∏–π"
                message += f" ‚Ä¢ üìÖ {account.created_at.strftime('%d.%m.%Y')}\n\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏", callback_data="accounts_settings")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")]
            ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_accounts_list: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–∞—Ö—É–Ω–∫—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")
            ]]),
            parse_mode="Markdown"
        )

async def show_add_account_form(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É"""
    message = f"‚ûï *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É*\n\n"
    message += "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–∞—Ö—É–Ω–∫—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏:\n\n"
    message += "üíµ *–ì–æ—Ç—ñ–≤–∫–∞* - –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç\n"
    message += "üí≥ *–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞* - –¥–µ–±–µ—Ç–æ–≤–∞ –∞–±–æ –∫—Ä–µ–¥–∏—Ç–Ω–∞ –∫–∞—Ä—Ç–∫–∞\n"
    message += "üè¶ *–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫* - –¥–µ–ø–æ–∑–∏—Ç–Ω–∏–π –∞–±–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫\n"
    message += "üí∞ *–û—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫* - –¥–ª—è –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å\n"
    message += "üìà *–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π* - –¥–ª—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π —Ç–∞ —Ü—ñ–Ω–Ω–∏—Ö –ø–∞–ø–µ—Ä—ñ–≤\n"
    message += "üåê *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞* - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å\n"
    message += "üéØ *–Ü–Ω—à–∏–π* - —ñ–Ω—à–∏–π —Ç–∏–ø —Ä–∞—Ö—É–Ω–∫—É"
    
    keyboard = [
        [
            InlineKeyboardButton("üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="accounts_add_cash"),
            InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="accounts_add_card")
        ],
        [
            InlineKeyboardButton("üè¶ –ë–∞–Ω–∫", callback_data="accounts_add_bank"),
            InlineKeyboardButton("üí∞ –û—â–∞–¥–Ω–∏–π", callback_data="accounts_add_savings")
        ],
        [
            InlineKeyboardButton("üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π", callback_data="accounts_add_investment"),
            InlineKeyboardButton("üåê –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="accounts_add_crypto")
        ],
        [
            InlineKeyboardButton("üéØ –Ü–Ω—à–∏–π", callback_data="accounts_add_other")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")
        ]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_account_transfer(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏"""
    user = get_or_create_user(query.from_user.id)
    accounts = get_user_accounts(user.id)
    
    if len(accounts) < 2:
        message = "üí∏ *–ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏*\n\n"
        message += "‚ùå –î–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Ä–∞—Ö—É–Ω–∫–∏.\n\n"
        message += "–°—Ç–≤–æ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–∞–∑—ñ–≤."
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="accounts_add")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")]
        ]
    else:
        message = "üí∏ *–ü–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏*\n\n"
        message += "–ù–∞ –¥–∞–Ω–æ–º—É –µ—Ç–∞–ø—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–∞–∑—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n\n"
        message += "üí° *–°–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
        message += "‚Ä¢ –ú–∏—Ç—Ç—î–≤—ñ –ø–µ—Ä–µ–∫–∞–∑–∏ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏\n"
        message += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–∞–∑–∏ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º\n"
        message += "‚Ä¢ –Ü—Å—Ç–æ—Ä—ñ—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–∫–∞–∑—ñ–≤\n"
        message += "‚Ä¢ –ö–æ–º—ñ—Å—ñ—ó —Ç–∞ –ª—ñ–º—ñ—Ç–∏"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")]
        ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_accounts_stats(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Ö—É–Ω–∫–∞—Ö"""
    user = get_or_create_user(query.from_user.id)
    stats = get_accounts_statistics(user.id)
    
    currency = user.currency or "UAH"
    currency_symbol = {"UAH": "‚Ç¥", "USD": "$", "EUR": "‚Ç¨", "GBP": "¬£"}.get(currency, currency)
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Ö—É–Ω–∫—ñ–≤*\n\n"
    
    if stats['total_accounts'] == 0:
        message += "üì≠ –ù–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    else:
        message += f"üè¶ *–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:*\n"
        message += f"‚Ä¢ –í—Å—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤: `{stats['total_accounts']}`\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤: `{stats['active_accounts']}`\n"
        message += f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: `{stats['total_balance']:,.2f} {currency_symbol}`\n\n"
        
        message += f"üí∞ *–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ç–∏–ø–∞–º–∏:*\n"
        for account_type, data in stats['by_type'].items():
            message += f"‚Ä¢ {data['icon']} {account_type}: `{data['balance']:,.2f} {currency_symbol}` ({data['count']} —Ä–∞—Ö.)\n"
        
        message += f"\nüìà *–î–∏–Ω–∞–º—ñ–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å:*\n"
        message += f"‚Ä¢ –ü—Ä–∏—Ä—ñ—Å—Ç –±–∞–ª–∞–Ω—Å—É: `{stats['monthly_growth']:,.2f} {currency_symbol}`\n"
        message += f"‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π: `{stats['monthly_transactions']}`\n"
    
    keyboard = [
        [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç", callback_data="accounts_detailed_report")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ä–∞—Ö—É–Ω–∫—ñ–≤
async def create_cash_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –≥–æ—Ç—ñ–≤–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'cash',
        'icon': 'üíµ',
        'name_template': '–ì–æ—Ç—ñ–≤–∫–∞'
    }
    await show_account_name_input(query, context)

async def create_card_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏"""
    context.user_data['account_creation'] = {
        'type': 'card', 
        'icon': 'üí≥',
        'name_template': '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞'
    }
    await show_account_name_input(query, context)

async def create_bank_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'bank',
        'icon': 'üè¶', 
        'name_template': '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def create_savings_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –æ—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'savings',
        'icon': 'üí∞',
        'name_template': '–û—â–∞–¥–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def create_investment_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'investment',
        'icon': 'üìà',
        'name_template': '–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def create_crypto_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫"""
    context.user_data['account_creation'] = {
        'type': 'crypto',
        'icon': 'üåê',
        'name_template': '–ö—Ä–∏–ø—Ç–æ–≥–∞–º–∞–Ω–µ—Ü—å'
    }
    await show_account_name_input(query, context)

async def create_other_account(query, context):
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—à–∏–π —Ç–∏–ø —Ä–∞—Ö—É–Ω–∫—É"""
    context.user_data['account_creation'] = {
        'type': 'other',
        'icon': 'üéØ',
        'name_template': '–Ü–Ω—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫'
    }
    await show_account_name_input(query, context)

async def show_account_name_input(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ä–∞—Ö—É–Ω–∫—É"""
    account_data = context.user_data.get('account_creation', {})
    account_type = account_data.get('name_template', '–ù–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫')
    icon = account_data.get('icon', 'üí≥')
    
    message = f"{icon} *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É: {account_type}*\n\n"
    message += "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –≤–∞—à–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É:\n\n"
    message += "üí° *–ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–∞–∑–≤:*\n"
    message += "‚Ä¢ –ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ä—Ç–∫–∞\n"
    message += "‚Ä¢ –ì–æ—Ç—ñ–≤–∫–∞ –≤ –≥–∞–º–∞–Ω—Ü—ñ\n"
    message += "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ - –∑–∞—Ä–ø–ª–∞—Ç–∞\n"
    message += "‚Ä¢ –û—â–∞–¥–Ω–∏–π —Ñ–æ–Ω–¥\n\n"
    message += "–ê–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –Ω–∞–∑–≤–æ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:"
    
    keyboard = [
        [InlineKeyboardButton(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏: {account_type}", callback_data="accounts_use_default_name")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Ç–∏–ø—ñ–≤", callback_data="accounts_add")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="accounts_menu")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è
    context.user_data['awaiting_account_name'] = True

async def use_default_account_name(query, context):
    """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞–∑–≤—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É"""
    account_data = context.user_data.get('account_creation', {})
    account_name = account_data.get('name_template', '–ù–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –∑ –Ω–∞–∑–≤–æ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    await create_account_with_name(query, context, account_name)

async def create_account_with_name(query, context, account_name):
    """–°—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–∫–∞–∑–∞–Ω–æ—é –Ω–∞–∑–≤–æ—é"""
    try:
        user = get_or_create_user(query.from_user.id)
        account_data = context.user_data.get('account_creation', {})
        
        # TODO: –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≤ –ë–î
        # create_user_account(user.id, account_name, account_data['type'], account_data['icon'])
        
        success_message = f"‚úÖ *–†–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!*\n\n"
        success_message += f"{account_data.get('icon', 'üí≥')} *{account_name}*\n"
        success_message += f"üìù –¢–∏–ø: {account_data.get('type', 'unknown').title()}\n"
        success_message += f"üí∞ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: `0.00 ‚Ç¥`\n\n"
        success_message += "üí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        success_message += "‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–æ —Ü—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É\n"
        success_message += "‚Ä¢ –ü–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏ –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏\n"
        success_message += "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –±–∞–ª–∞–Ω—Å —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é –æ–ø–µ—Ä–∞—Ü—ñ–π"
        
        keyboard = [
            [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–∞—Ö—É–Ω–∫–∏", callback_data="accounts_list")],
            [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω", callback_data="accounts_add")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            success_message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É
        context.user_data.pop('account_creation', None)
        context.user_data.pop('awaiting_account_name', None)
        
    except Exception as e:
        logger.error(f"Error creating account: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_menu")
            ]]),
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É (–±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –≤ text_handler)
async def handle_account_name_input(message, context):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    if context.user_data.get('awaiting_account_name'):
        account_name = message.text.strip()
        
        if len(account_name) > 50:
            await message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞ —Ä–∞—Ö—É–Ω–∫—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.",
                parse_mode="Markdown"
            )
            return
        
        if len(account_name) < 2:
            await message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞ —Ä–∞—Ö—É–Ω–∫—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏.",
                parse_mode="Markdown"
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–µ query –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏
        class FakeQuery:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user
                
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
        fake_query = FakeQuery(message)
        await create_account_with_name(fake_query, context, account_name)
        
        return True  # –í–∫–∞–∑—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–µ
    
    return False  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–µ —Ü–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–æ–º

# –¶–µ–π —Ñ–∞–π–ª –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î —Å–∏–º—É–ª—å–æ–≤–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π, 
# –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–µ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ database.db_operations
