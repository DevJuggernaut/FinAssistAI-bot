import re
import os
import logging
from typing import Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
from database.models import User, Transaction, TransactionType
from database.session import Session
from database.db_operations import (
    get_user,
    add_transaction,
    get_user_transactions,
    update_user_settings,
    get_user_categories
)
from services.statement_parser import statement_parser, receipt_processor
from services.ml_categorizer import transaction_categorizer
from services.openai_service import openai_service
from services.analytics_service import analytics_service
from services.mida_receipt_parser import mida_receipt_parser
from services.free_receipt_parser import free_receipt_parser

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—î—é
        if context.user_data.get('awaiting_transaction_input'):
            from handlers.transaction_handler import process_transaction_input
            await process_transaction_input(update, context)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–µ–¥–∞–≥—É—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        if 'editing_transaction_id' in context.user_data and 'editing_field' in context.user_data:
            await handle_transaction_edit_input(update, context)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω—ñ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        if 'transaction_data' in context.user_data:
            transaction_data = context.user_data['transaction_data']
            
            if transaction_data.get('step') == 'amount':
                # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ callback_handler
                from handlers.callback_handler import handle_transaction_amount_input
                await handle_transaction_amount_input(update, context)
                return
            elif transaction_data.get('step') == 'description':
                # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ callback_handler
                from handlers.callback_handler import handle_transaction_description_input
                await handle_transaction_description_input(update, context)
                return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        if 'category_creation' in context.user_data:
            from handlers.callback_handler import handle_category_creation_input
            await handle_category_creation_input(update, context)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞—î –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–Ω–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞)
        if 'adding_category' in context.user_data:
            from handlers.settings_handler import handle_category_name_input
            await handle_category_name_input(update, context)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫
        if context.user_data.get('awaiting_account_name'):
            from handlers.accounts_handler import handle_account_name_input
            handled = await handle_account_name_input(update.message, context)
            if handled:
                return
        
        # –Ø–∫—â–æ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if context.user_data.get('awaiting_amount'):
            try:
                amount = float(update.message.text.replace(',', '.'))
                context.user_data['transaction_amount'] = amount
                context.user_data.pop('awaiting_amount', None)
                ttype = context.user_data.get('transaction_type', 'expense').upper()
                if ttype not in ('EXPENSE', 'INCOME'):
                    ttype = 'EXPENSE'
                add_transaction(
                    user_id=user.id,
                    amount=amount,
                    description="",
                    category_id=int(context.user_data.get('category_id')) if context.user_data.get('category_id') else None,
                    transaction_type=ttype
                )
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="add_transaction")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!\n–°—É–º–∞: {amount} –≥—Ä–Ω",
                    reply_markup=reply_markup
                )
                context.user_data.pop('transaction_type', None)
                context.user_data.pop('category_id', None)
                context.user_data.pop('transaction_amount', None)
                return
            except ValueError:
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="add_transaction")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 150.50)",
                    reply_markup=reply_markup
                )
                return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É —Ñ–æ—Ä–º–∞—Ç—ñ "—Å—É–º–∞ –æ–ø–∏—Å"
        match = re.match(r'^(\d+(?:\.\d+)?)\s+(.+)$', update.message.text)
        if match:
            amount = float(match.group(1))
            description = match.group(2)
            
            add_transaction(
                user_id=user.id,
                amount=amount,
                description=description,
                category_id=None,  # –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
                transaction_type='expense'
            )
            
            await update.message.reply_text(
                f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!\n"
                f"–°—É–º–∞: {amount} –≥—Ä–Ω\n"
                f"–û–ø–∏—Å: {description}"
            )
            return
        
        # –Ø–∫—â–æ —Ü–µ –Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
        await update.message.reply_text(
            "üìù –©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é, –Ω–∞–ø–∏—à—ñ—Ç—å —Å—É–º—É —Ç–∞ –æ–ø–∏—Å.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 100 –ü—Ä–æ–¥—É–∫—Ç–∏\n\n"
            "–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add"
        )
    except Exception as e:
        logger.error(f"Error handling text message: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

async def handle_financial_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º OpenAI"""
    question = update.message.text.strip()
    
    thinking_message = await update.message.reply_text(
        "ü§î –û–±–¥—É–º—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è..."
    )
    
    try:
        from database.db_operations import get_or_create_user
        from services.financial_advisor import answer_user_question
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        telegram_id = update.effective_user.id
        user = get_or_create_user(
            telegram_id=telegram_id, 
            username=update.effective_user.username,
            first_name=update.effective_user.first_name,
            last_name=update.effective_user.last_name
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        answer = answer_user_question(user.id, question)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await thinking_message.edit_text(
            f"üí° –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n\n{answer}"
        )
    except Exception as e:
        await thinking_message.edit_text(
            f"‚ùå –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: {str(e)}\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
        )

async def handle_advice_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É –ø–æ—Ä–∞–¥—É"""
    await update.message.reply_text("ü§î –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Ä–∞–¥–∏...")
    
    try:
        from database.db_operations import get_or_create_user
        from services.financial_advisor import FinancialAdvisor
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        telegram_id = update.effective_user.id
        user = get_or_create_user(
            telegram_id=telegram_id, 
            username=update.effective_user.username,
            first_name=update.effective_user.first_name,
            last_name=update.effective_user.last_name
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä–∞–¥–Ω–∏–∫–∞
        advisor = FinancialAdvisor(user.id)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ—Ä–∞–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –∑–∞–ø–∏—Ç—É
        text = update.message.text.lower()
        
        if any(keyword in text for keyword in ['–∑–∞–æ—â–∞–¥–∏—Ç–∏', '–∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è', '–µ–∫–æ–Ω–æ–º–∏—Ç–∏', '–µ–∫–æ–Ω–æ–º—ñ—è']):
            advice_type = 'savings'
        elif any(keyword in text for keyword in ['—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', '—ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏', '–≤–∫–ª–∞–¥–∞—Ç–∏', '–≤–∫–ª–∞–¥–µ–Ω–Ω—è']):
            advice_type = 'investment'
        elif any(keyword in text for keyword in ['–±—é–¥–∂–µ—Ç', '–ø–ª–∞–Ω—É–≤–∞—Ç–∏', '–≤–∏—Ç—Ä–∞—Ç–∏', '–≤–∏—Ç—Ä–∞—á–∞—Ç–∏']):
            advice_type = 'budget'
        else:
            advice_type = 'general'
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Ä–∞–¥—É
        advice = advisor.generate_financial_advice(advice_type)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ä–∞–¥—É
        await update.message.reply_text(
            f"üí° –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –ø–æ—Ä–∞–¥–∞:\n\n{advice}"
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ä–∞–¥–∏: {str(e)}\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏ /help."
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —á–µ–∫—ñ–≤"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        os.makedirs('uploads', exist_ok=True)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
        file_path = f'uploads/receipt_{user.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'
        await file.download_to_drive(file_path)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        processing_message = await update.message.reply_text(
            "üîç –†–æ–∑–ø—ñ–∑–Ω–∞—é —á–µ–∫...\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥"
        )
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —è–∫ MIDA —á–µ–∫
        receipt_data = mida_receipt_parser.parse_receipt(file_path)
        
        # –Ø–∫—â–æ MIDA –ø–∞—Ä—Å–µ—Ä –Ω–µ –≤–ø–æ—Ä–∞–≤—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–∞—Ä—Å–µ—Ä
        if not receipt_data:
            receipt_data = free_receipt_parser.parse_receipt(file_path)
        
        if not receipt_data or receipt_data.get('total_amount', 0) <= 0:
            await processing_message.edit_text(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–µ–∫. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ:\n"
                "‚Ä¢ –§–æ—Ç–æ —á—ñ—Ç–∫–µ —ñ –¥–æ–±—Ä–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–µ\n"
                "‚Ä¢ –í–µ—Å—å —á–µ–∫ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è –≤ –∫–∞–¥—Ä\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç –Ω–∞ —á–µ–∫—É –¥–æ–±—Ä–µ —á–∏—Ç–∞—î—Ç—å—Å—è"
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ MIDA —á–µ–∫ –∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        if 'categorized_items' in receipt_data and receipt_data['categorized_items']:
            await processing_message.edit_text("‚úÖ –ß–µ–∫ MIDA —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è MIDA
            await send_mida_receipt_summary(update, receipt_data, user)
        else:
            # –ó–≤–∏—á–∞–π–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —ñ–Ω—à–∏—Ö —á–µ–∫—ñ–≤
            try:
                category, confidence = transaction_categorizer.predict_category(
                    receipt_data.get('raw_text', '') or receipt_data.get('store_name', '–ü–æ–∫—É–ø–∫–∞')
                )
            except:
                # –Ø–∫—â–æ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–≤—á–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                category = 'groceries'
                confidence = 0.5
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ "–Ü–Ω—à–µ"
            user_categories = get_user_categories(user.id)
            category_id = None
            for cat in user_categories:
                if cat.name.lower() == category.lower():
                    category_id = cat.id
                    break
            
            # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É –∞–±–æ None
            if not category_id and user_categories:
                category_id = user_categories[0].id
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            context.user_data['pending_receipt'] = {
                'amount': receipt_data['total_amount'],
                'description': f"–ü–æ–∫—É–ø–∫–∞ –≤ {receipt_data.get('store_name', '–º–∞–≥–∞–∑–∏–Ω—ñ')}",
                'category_id': category_id,
                'transaction_date': receipt_data.get('date', datetime.now()),
                'file_path': file_path,
                'store_name': receipt_data.get('store_name', '–ù–µ–≤—ñ–¥–æ–º–æ'),
                'category': category,
                'confidence': confidence
            }
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–æ–¥–∞—Ç–∏", callback_data="confirm_receipt_add"),
                    InlineKeyboardButton("‚ùå –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await processing_message.edit_text(
                f"‚úÖ –ß–µ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ!\n\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {receipt_data.get('store_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"üí∞ –°—É–º–∞: {receipt_data['total_amount']:.2f} –≥—Ä–Ω\n"
                f"üìÖ –î–∞—Ç–∞: {receipt_data.get('date', datetime.now()).strftime('%d.%m.%Y')}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
                f"üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.1%}",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error handling photo: {str(e)}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —á–µ–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


async def send_mida_receipt_summary(update: Update, receipt_data: Dict, user):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ —á–µ–∫—É MIDA –∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    try:
        categorized_items = receipt_data.get('categorized_items', {})
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_parts = [
            "üõí **–ß–µ–∫ MIDA —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**\n",
            f"üí∞ **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:** {receipt_data['total_amount']:.2f} –≥—Ä–Ω",
            f"üìÖ **–î–∞—Ç–∞:** {receipt_data.get('date', datetime.now()).strftime('%d.%m.%Y')}\n"
        ]
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
        total_saved = 0
        for category, data in categorized_items.items():
            if isinstance(data, dict) and 'items' in data:
                items = data['items']
                category_total = data['total_amount']
                item_count = data['item_count']
                
                message_parts.append(f"üìÇ **{category.title()}** ({item_count} –ø–æ–∑.): {category_total:.2f} –≥—Ä–Ω")
                
                # –î–æ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 3 –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è)
                for i, item in enumerate(items[:3]):
                    message_parts.append(f"   ‚Ä¢ {item['name']}: {item['price']:.2f} –≥—Ä–Ω")
                
                if len(items) > 3:
                    message_parts.append(f"   ‚Ä¢ ... —Ç–∞ —â–µ {len(items) - 3} —Ç–æ–≤–∞—Ä—ñ–≤")
                
                message_parts.append("")  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                user_categories = get_user_categories(user.id)
                category_id = None
                for cat in user_categories:
                    if cat.name.lower() == category.lower():
                        category_id = cat.id
                        break
                
                # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É
                if not category_id and user_categories:
                    category_id = user_categories[0].id
                
                # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                add_transaction(
                    user_id=user.id,
                    amount=category_total,
                    description=f"MIDA - {category} ({item_count} —Ç–æ–≤–∞—Ä—ñ–≤)",
                    category_id=category_id,
                    transaction_type=TransactionType.EXPENSE,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ enum –∑–Ω–∞—á–µ–Ω–Ω—è
                    transaction_date=receipt_data.get('date', datetime.now()),
                    source='mida_receipt'
                )
                total_saved += category_total
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        message_parts.append(f"‚úÖ **–°—Ç–≤–æ—Ä–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—É–º—É:** {total_saved:.2f} –≥—Ä–Ω")
        message_parts.append(f"üìä **–ö–∞—Ç–µ–≥–æ—Ä—ñ–π:** {len(categorized_items)}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await update.message.reply_text(
            "\n".join(message_parts),
            parse_mode="Markdown"
        )
        
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [
                InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats"),
                InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç", callback_data="show_charts")
            ],
            [
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error sending MIDA receipt summary: {str(e)}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É –ø–æ —á–µ–∫—É")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –≤–∏–ø–∏—Å–æ–∫"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ —Ñ–∞–π–ª –≤–∏–ø–∏—Å–∫–∏
        if context.user_data.get('waiting_for_statement', False):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ callback_handler
            from handlers.callback_handler import handle_statement_upload
            await handle_statement_upload(update, context)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        document = update.message.document
        file = await context.bot.get_file(document.file_id)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        os.makedirs('uploads', exist_ok=True)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
        file_path = f'uploads/statement_{user.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}{os.path.splitext(document.file_name)[1]}'
        await file.download_to_drive(file_path)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–ø–∏—Å–∫—É
        transactions = statement_parser.parse_bank_statement(file_path)
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        added_count = 0
        for transaction in transactions:
            # –ö–∞—Ç–µ–≥–æ—Ä—ñ–∑—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            category, confidence = transaction_categorizer.predict_category(transaction['description'])
            
            transaction_data = {
                'user_id': user.id,
                'amount': transaction['amount'],
                'description': transaction['description'],
                'category': category,
                'type': transaction['type'],
                'date': transaction['date'],
                'source': 'bank_statement'
            }
            
            add_transaction(transaction_data)
            added_count += 1
        
        await update.message.reply_text(
            f"–í–∏–ø–∏—Å–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–æ!\n"
            f"–î–æ–¥–∞–Ω–æ {added_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π."
        )
    except Exception as e:
        logger.error(f"Error handling document: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–ø–∏—Å–∫–∏.")

async def handle_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /report"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date, end_date)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
        report = analytics_service.generate_monthly_report(transactions)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        summary = report['summary']
        await update.message.reply_text(
            f"üìä –ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç\n\n"
            f"–î–æ—Ö–æ–¥–∏: {summary['total_income']:.2f}\n"
            f"–í–∏—Ç—Ä–∞—Ç–∏: {summary['total_expenses']:.2f}\n"
            f"–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {summary['net_savings']:.2f}\n"
            f"–ù–æ—Ä–º–∞ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {summary['savings_rate']:.1f}%"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏
        for viz_type, viz_data in report['visualizations'].items():
            if viz_data:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
                await update.message.reply_photo(
                    photo=viz_data,
                    caption=f"–ì—Ä–∞—Ñ—ñ–∫: {viz_type}"
                )
    except Exception as e:
        logger.error(f"Error generating report: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É.")

async def handle_advice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /advice"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ
        end_date = datetime.now()
        start_date = end_date - timedelta(days=90)
        transactions = get_user_transactions(user.id, start_date, end_date)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Ä–∞–¥–∏
        advice = openai_service.generate_financial_advice(transactions)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ä–∞–¥–∏
        await update.message.reply_text(
            f"üí° –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏\n\n"
            f"–ê–Ω–∞–ª—ñ–∑ —Å–∏—Ç—É–∞—Ü—ñ—ó:\n{advice['analysis']}\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:\n" + "\n".join(f"‚Ä¢ {rec}" for rec in advice['recommendations']) + "\n\n"
            f"–û–±–ª–∞—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:\n" + "\n".join(f"‚Ä¢ {area}" for area in advice['improvement_areas'])
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–ª–∞–Ω–∏
        await update.message.reply_text(
            f"üìÖ –ü–ª–∞–Ω–∏\n\n"
            f"–ö–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤–∏–π –ø–ª–∞–Ω:\n{advice['short_term_plan']}\n\n"
            f"–î–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏–π –ø–ª–∞–Ω:\n{advice['long_term_plan']}"
        )
    except Exception as e:
        logger.error(f"Error generating advice: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ä–∞–¥.")

async def handle_analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /analyze"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∞–Ω–∞–ª—ñ–∑—É
        keyboard = [
            [
                InlineKeyboardButton("–ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="analyze_categories"),
                InlineKeyboardButton("–¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç", callback_data="analyze_trends")
            ],
            [
                InlineKeyboardButton("–ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É", callback_data="analyze_budget"),
                InlineKeyboardButton("–ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", callback_data="analyze_full")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error handling analyze command: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ –∞–Ω–∞–ª—ñ–∑—É.")

async def handle_document_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–≤–∏–ø–∏—Å–æ–∫)"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ —Ñ–∞–π–ª
        awaiting_file = context.user_data.get('awaiting_file')
        logger.info(f"Document received. Awaiting file type: {awaiting_file}, Context data: {context.user_data}")
        
        if not awaiting_file:
            await update.message.reply_text(
                "üìÑ –§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ —è –Ω–µ –æ—á—ñ–∫—É–≤–∞–≤ –π–æ–≥–æ.\n\n"
                "–©–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É, —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ:\n"
                "üí≥ –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ‚Üí üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∏—Å–∫—É"
            )
            return
        
        document = update.message.document
        if not document:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
        max_size = 10 * 1024 * 1024  # 10 –ú–ë
        if document.file_size > max_size:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π: {document.file_size / 1024 / 1024:.1f} –ú–ë\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {max_size / 1024 / 1024:.0f} –ú–ë"
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
        file_name = document.file_name.lower()
        bank_type = context.user_data.get('file_source', 'unknown')
        
        logger.info(f"Received document: {file_name}, awaiting type: {awaiting_file}, bank: {bank_type}")
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É: –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ PDF
        if bank_type == 'privatbank' and file_name.endswith('.pdf'):
            await update.message.reply_text(
                "‚ùå **PDF —Ñ–∞–π–ª–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –¥–ª—è –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É**\n\n"
                "üè¶ **–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ª–∏—à–µ Excel —Ñ–∞–π–ª–∏ (.xlsx)**\n\n"
                "üí° **–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ Excel –≤–∏–ø–∏—Å–∫—É:**\n"
                "1Ô∏è‚É£ –£–≤—ñ–π–¥—ñ—Ç—å –≤ –ü—Ä–∏–≤–∞—Ç24\n"
                "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ä—Ç–∫–∏/—Ä–∞—Ö—É–Ω–∫—É\n"
                "3Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å '–í–∏–ø–∏—Å–∫–∞'\n"
                "4Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥\n"
                "5Ô∏è‚É£ **–û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç 'Excel'**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∑ Excel —Ñ–∞–π–ª–æ–º.",
                parse_mode="Markdown"
            )
            return
        
        if awaiting_file == 'pdf' and not file_name.endswith('.pdf'):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É**\n\n"
                f"–û—á—ñ–∫—É—î—Ç—å—Å—è: PDF —Ñ–∞–π–ª (.pdf)\n"
                f"–û—Ç—Ä–∏–º–∞–Ω–æ: {document.file_name}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º.",
                parse_mode="Markdown"
            )
            return
        elif awaiting_file == 'excel' and not (file_name.endswith('.xlsx') or file_name.endswith('.xls')):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É**\n\n"
                f"–û—á—ñ–∫—É—î—Ç—å—Å—è: Excel —Ñ–∞–π–ª (.xlsx –∞–±–æ .xls)\n"
                f"–û—Ç—Ä–∏–º–∞–Ω–æ: {document.file_name}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º.",
                parse_mode="Markdown"
            )
            return
        elif awaiting_file == 'csv' and not file_name.endswith('.csv'):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É**\n\n"
                f"–û—á—ñ–∫—É—î—Ç—å—Å—è: CSV —Ñ–∞–π–ª (.csv)\n"
                f"–û—Ç—Ä–∏–º–∞–Ω–æ: {document.file_name}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º.",
                parse_mode="Markdown"
            )
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
        processing_message = await update.message.reply_text(
            "üîÑ **–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É...**\n\n"
            "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—é –≤–∏–ø–∏—Å–∫—É\n"
            "üìä –†–æ–∑–ø—ñ–∑–Ω–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
            "üè∑Ô∏è –í–∏–∑–Ω–∞—á–∞—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n\n"
            "_–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥_",
            parse_mode="Markdown"
        )
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_path = os.path.join("uploads", "statements", f"{user.id}_{document.file_name}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            await file.download_to_drive(file_path)
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–∞–π–ª –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Ç–∞ –±–∞–Ω–∫—É
            from services.statement_parser import StatementParser
            parser = StatementParser()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–Ω–∫ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            bank_type = context.user_data.get('file_source', None)
            logger.info(f"Processing {awaiting_file} file from {bank_type} bank")
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å
            await processing_message.edit_text(
                f"üîÑ **–û–±—Ä–æ–±–∫–∞ {awaiting_file} —Ñ–∞–π–ª—É –≤—ñ–¥ {bank_type if bank_type else '–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ'} –±–∞–Ω–∫—É...**\n\n"
                "‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∏–ø–∏—Å–∫—É\n"
                "üìä –†–æ–∑–ø—ñ–∑–Ω–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n\n"
                "_–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ..._",
                parse_mode="Markdown"
            )
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ parse_bank_statement –∑ –≤–∫–∞–∑–∞–Ω–Ω—è–º –±–∞–Ω–∫—É
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª
                if not os.path.exists(file_path):
                    logger.error(f"File does not exist: {file_path}")
                    raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                file_size = os.path.getsize(file_path)
                if file_size == 0:
                    logger.error(f"File is empty: {file_path}")
                    raise ValueError("–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Ñ–∞–π–ª—É
                logger.info(f"Using parser for file type: {awaiting_file} from bank: {bank_type}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
                await processing_message.edit_text(
                    f"üîÑ **–ê–Ω–∞–ª—ñ–∑—É—é {awaiting_file.upper()} —Ñ–∞–π–ª {bank_type or ''}**\n\n"
                    "‚öôÔ∏è –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö...\n"
                    "üìä –ü–æ—à—É–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...\n\n"
                    "_–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥_",
                    parse_mode="Markdown"
                )
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥—É
                if awaiting_file == 'excel':
                    logger.info(f"Using Excel parser for bank: {bank_type}")
                    if bank_type == 'monobank':
                        # –î–ª—è Monobank XLS –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥
                        transactions = parser._parse_monobank_xls(file_path)
                    else:
                        transactions = await parser.parse_excel(file_path)
                elif awaiting_file == 'pdf':
                    logger.info(f"Using PDF parser for bank: {bank_type}")
                    transactions = await parser.parse_pdf(file_path)
                elif awaiting_file == 'csv':
                    logger.info(f"Using CSV parser for bank: {bank_type}")
                    if bank_type == 'monobank':
                        # –û—Å–∫—ñ–ª—å–∫–∏ parse_csv —Ü–µ –≤–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ_parse_monobank_csv
                        transactions = parser._parse_monobank_csv(file_path)
                    else:
                        transactions = await parser.parse_csv(file_path)
                else:
                    logger.info(f"Using general bank statement parser")
                    transactions = parser.parse_bank_statement(file_path, bank_type=bank_type)
                
                logger.info(f"Successfully parsed {len(transactions)} transactions")
            except Exception as e:
                logger.error(f"Error parsing statement: {str(e)}", exc_info=True)
                transactions = []
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            if os.path.exists(file_path):
                os.remove(file_path)
            
            if not transactions:
                await processing_message.edit_text(
                    "‚ùå **–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó**\n\n"
                    "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
                    "‚Ä¢ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É\n"
                    "‚Ä¢ –§–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π\n"
                    "‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ñ–∞–π–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Ä—É—á–Ω–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º.",
                    parse_mode="Markdown"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
            context.user_data['parsed_transactions'] = transactions
            context.user_data['awaiting_file'] = None
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
            await show_transactions_preview(processing_message, context, transactions)
            
        except Exception as e:
            logger.error(f"Error processing file: {str(e)}")
            await processing_message.edit_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É**\n\n"
                f"–î–µ—Ç–∞–ª—ñ: {str(e)}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ñ–∞–π–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Ä—É—á–Ω–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º.",
                parse_mode="Markdown"
            )
    
    except Exception as e:
        logger.error(f"Error in handle_document_message: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É.")

async def show_transactions_preview(message, context, transactions):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    try:
        if len(transactions) > 10:
            preview_transactions = transactions[:10]
            more_count = len(transactions) - 10
        else:
            preview_transactions = transactions
            more_count = 0
        
        text = f"üìä **–ó–Ω–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π**\n\n"
        text += "–û—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º.\n\n"
        for i, trans in enumerate(preview_transactions, 1):
            date_str = trans.get('date', '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞')
            amount = trans.get('amount', 0)
            description = trans.get('description', '–ë–µ–∑ –æ–ø–∏—Å—É')[:30]
            trans_type = trans.get('type', 'expense')
            type_emoji = "üí∏" if trans_type == 'expense' else "üí∞"
            sign = "-" if trans_type == 'expense' else "+"
            text += f"{i}. {type_emoji} {sign}{amount:,.2f} ‚Ç¥\n"
            text += f"   üìÖ {date_str} ‚Ä¢ üìù {description}\n\n"
        if more_count > 0:
            text += f"‚ûï _–Ü —â–µ {more_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π..._\n\n"
        text += "–©–æ –¥–∞–ª—ñ?\n"
        text += "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
        text += "‚Ä¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —ñ–º–ø–æ—Ä—Ç, —è–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ\n\n"
        text += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–æ–¥–∞—Ç–∏ –≤—Å—ñ", callback_data="import_all_transactions"),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_transactions")
            ],
            [
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_import")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_transactions_preview: {e}")
        await message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø–µ—Ä–µ–≥–ª—è–¥—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.")

async def handle_transaction_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    from database.db_operations import update_transaction, get_transaction_by_id
    from handlers.transaction_handler import handle_edit_single_transaction
    
    try:
        transaction_id = context.user_data.get('editing_transaction_id')
        editing_field = context.user_data.get('editing_field')
        user_input = update.message.text.strip()
        
        if not transaction_id or not editing_field:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            return
        
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —ñ—Å–Ω—É—î
        transaction = get_transaction_by_id(transaction_id, user.id)
        if not transaction:
            await update.message.reply_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        success = False
        
        if editing_field == 'amount':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Å—É–º–∏
            try:
                amount = float(user_input.replace(',', '.'))
                if amount <= 0:
                    await update.message.reply_text(
                        "‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"edit_transaction_{transaction_id}")
                        ]])
                    )
                    return
                
                result = update_transaction(transaction_id, user.id, amount=amount)
                if result:
                    success = True
                    await update.message.reply_text(f"‚úÖ –°—É–º–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {amount:.2f} ‚Ç¥")
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150.50):",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"edit_transaction_{transaction_id}")
                    ]])
                )
                return
        
        elif editing_field == 'description':
            if len(user_input) > 255:
                await update.message.reply_text(
                    "‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª—ñ–≤). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"edit_transaction_{transaction_id}")
                    ]])
                )
                return
            
            result = update_transaction(transaction_id, user.id, description=user_input)
            if result:
                success = True
                await update.message.reply_text(f"‚úÖ –û–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: {user_input}")
        
        if success:
            # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            context.user_data.pop('editing_transaction_id', None)
            context.user_data.pop('editing_field', None)
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            keyboard = [[
                InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", 
                                   callback_data=f"edit_transaction_{transaction_id}")
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.")
            
    except Exception as e:
        logger.error(f"Error in handle_transaction_edit_input: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–≤–µ–¥–µ–Ω–Ω—è.")

async def handle_transaction_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        amount_text = update.message.text.strip().replace(',', '.')
        if not re.match(r'^\d+(\.\d{1,2})?$', amount_text):
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 150.50)")
            return
        
        amount = float(amount_text)
        context.user_data['transaction_data']['amount'] = amount
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ –æ–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        await update.message.reply_text(
            "üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ü—Ä–æ–¥—É–∫—Ç–∏, –∫–∞—Ñ–µ')"
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É
        context.user_data['transaction_data']['step'] = 'description'
    except Exception as e:
        logger.error(f"Error handling transaction amount input: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.")

async def handle_transaction_description_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        description = update.message.text.strip()
        context.user_data['transaction_data']['description'] = description
        
        transaction_data = context.user_data['transaction_data']
        amount = transaction_data.get('amount')
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = Transaction(
            user_id=user.id,
            amount=amount,
            type=TransactionType.EXPENSE,
            description=description
        )
        
        add_transaction(transaction)
        
        await update.message.reply_text(
            f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!\n"
            f"–°—É–º–∞: {amount} –≥—Ä–Ω\n"
            f"–û–ø–∏—Å: {description}"
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        context.user_data.pop('transaction_data', None)
    except Exception as e:
        logger.error(f"Error handling transaction description input: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–ø–∏—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.")

async def handle_category_creation_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        category_name = update.message.text.strip()
        context.user_data['new_category_name'] = category_name
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        from database.db_operations import add_category
        category = add_category(user.id, category_name)
        
        await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é '{category_name}' –¥–æ–¥–∞–Ω–æ!")
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        context.user_data.pop('new_category_name', None)
    except Exception as e:
        logger.error(f"Error handling category creation input: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫–Ω–æ–ø–æ–∫"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        query = update.callback_query
        await query.answer()
        
        category_id = query.data.split('_')[-1]
        context.user_data['category_id'] = category_id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        from database.db_operations import get_category_by_id
        category = get_category_by_id(category_id, user.id)
        
        if not category:
            await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        await query.edit_message_text(
            f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category.name}\n\n"
            "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:"
        )
        
        context.user_data['awaiting_amount'] = True
    except Exception as e:
        logger.error(f"Error handling category selection: {str(e)}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")

async def handle_transaction_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        amount_text = update.message.text.strip().replace(',', '.')
        if not re.match(r'^\d+(\.\d{1,2})?$', amount_text):
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 150.50)")
            return
        
        amount = float(amount_text)
        context.user_data['transaction_amount'] = amount
        context.user_data.pop('awaiting_amount', None)
        # –¢—É—Ç –º–æ–∂–Ω–∞ –æ–¥—Ä–∞–∑—É –¥–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∞–±–æ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –æ–ø–∏—Å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é —Ç–∞ —Å—É–º–æ—é
        from database.db_operations import add_transaction
        from database.models import Transaction
        transaction = Transaction(
            user_id=user.id,
            amount=amount,
            type=context.user_data.get('transaction_type', 'expense'),
            category_id=int(context.user_data.get('category_id')) if context.user_data.get('category_id') else None
        )
        add_transaction(transaction)
        await update.message.reply_text(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!\n–°—É–º–∞: {amount} –≥—Ä–Ω")
        # –û—á–∏—â–∞—î–º–æ user_data
        context.user_data.pop('transaction_type', None)
        context.user_data.pop('category_id', None)
        context.user_data.pop('transaction_amount', None)
        return
    except Exception as e:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 150.50)")
        return