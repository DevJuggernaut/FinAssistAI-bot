"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ FinAssist.
–í–∫–ª—é—á–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏—Ç—Ä–∞—Ç, AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –∑–≤—ñ—Ç–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥.
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
import calendar
import logging
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∫-–µ–Ω–¥—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–µ–∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
import io
import numpy as np
import io
import matplotlib.pyplot as plt
import numpy as np

from database.db_operations import get_user, get_monthly_stats, get_user_transactions, get_user_categories
from database.models import TransactionType
from services.financial_advisor import get_financial_advice
# –ù–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
from services.advanced_analytics import advanced_analytics
from services.trend_analyzer import trend_analyzer
from services.financial_insights import insights_engine

logger = logging.getLogger(__name__)

# ==================== –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –ê–ù–ê–õ–Ü–¢–ò–ö–ò ====================

async def show_analytics_main_menu(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó
        text = "üìä **–í–∞—à–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞**\n\n"
        text += "–û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É –∫–∞—Ä—Ç–∏–Ω—É —Å–≤–æ—ó—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤:\n\n"
        
        text += "üìà **–ì—Ä–∞—Ñ—ñ–∫–∏** ‚Äî –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö\n"
        text += "–î—ñ–∞–≥—Ä–∞–º–∏ –≤–∏—Ç—Ä–∞—Ç, –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ —Ç—Ä–µ–Ω–¥—ñ–≤\n\n"
        
        text += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** ‚Äî —á–∏—Å–ª–∞ —Ç–∞ —Ñ–∞–∫—Ç–∏\n"
        text += "–î–µ—Ç–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥\n\n"
        
        text += "üìÑ **PDF –ó–≤—ñ—Ç** ‚Äî –≥–æ—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç\n"
        text += "–ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏\n\n"
        
        text += "üëÜ *–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∞–ª—ñ–∑—É*"
        
        # –ú–µ–Ω—é –∑ 3 –∫–Ω–æ–ø–∫–∞–º–∏: –≥—Ä–∞—Ñ—ñ–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ PDF –∑–≤—ñ—Ç
        keyboard = [
            [
                InlineKeyboardButton("ÔøΩ –ì—Ä–∞—Ñ—ñ–∫–∏", callback_data="analytics_charts"),
                InlineKeyboardButton("ÔøΩ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_detailed")
            ],
            [
                InlineKeyboardButton("üìÑ PDF –ó–≤—ñ—Ç", callback_data="generate_pdf_report")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_analytics_main_menu: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

# ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–¢–†–ê–¢ ====================

async def show_expense_statistics(query, context):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏—Ç—Ä–∞—Ç –∑ –≤–∏–±–æ—Ä–æ–º –ø–µ—Ä—ñ–æ–¥—É (—Ç—ñ–ª—å–∫–∏ —Ç–∏–∂–¥–µ–Ω—å, –º—ñ—Å—è—Ü—å, –∫–≤–∞—Ä—Ç–∞–ª)"""
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data="expense_stats_week"),
            InlineKeyboardButton("üìÜ –ú—ñ—Å—è—Ü—å", callback_data="expense_stats_month")
        ],
        [
            InlineKeyboardButton("üìä –ö–≤–∞—Ä—Ç–∞–ª", callback_data="expense_stats_quarter")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics")
        ]
    ]
    
    text = (
        "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç**\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:\n\n"
        "üìÖ **–¢–∏–∂–¥–µ–Ω—å** ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤\n"
        "üìÜ **–ú—ñ—Å—è—Ü—å** ‚Äî –ø–æ—Ç–æ—á–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏–π –º—ñ—Å—è—Ü—å\n"
        "üìä **–ö–≤–∞—Ä—Ç–∞–ª** ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ\n\n"
        "üëÜ *–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥*"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_period_statistics(query, context, period_type, chart_type=None):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥
        now = datetime.now()
        if period_type == "week":
            start_date = (now - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤"
        elif period_type == "month":
            start_date = now.replace(day=1)
            period_name = "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å"
        elif period_type == "quarter":
            start_date = now - timedelta(days=90)
            period_name = "–æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–≤–∞—Ä—Ç–∞–ª"
        elif period_type == "year":
            start_date = now - timedelta(days=365)
            period_name = "–æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫"
        elif period_type == "30days":
            start_date = now - timedelta(days=30)
            period_name = "–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
        elif period_type == "current_month":
            start_date = now.replace(day=1)
            period_name = "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å"
        else:
            start_date = now - timedelta(days=30)
            period_name = "–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –ø–µ—Ä—ñ–æ–¥
        transactions = get_user_transactions(
            user.id,
            limit=1000,
            start_date=start_date,
            end_date=now
        )
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        balance = total_income - total_expenses
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        categories_stats = {}
        for transaction in transactions:
            if transaction.type == TransactionType.EXPENSE and getattr(transaction, 'category_name', None):
                cat_name = transaction.category_name
                if cat_name not in categories_stats:
                    categories_stats[cat_name] = 0
                categories_stats[cat_name] += transaction.amount
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —Å—É–º–æ—é
        sorted_categories = sorted(categories_stats.items(), key=lambda x: x[1], reverse=True)
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}**\n\n"
        text += f"üí∞ *–î–æ—Ö–æ–¥–∏:* `{total_income:.2f} –≥—Ä–Ω`\n"
        text += f"üí∏ *–í–∏—Ç—Ä–∞—Ç–∏:* `{total_expenses:.2f} –≥—Ä–Ω`\n"
        text += f"üíº *–ë–∞–ª–∞–Ω—Å:* `{balance:.2f} –≥—Ä–Ω`\n\n"
        
        if balance >= 0:
            text += "‚úÖ *–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å* ‚Äî –≤–∏ –µ–∫–æ–Ω–æ–º–∏—Ç–µ!\n\n"
        else:
            text += "‚ö†Ô∏è *–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å* ‚Äî –≤–∏—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –¥–æ—Ö–æ–¥–∏\n\n"
        
        # –î–æ–¥–∞—î–º–æ —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if sorted_categories:
            text += "üèÜ *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:*\n"
            for i, (category, amount) in enumerate(sorted_categories[:3], 1):
                percentage = (amount / total_expenses * 100) if total_expenses > 0 else 0
                text += f"{i}. {category}: `{amount:.2f} –≥—Ä–Ω` ({percentage:.1f}%)\n"
        
        text += f"\nüìä –í—Å—å–æ–≥–æ –æ–ø–µ—Ä–∞—Ü—ñ–π: {len(transactions)}"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —ñ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫", callback_data=f"expense_chart_bar_{period_type}"),
                InlineKeyboardButton("üìã –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö", callback_data=f"detailed_categories_{period_type}")
            ],
            [
                InlineKeyboardButton("üìà –õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫", callback_data=f"expense_chart_line_{period_type}"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
            ]
        ]
        
        try:
            if hasattr(query, 'message') and getattr(query.message, 'text', None) is None:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                await query.edit_message_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
        except Exception as e:
            # –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ "Message is not modified" ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
            if "Message is not modified" in str(e):
                pass
            elif "There is no text in the message to edit" in str(e):
                # fallback: –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                logger.error(f"Error in show_period_statistics: {str(e)}")
                await query.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
                )
        
    except Exception as e:
        logger.error(f"Error in show_period_statistics: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

# ==================== AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á ====================

async def show_ai_recommendations(query, context):
    """–ü–æ–∫–∞–∑—É—î AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date, now)
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ AI
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        expense_categories = {}
        for t in transactions:
            if t.type == TransactionType.EXPENSE and t.category:
                cat = t.category.name
                expense_categories[cat] = expense_categories.get(cat, 0) + t.amount
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ AI
        advice = await get_financial_advice(
            user_id=user.id,
            monthly_budget=user.monthly_budget or 0,
            current_expenses=total_expenses,
            categories=expense_categories
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∏ –∑ –µ–∫–æ–Ω–æ–º—ñ—ó", callback_data="ai_savings_tips"),
                InlineKeyboardButton("üìà –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É", callback_data="ai_budget_planning")
            ],
            [
                InlineKeyboardButton("üîç –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤", callback_data="ai_pattern_analysis"),
                InlineKeyboardButton("üéØ –¶—ñ–ª—ñ –Ω–∞ –º—ñ—Å—è—Ü—å", callback_data="ai_monthly_goals")
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ AI", callback_data="ai_custom_question"),
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑", callback_data="analytics_ai_recommendations")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
            ]
        ]
        
        text = (
            "üí° **AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó**\n\n"
            f"üìä *–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤:*\n"
            f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏: `{total_expenses:.2f} –≥—Ä–Ω`\n"
            f"üí∞ –î–æ—Ö–æ–¥–∏: `{total_income:.2f} –≥—Ä–Ω`\n\n"
            f"ü§ñ *–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ—Ä–∞–¥–∏:*\n"
            f"{advice}\n\n"
            "üéØ *–©–æ —â–µ –º–æ–∂–Ω–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏:*\n"
            "‚Ä¢ –ü–æ—Ä–∞–¥–∏ –∑ –µ–∫–æ–Ω–æ–º—ñ—ó –≥—Ä–æ—à–µ–π\n"
            "‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å\n"
            "‚Ä¢ –í–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—ã—á–Ω–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ –≤–∏—Ç—Ä–∞—Ç\n"
            "‚Ä¢ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ü—ñ–ª–µ–π"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_ai_recommendations: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

# ==================== –ó–í–Ü–¢–ò –ó–ê –ü–ï–†–Ü–û–î ====================

async def show_period_reports(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –®–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç", callback_data="quick_report_menu"),
            InlineKeyboardButton("üéØ –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø–µ—Ä—ñ–æ–¥", callback_data="custom_period_report")
        ],
        [
            InlineKeyboardButton("üìä –ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç", callback_data="monthly_report_select"),
            InlineKeyboardButton("üìà –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç", callback_data="quarterly_report")
        ],
        [
            InlineKeyboardButton("üè∑Ô∏è –ó–≤—ñ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö", callback_data="category_report"),
            InlineKeyboardButton("üí∞ –ó–≤—ñ—Ç –ø–æ —Å—É–º–∞—Ö", callback_data="amount_report")
        ],
        [
            InlineKeyboardButton("üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="export_data_menu"),
            InlineKeyboardButton("üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç", callback_data="send_report_menu")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
        ]
    ]
    
    text = (
        "üìã **–ó–≤—ñ—Ç–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥**\n\n"
        "–°—Ç–≤–æ—Ä—é–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—Ä–æ –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–∏:\n\n"
        "üìÖ *–®–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç* ‚Äî –≥–æ—Ç–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏ –ø–µ—Ä—ñ–æ–¥—ñ–≤\n"
        "üéØ *–ö–∞—Å—Ç–æ–º–Ω–∏–π –ø–µ—Ä—ñ–æ–¥* ‚Äî –æ–±–µ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω—ñ –¥–∞—Ç–∏\n"
        "üìä *–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç* ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "üè∑Ô∏è *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö* ‚Äî —Ä–æ–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –≤–∏—Ç—Ä–∞—Ç\n\n"
        "üì§ *–ï–∫—Å–ø–æ—Ä—Ç:* –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–≤—ñ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel/PDF\n"
        "üìß *–í—ñ–¥–ø—Ä–∞–≤–∫–∞:* –î—ñ–ª—ñ—Ç—å—Å—è –∑–≤—ñ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ==================== –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ü–ï–†–Ü–û–î–Ü–í ====================

async def show_period_comparison(query, context):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –ø–µ—Ä—ñ–æ–¥–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìä –¶–µ–π vs –º–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å", callback_data="compare_current_prev_month"),
            InlineKeyboardButton("üìà –¶–µ–π vs –º–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="compare_current_prev_week")
        ],
        [
            InlineKeyboardButton("üîÑ –û—Å—Ç–∞–Ω–Ω—ñ 30 vs –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 30", callback_data="compare_30_days"),
            InlineKeyboardButton("üìÖ –¶–µ–π vs –º–∏–Ω—É–ª–∏–π –∫–≤–∞—Ä—Ç–∞–ª", callback_data="compare_quarters")
        ],
        [
            InlineKeyboardButton("üìÜ –†—ñ–∫ –¥–æ —Ä–æ–∫—É", callback_data="compare_year_to_year"),
            InlineKeyboardButton("üéØ –ö–∞—Å—Ç–æ–º–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", callback_data="custom_comparison")
        ],
        [
            InlineKeyboardButton("üìä –¢—Ä–µ–Ω–¥–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑", callback_data="trend_analysis"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
        ]
    ]
    
    text = (
        "üìä **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤**\n\n"
        "–ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ –∑–º—ñ–Ω–∏ —É –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–≤–∏—á–∫–∞—Ö:\n\n"
        "üìà *–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:*\n"
        "‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π vs –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å\n"
        "‚Ä¢ –¢–∏–∂–¥–µ–Ω—å –¥–æ —Ç–∏–∂–Ω—è\n"
        "‚Ä¢ –ö–≤–∞—Ä—Ç–∞–ª –¥–æ –∫–≤–∞—Ä—Ç–∞–ª—É\n\n"
        "üéØ *–ö–∞—Å—Ç–æ–º–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏:*\n"
        "‚Ä¢ –û–±–µ—Ä—ñ—Ç—å –±—É–¥—å-—è–∫—ñ –¥–∞—Ç–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è\n"
        "‚Ä¢ –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –∑–∞ –¥–æ–≤–≥–∏–π –ø–µ—Ä—ñ–æ–¥\n\n"
        "üìä *–©–æ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ:*\n"
        "‚Ä¢ –ó–º—ñ–Ω–∏ –≤ –¥–æ—Ö–æ–¥–∞—Ö —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∞—Ö\n"
        "‚Ä¢ –î–∏–Ω–∞–º—ñ–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö\n"
        "‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ç—Ä–µ–Ω–¥"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ==================== –î–ï–¢–ê–õ–¨–ù–Ü –ê–ù–ê–õ–Ü–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á ====================

async def show_detailed_categories(query, context, period_type):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥
        now = datetime.now()
        if period_type == "week":
            start_date = (now - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "7 –¥–Ω—ñ–≤"
        elif period_type == "month":
            start_date = now.replace(day=1)
            period_name = "–º—ñ—Å—è—Ü—å"
        elif period_type == "quarter":
            start_date = now - timedelta(days=90)
            period_name = "–∫–≤–∞—Ä—Ç–∞–ª"
        elif period_type == "year":
            start_date = now - timedelta(days=365)
            period_name = "—Ä—ñ–∫"
        else:
            start_date = now - timedelta(days=30)
            period_name = "30 –¥–Ω—ñ–≤"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transactions = get_user_transactions(user.id, start_date, now)
        expense_transactions = [t for t in transactions if t.type == TransactionType.EXPENSE]
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        categories_stats = {}
        total_expenses = 0
        for transaction in expense_transactions:
            if transaction.category:
                cat_name = transaction.category.name
                cat_icon = getattr(transaction.category, 'icon', 'üí∏')
                if cat_name not in categories_stats:
                    categories_stats[cat_name] = {'amount': 0, 'count': 0, 'icon': cat_icon}
                categories_stats[cat_name]['amount'] += transaction.amount
                categories_stats[cat_name]['count'] += 1
                total_expenses += transaction.amount
        
        # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Å—É–º—ñ
        sorted_categories = sorted(categories_stats.items(), key=lambda x: x[1]['amount'], reverse=True)
        
        text = f"üìä **–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö ({period_name})**\n\n"
        text += f"üí∏ *–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:* `{total_expenses:.2f} –≥—Ä–Ω`\n"
        text += f"üìã *–û–ø–µ—Ä–∞—Ü—ñ–π:* {len(expense_transactions)}\n\n"
        
        if sorted_categories:
            for i, (category, stats) in enumerate(sorted_categories[:10], 1):
                percentage = (stats['amount'] / total_expenses * 100) if total_expenses > 0 else 0
                avg_per_transaction = stats['amount'] / stats['count'] if stats['count'] > 0 else 0
                
                text += f"{stats['icon']} **{category}**\n"
                text += f"   üí∞ `{stats['amount']:.2f} –≥—Ä–Ω` ({percentage:.1f}%)\n"
                text += f"   üìä {stats['count']} –æ–ø–µ—Ä–∞—Ü—ñ–π, —Å–µ—Ä–µ–¥–Ω—è: `{avg_per_transaction:.2f} –≥—Ä–Ω`\n\n"
        else:
            text += "üì≠ –ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥"
        
        keyboard = [
            [
                InlineKeyboardButton("üìà –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Å—É–º–æ—é", callback_data=f"sort_categories_amount_{period_type}"),
                InlineKeyboardButton("üìä –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é", callback_data=f"sort_categories_count_{period_type}")
            ],
            [
                InlineKeyboardButton("üí° AI –∞–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data=f"ai_category_analysis_{period_type}"),
                InlineKeyboardButton("üìã –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏", callback_data=f"export_categories_{period_type}")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expense_stats_{period_type}")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_detailed_categories: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expense_stats_{period_type}")]])
        )

async def show_top_transactions(query, context, period_type):
    """–ü–æ–∫–∞–∑—É—î —Ç–æ–ø –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥
        now = datetime.now()
        if period_type == "week":
            start_date = (now - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "7 –¥–Ω—ñ–≤"
        elif period_type == "month":
            start_date = now.replace(day=1)
            period_name = "–º—ñ—Å—è—Ü—å"
        elif period_type == "quarter":
            start_date = now - timedelta(days=90)
            period_name = "–∫–≤–∞—Ä—Ç–∞–ª"
        elif period_type == "year":
            start_date = now - timedelta(days=365)
            period_name = "—Ä—ñ–∫"
        else:
            start_date = now - timedelta(days=30)
            period_name = "30 –¥–Ω—ñ–≤"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transactions = get_user_transactions(user.id, start_date, now)
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏
        expenses = [t for t in transactions if t.type == TransactionType.EXPENSE]
        incomes = [t for t in transactions if t.type == TransactionType.INCOME]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å—É–º–æ—é
        top_expenses = sorted(expenses, key=lambda x: x.amount, reverse=True)[:5]
        top_incomes = sorted(incomes, key=lambda x: x.amount, reverse=True)[:5]
        
        # –ê–Ω–∞–ª—ñ–∑ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –¥–Ω—ñ–≤
        daily_counts = {}
        for t in transactions:
            date_key = t.transaction_date.strftime("%Y-%m-%d")
            daily_counts[date_key] = daily_counts.get(date_key, 0) + 1
        
        most_active_days = sorted(daily_counts.items(), key=lambda x: x[1], reverse=True)[:3]
        
        text = f"üèÜ **–¢–æ–ø –æ–ø–µ—Ä–∞—Ü—ñ–π ({period_name})**\n\n"
        
        # –¢–æ–ø –≤–∏—Ç—Ä–∞—Ç
        if top_expenses:
            text += "üí∏ *5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç:*\n"
            for i, transaction in enumerate(top_expenses, 1):
                date_str = transaction.transaction_date.strftime("%d.%m")
                category = transaction.category.name if transaction.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
                desc = transaction.description[:20] + "..." if len(transaction.description) > 20 else transaction.description
                text += f"{i}. `{transaction.amount:.2f} –≥—Ä–Ω` ‚Äî {category}\n"
                text += f"   üìÖ {date_str} | {desc}\n\n"
        
        # –¢–æ–ø –¥–æ—Ö–æ–¥—ñ–≤
        if top_incomes:
            text += "üí∞ *5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –¥–æ—Ö–æ–¥—ñ–≤:*\n"
            for i, transaction in enumerate(top_incomes, 1):
                date_str = transaction.transaction_date.strftime("%d.%m")
                category = transaction.category.name if transaction.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
                desc = transaction.description[:20] + "..." if len(transaction.description) > 20 else transaction.description
                text += f"{i}. `{transaction.amount:.2f} –≥—Ä–Ω` ‚Äî {category}\n"
                text += f"   üìÖ {date_str} | {desc}\n\n"
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –¥–Ω—ñ
        if most_active_days:
            text += "üìà *–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –¥–Ω—ñ:*\n"
            for date_str, count in most_active_days:
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                weekday = calendar.day_name[date_obj.weekday()]
                text += f"üìÖ {formatted_date} ({weekday[:3]}) ‚Äî {count} –æ–ø–µ—Ä–∞—Ü—ñ–π\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—ñ –≤–∏—Ç—Ä–∞—Ç", callback_data=f"expense_details_{period_type}"),
                InlineKeyboardButton("üí∞ –î–µ—Ç–∞–ª—ñ –¥–æ—Ö–æ–¥—ñ–≤", callback_data=f"income_details_{period_type}")
            ],
            [
                InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", callback_data=f"activity_analysis_{period_type}"),
                InlineKeyboardButton("üí° AI —ñ–Ω—Å–∞–π—Ç–∏", callback_data=f"ai_transaction_insights_{period_type}")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expense_stats_{period_type}")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_top_transactions: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ç–æ–ø –æ–ø–µ—Ä–∞—Ü—ñ–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expense_stats_{period_type}")]])
        )

# ==================== AI –ê–ù–ê–õ–Ü–ó –°–ü–ï–¶–ò–§–Ü–ß–ù–ò–• –û–ë–õ–ê–°–¢–ï–ô ====================

async def show_ai_savings_tips(query, context):
    """–ü–æ–∫–∞–∑—É—î AI –ø–æ—Ä–∞–¥–∏ –∑ –µ–∫–æ–Ω–æ–º—ñ—ó"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date, now)
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        categories_stats = {}
        total_expenses = 0
        for t in transactions:
            if t.type == TransactionType.EXPENSE and t.category:
                cat_name = t.category.name
                categories_stats[cat_name] = categories_stats.get(cat_name, 0) + t.amount
                total_expenses += t.amount
        
        # –§–æ—Ä–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ—Ä–∞–¥–∏
        tips = []
        
        # –ê–Ω–∞–ª—ñ–∑ –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        if categories_stats:
            top_category = max(categories_stats.items(), key=lambda x: x[1])
            percentage = (top_category[1] / total_expenses * 100) if total_expenses > 0 else 0
            
            if percentage > 30:
                tips.append(f"üéØ –í–∞—à–∞ –Ω–∞–π–±—ñ–ª—å—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç ‚Äî {top_category[0]} ({percentage:.1f}%). –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç—É—Ç –Ω–∞ 10-15%.")
        
        # –ü–æ—Ä–∞–¥–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±—é–¥–∂–µ—Ç—É
        if user.monthly_budget and total_expenses > user.monthly_budget:
            overspend = total_expenses - user.monthly_budget
            tips.append(f"‚ö†Ô∏è –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ {overspend:.2f} –≥—Ä–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç.")
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
        tips.extend([
            "üí° –í–µ–¥–¥—ñ—Ç—å —â–æ–¥–µ–Ω–Ω–∏–π –æ–±–ª—ñ–∫ –≤–∏—Ç—Ä–∞—Ç ‚Äî —Ü–µ –¥–æ–ø–æ–º–æ–∂–µ –∫—Ä–∞—â–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–∏",
            "üéØ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ª—ñ–º—ñ—Ç–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—ñ '–∑'—ó–¥–∞—é—Ç—å' –Ω–∞–π–±—ñ–ª—å—à–µ –∫–æ—à—Ç—ñ–≤",
            "üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî —Ü–µ –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∏—è–≤–∏—Ç–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏",
            "üí∞ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 50/30/20: 50% –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏, 30% –Ω–∞ –±–∞–∂–∞–Ω–Ω—è, 20% –Ω–∞ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è"
        ])
        
        text = (
            "üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑ –µ–∫–æ–Ω–æ–º—ñ—ó**\n\n"
            f"üìä *–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤:*\n"
            f"üí∏ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: `{total_expenses:.2f} –≥—Ä–Ω`\n"
            f"üéØ –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: `{user.monthly_budget or '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`\n\n"
            "ü§ñ *AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:*\n\n"
        )
        
        for i, tip in enumerate(tips[:5], 1):
            text += f"{i}. {tip}\n\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üéØ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏", callback_data="set_category_limits"),
                InlineKeyboardButton("üìà –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É", callback_data="ai_budget_planning")
            ],
            [
                InlineKeyboardButton("üí∞ –¶—ñ–ª—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å", callback_data="savings_goals"),
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ä–∞–¥–∏", callback_data="ai_savings_tips")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_ai_savings_tips: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Ä–∞–¥",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")]])
        )

# ==================== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ====================

async def show_analytics_settings(query, context):
    """–ü–æ–∫–∞–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üîî –ê–≤—Ç–æ–∑–≤—ñ—Ç–∏", callback_data="analytics_auto_reports"),
            InlineKeyboardButton("üìä –§–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—ñ–≤", callback_data="analytics_report_format")
        ],
        [
            InlineKeyboardButton("üéØ –¶—ñ–ª—ñ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data="analytics_goals_reminders"),
            InlineKeyboardButton("üìß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç—É", callback_data="analytics_export_settings")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
        ]
    ]
    
    text = (
        "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏**\n\n"
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–π—Ç–µ –≤–∞—à –¥–æ—Å–≤—ñ–¥ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:\n\n"
        "üîî *–ê–≤—Ç–æ–∑–≤—ñ—Ç–∏* ‚Äî –æ—Ç—Ä–∏–º—É–π—Ç–µ —â–æ—Ç–∏–∂–Ω–µ–≤—ñ/—â–æ–º—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏\n"
        "üìä *–§–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—ñ–≤* ‚Äî –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –≤–∏–≥–ª—è–¥ —Ç–∞ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—é\n"
        "üéØ *–¶—ñ–ª—ñ* ‚Äî –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ü—ñ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "üìß *–ï–∫—Å–ø–æ—Ä—Ç* ‚Äî –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_auto_reports_settings(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤"""
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –©–æ—Ç–∏–∂–Ω–µ–≤—ñ –∑–≤—ñ—Ç–∏", callback_data="weekly_reports_toggle"),
            InlineKeyboardButton("üìÖ –©–æ–º—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏", callback_data="monthly_reports_toggle")
        ],
        [
            InlineKeyboardButton("üïê –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏", callback_data="report_time_settings"),
            InlineKeyboardButton("üìß Email –∑–≤—ñ—Ç–∏", callback_data="email_reports_settings")
        ],
        [
            InlineKeyboardButton("üìä –ó–º—ñ—Å—Ç –∑–≤—ñ—Ç—ñ–≤", callback_data="report_content_settings"),
            InlineKeyboardButton("üîî –§–æ—Ä–º–∞—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data="reminder_format_settings")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_settings")
        ]
    ]
    
    text = (
        "üîî **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤**\n\n"
        "–û—Ç—Ä–∏–º—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—Ä–æ –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–∏:\n\n"
        "üìÖ *–ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å:*\n"
        "‚Ä¢ –©–æ—Ç–∏–∂–Ω–µ–≤—ñ –ø—ñ–¥—Å—É–º–∫–∏\n"
        "‚Ä¢ –©–æ–º—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏\n"
        "‚Ä¢ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n\n"
        "üìä *–ó–º—ñ—Å—Ç –∑–≤—ñ—Ç—ñ–≤:*\n"
        "‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç\n"
        "‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä—ñ–æ–¥–æ–º\n"
        "‚Ä¢ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å —Ü—ñ–ª–µ–π –∑–∞–æ—â–∞–¥–∂–µ–Ω—å\n\n"
        "‚è∞ *–ì–Ω—É—á–∫—ñ—Å—Ç—å:* –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —á–∞—Å —Ç–∞ —Ñ–æ—Ä–º–∞—Ç –ø—ñ–¥ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_report_format_settings(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É –∑–≤—ñ—Ç—ñ–≤"""
    keyboard = [
        [
            InlineKeyboardButton("üìã –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç", callback_data="format_text"),
            InlineKeyboardButton("üìä –ó –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏", callback_data="format_charts")
        ],
        [
            InlineKeyboardButton("üìÑ PDF –µ–∫—Å–ø–æ—Ä—Ç", callback_data="format_pdf"),
            InlineKeyboardButton("üìà Excel —Ñ–∞–π–ª–∏", callback_data="format_excel")
        ],
        [
            InlineKeyboardButton("üé® –°—Ç–∏–ª—å –∑–≤—ñ—Ç—ñ–≤", callback_data="report_style_settings"),
            InlineKeyboardButton("üìè –†—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó", callback_data="detail_level_settings")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_settings")
        ]
    ]
    
    text = (
        "üìä **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É –∑–≤—ñ—Ç—ñ–≤**\n\n"
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–π—Ç–µ –≤–∏–≥–ª—è–¥ –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤:\n\n"
        "üìã *–§–æ—Ä–º–∞—Ç–∏:*\n"
        "‚Ä¢ –ö–æ—Ä–æ—Ç–∫—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–≤–µ–¥–µ–Ω–Ω—è\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏\n"
        "‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –∞—Ä—Ö—ñ–≤—É\n"
        "‚Ä¢ Excel —Ñ–∞–π–ª–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É\n\n"
        "üé® *–°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è:*\n"
        "‚Ä¢ –ö–æ–ª—å–æ—Ä–æ–≤—ñ —Å—Ö–µ–º–∏\n"
        "‚Ä¢ –†—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó\n"
        "‚Ä¢ –í–∫–ª—é—á–µ–Ω–Ω—è AI –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏\n\n"
        "üí° *–ü–æ—Ä–∞–¥–∞:* –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_goals_reminders_settings(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª–µ–π —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    keyboard = [
        [
            InlineKeyboardButton("üéØ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª–µ–π", callback_data="configure_goals"),
            InlineKeyboardButton("üîî –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data="reminder_frequency")
        ],
        [
            InlineKeyboardButton("üì± –¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", callback_data="notification_types"),
            InlineKeyboardButton("‚è∞ –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data="reminder_time")
        ],
        [
            InlineKeyboardButton("üéñÔ∏è –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏", callback_data="achievements_settings"),
            InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö", callback_data="progress_display")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_settings")
        ]
    ]
    
    text = (
        "üéØ **–¶—ñ–ª—ñ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è**\n\n"
        "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –º–æ—Ç–∏–≤–∞—Ü—ñ—ó —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é:\n\n"
        "üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:*\n"
        "‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "‚Ä¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∏\n"
        "‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ–ª–µ–π\n\n"
        "üéñÔ∏è *–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å:*\n"
        "‚Ä¢ –ë–µ–π–¥–∂—ñ –∑–∞ –µ–∫–æ–Ω–æ–º—ñ—é\n"
        "‚Ä¢ –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ–ª–µ–π\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø—ñ—Ö—ñ–≤\n"
        "‚Ä¢ –û—Å–æ–±–∏—Å—Ç—ñ —Ä–µ–∫–æ—Ä–¥–∏\n\n"
        "üí™ *–ú–æ—Ç–∏–≤–∞—Ü—ñ—è:* –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –¥–æ—Å—è–≥–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ü—ñ–ª–µ–π!"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_export_settings(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö"""
    keyboard = [
        [
            InlineKeyboardButton("üìä Excel –µ–∫—Å–ø–æ—Ä—Ç", callback_data="excel_export_config"),
            InlineKeyboardButton("üìÑ PDF –∑–≤—ñ—Ç–∏", callback_data="pdf_export_config")
        ],
        [
            InlineKeyboardButton("üìÖ CSV —Ñ–∞–π–ª–∏", callback_data="csv_export_config"),
            InlineKeyboardButton("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ PNG", callback_data="charts_export_config")
        ],
        [
            InlineKeyboardButton("‚òÅÔ∏è –•–º–∞—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", callback_data="cloud_storage_config"),
            InlineKeyboardButton("üìß Email –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è", callback_data="email_sending_config")
        ],
        [
            InlineKeyboardButton("üîê –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å", callback_data="privacy_settings"),
            InlineKeyboardButton("‚öôÔ∏è –ê–≤—Ç–æ–µ–∫—Å–ø–æ—Ä—Ç", callback_data="auto_export_settings")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_settings")
        ]
    ]
    
    text = (
        "üì§ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç—É**\n\n"
        "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –µ–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:\n\n"
        "üìä *–§–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤:*\n"
        "‚Ä¢ Excel —Ç–∞–±–ª–∏—Ü—ñ –∑ —Ñ–æ—Ä–º—É–ª–∞–º–∏\n"
        "‚Ä¢ PDF –∑–≤—ñ—Ç–∏ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏\n"
        "‚Ä¢ CSV —Ñ–∞–π–ª–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É\n"
        "‚Ä¢ PNG –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏\n\n"
        "‚òÅÔ∏è *–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è:*\n"
        "‚Ä¢ Google Drive —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\n"
        "‚Ä¢ Dropbox —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è\n"
        "‚Ä¢ Email –∞–≤—Ç–æ–≤—ñ–¥–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è\n\n"
        "üîê *–ë–µ–∑–ø–µ–∫–∞:* –í—Å—ñ –¥–∞–Ω—ñ —à–∏—Ñ—Ä—É—é—Ç—å—Å—è –ø–µ—Ä–µ–¥ –µ–∫—Å–ø–æ—Ä—Ç–æ–º"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ==================== AI –ê–ù–ê–õ–Ü–ó –ü–û –ü–ï–†–Ü–û–î–ê–• ====================

async def show_ai_analysis_for_period(query, context, period_type):
    """–ü–æ–∫–∞–∑—É—î AI –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥
        now = datetime.now()
        if period_type == "week":
            start_date = (now - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "7 –¥–Ω—ñ–≤"
        elif period_type == "month":
            start_date = now.replace(day=1)
            period_name = "–º—ñ—Å—è—Ü—å"
        elif period_type == "quarter":
            start_date = now - timedelta(days=90)
            period_name = "–∫–≤–∞—Ä—Ç–∞–ª"
        elif period_type == "year":
            start_date = now - timedelta(days=365)
            period_name = "—Ä—ñ–∫"
        else:
            start_date = now - timedelta(days=30)
            period_name = "30 –¥–Ω—ñ–≤"

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transactions = get_user_transactions(user.id, start_date, now)
        
        # –§–æ—Ä–º—É—î–º–æ AI –∞–Ω–∞–ª—ñ–∑
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        
        # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤
        analysis_points = []
        
        if total_income > 0:
            expense_ratio = (total_expenses / total_income) * 100
            if expense_ratio > 90:
                analysis_points.append("‚ö†Ô∏è **–ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –≤–∏—Ç—Ä–∞—Ç** ‚Äî –≤–∏ –≤–∏—Ç—Ä–∞—á–∞—î—Ç–µ –ø–æ–Ω–∞–¥ 90% –¥–æ—Ö–æ–¥—É")
            elif expense_ratio > 70:
                analysis_points.append("‚ö° **–í–∏—Å–æ–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏** ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
            else:
                analysis_points.append("‚úÖ **–ü–æ–º—ñ—Ä–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏** ‚Äî –≤–∞—à —Ä—ñ–≤–µ–Ω—å –≤–∏—Ç—Ä–∞—Ç —É –Ω–æ—Ä–º—ñ")
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        categories_analysis = {}
        for transaction in transactions:
            if transaction.type == TransactionType.EXPENSE and transaction.category:
                cat_name = transaction.category.name
                if cat_name not in categories_analysis:
                    categories_analysis[cat_name] = []
                categories_analysis[cat_name].append(transaction.amount)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        for cat, amounts in categories_analysis.items():
            total_cat = sum(amounts)
            if total_expenses > 0:
                percentage = (total_cat / total_expenses) * 100
                if percentage > 30:
                    analysis_points.append(f"üéØ **{cat}** ‚Äî {percentage:.1f}% –±—é–¥–∂–µ—Ç—É. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –µ–∫–æ–Ω–æ–º—ñ—ó")
                elif percentage > 20:
                    analysis_points.append(f"üìä **{cat}** ‚Äî –∑–Ω–∞—á–Ω–∞ —á–∞—Å—Ç–∫–∞ –≤–∏—Ç—Ä–∞—Ç ({percentage:.1f}%)")
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if len(transactions) < 5:
            analysis_points.append("üìù **–ú–∞–ª–æ –¥–∞–Ω–∏—Ö** ‚Äî –¥–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ç–æ—á–Ω—ñ—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É")
        
        text = f"ü§ñ **AI –ê–Ω–∞–ª—ñ–∑ –∑–∞ {period_name}**\n\n"
        text += f"üí∞ *–î–æ—Ö–æ–¥–∏:* `{total_income:.2f} –≥—Ä–Ω`\n"
        text += f"üí∏ *–í–∏—Ç—Ä–∞—Ç–∏:* `{total_expenses:.2f} –≥—Ä–Ω`\n"
        text += f"üíº *–ë–∞–ª–∞–Ω—Å:* `{total_income - total_expenses:.2f} –≥—Ä–Ω`\n\n"
        
        text += "üîç **–ê–Ω–∞–ª—ñ–∑ AI:**\n\n"
        for point in analysis_points[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 5 –ø—É–Ω–∫—Ç—ñ–≤
            text += f"‚Ä¢ {point}\n\n"
        
        if not analysis_points:
            text += "üìä –ü–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó!"
        
        keyboard = [
            [
                InlineKeyboardButton("üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="ai_savings_tips"),
                InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"expense_stats_{period_type}")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_ai_analysis_for_period: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ AI –∞–Ω–∞–ª—ñ–∑—É",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")]])
        )

# ==================== –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ü–ï–†–Ü–û–î–Ü–í –î–ï–¢–ê–õ–¨–ù–û ====================

async def show_period_comparison_detail(query, context, period_type):
    """–î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return

        now = datetime.now()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥–∏
        if period_type == "week":
            # –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å - –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
            current_start = (now - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
            current_end = now
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å - 7 –¥–Ω—ñ–≤ –ø–µ—Ä–µ–¥ –ø–æ—Ç–æ—á–Ω–∏–º
            prev_start = (now - timedelta(days=13)).replace(hour=0, minute=0, second=0, microsecond=0)
            prev_end = (now - timedelta(days=7)).replace(hour=23, minute=59, second=59, microsecond=999999)
            period_name = "7 –¥–Ω—ñ–≤"
        elif period_type == "month":
            current_start = now.replace(day=1)
            current_end = now
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å
            if now.month == 1:
                prev_start = now.replace(year=now.year-1, month=12, day=1)
                prev_end = now.replace(day=1) - timedelta(days=1)
            else:
                prev_start = now.replace(month=now.month-1, day=1)
                # –û—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è
                prev_end = now.replace(day=1) - timedelta(days=1)
            period_name = "–º—ñ—Å—è—Ü—å"
        else:  # 30 –¥–Ω—ñ–≤
            current_start = now - timedelta(days=30)
            current_end = now
            prev_start = now - timedelta(days=60)
            prev_end = now - timedelta(days=30)
            period_name = "30 –¥–Ω—ñ–≤"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –æ–±–æ—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
        current_transactions = get_user_transactions(user.id, current_start, current_end)
        prev_transactions = get_user_transactions(user.id, prev_start, prev_end)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        current_income = sum(t.amount for t in current_transactions if t.type == TransactionType.INCOME)
        current_expenses = sum(t.amount for t in current_transactions if t.type == TransactionType.EXPENSE)
        
        prev_income = sum(t.amount for t in prev_transactions if t.type == TransactionType.INCOME)
        prev_expenses = sum(t.amount for t in prev_transactions if t.type == TransactionType.EXPENSE)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏
        income_change = current_income - prev_income
        expenses_change = current_expenses - prev_expenses
        
        income_change_percent = (income_change / prev_income * 100) if prev_income > 0 else 0
        expenses_change_percent = (expenses_change / prev_expenses * 100) if prev_expenses > 0 else 0
        
        # –ï–º–æ–¥–∑—ñ –¥–ª—è –∑–º—ñ–Ω
        income_emoji = "üìà" if income_change > 0 else "üìâ" if income_change < 0 else "‚û°Ô∏è"
        expenses_emoji = "üìà" if expenses_change > 0 else "üìâ" if expenses_change < 0 else "‚û°Ô∏è"
        
        text = f"üìä **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: –ø–æ—Ç–æ—á–Ω–∏–π vs –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π {period_name}**\n\n"
        
        text += f"üí∞ **–î–û–•–û–î–ò:**\n"
        text += f"–ü–æ—Ç–æ—á–Ω–∏–π: `{current_income:.2f} –≥—Ä–Ω`\n"
        text += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π: `{prev_income:.2f} –≥—Ä–Ω`\n"
        text += f"–ó–º—ñ–Ω–∞: {income_emoji} `{income_change:+.2f} –≥—Ä–Ω ({income_change_percent:+.1f}%)`\n\n"
        
        text += f"üí∏ **–í–ò–¢–†–ê–¢–ò:**\n"
        text += f"–ü–æ—Ç–æ—á–Ω–∏–π: `{current_expenses:.2f} –≥—Ä–Ω`\n"
        text += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π: `{prev_expenses:.2f} –≥—Ä–Ω`\n"
        text += f"–ó–º—ñ–Ω–∞: {expenses_emoji} `{expenses_change:+.2f} –≥—Ä–Ω ({expenses_change_percent:+.1f}%)`\n\n"
        
        # –í–∏—Å–Ω–æ–≤–∫–∏
        text += f"üìù **–í–ò–°–ù–û–í–ö–ò:**\n"
        if income_change > 0 and expenses_change < 0:
            text += "‚úÖ –Ü–¥–µ–∞–ª—å–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è: –¥–æ—Ö–æ–¥–∏ –∑—Ä–æ—Å–ª–∏, –≤–∏—Ç—Ä–∞—Ç–∏ –∑–º–µ–Ω—à–∏–ª–∏—Å—å!\n"
        elif income_change > 0 and expenses_change > 0:
            if expenses_change_percent < income_change_percent:
                text += "üëç –î–æ–±—Ä–µ: –¥–æ—Ö–æ–¥–∏ –∑—Ä–æ—Å—Ç–∞—é—Ç—å —à–≤–∏–¥—à–µ –∑–∞ –≤–∏—Ç—Ä–∞—Ç–∏\n"
            else:
                text += "‚ö†Ô∏è –£–≤–∞–≥–∞: –≤–∏—Ç—Ä–∞—Ç–∏ –∑—Ä–æ—Å—Ç–∞—é—Ç—å —à–≤–∏–¥—à–µ –∑–∞ –¥–æ—Ö–æ–¥–∏\n"
        elif income_change < 0 and expenses_change < 0:
            text += "üìä –ó–º–µ–Ω—à–∏–ª–∏—Å—å —ñ –¥–æ—Ö–æ–¥–∏, —ñ –≤–∏—Ç—Ä–∞—Ç–∏\n"
        else:
            text += "üìà –ó–º—ñ—à–∞–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ ‚Äî –≤–∞—Ä—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", callback_data=f"detailed_categories_{period_type}"),
                InlineKeyboardButton("üí° AI –ø–æ—Ä–∞–¥–∏", callback_data=f"ai_analysis_{period_type}")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_period_comparison")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_period_comparison_detail: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ –ø–µ—Ä—ñ–æ–¥—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_period_comparison")]])
        )

# ==================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ê–ù–ê–õ–Ü–¢–ò–ö–ò ====================

async def show_category_limits_settings(query, context):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"""
    keyboard = [
        [
            InlineKeyboardButton("üçî –á–∂–∞ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", callback_data="set_limit_food"),
            InlineKeyboardButton("üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="set_limit_transport")
        ],
        [
            InlineKeyboardButton("üõçÔ∏è –ü–æ–∫—É–ø–∫–∏", callback_data="set_limit_shopping"),
            InlineKeyboardButton("üè† –ñ–∏—Ç–ª–æ —Ç–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ", callback_data="set_limit_utilities")
        ],
        [
            InlineKeyboardButton("üíä –ó–¥–æ—Ä–æ–≤'—è", callback_data="set_limit_health"),
            InlineKeyboardButton("üé¨ –†–æ–∑–≤–∞–≥–∏", callback_data="set_limit_entertainment")
        ],
        [
            InlineKeyboardButton("üîß –î–æ–¥–∞—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π –ª—ñ–º—ñ—Ç", callback_data="set_custom_limit"),
            InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ª—ñ–º—ñ—Ç–∏", callback_data="view_all_limits")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")
        ]
    ]
    
    text = (
        "üéØ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π**\n\n"
        "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n"
        "–ë–æ—Ç –±—É–¥–µ –ø–æ–ø–µ—Ä–µ–¥–∂–∞—Ç–∏ –≤–∞—Å –ø—Ä–∏ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—ñ –¥–æ –ª—ñ–º—ñ—Ç—É.\n\n"
        "üìä *–ü–µ—Ä–µ–≤–∞–≥–∏ –ª—ñ–º—ñ—Ç—ñ–≤:*\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–∏—Ç—Ä–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ\n"
        "‚Ä¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∏\n"
        "‚Ä¢ –ö—Ä–∞—â–∏–π –±—é–¥–∂–µ—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n\n"
        "üí° *–ü–æ—Ä–∞–¥–∞:* –í—Å—Ç–∞–Ω–æ–≤–ª—é–π—Ç–µ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_ai_budget_planning(query, context):
    """AI –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        end_date = datetime.now()
        start_date = end_date - timedelta(days=90)
        transactions = get_user_transactions(user.id, start_date, end_date)
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        monthly_averages = {}
        total_months = 3
        
        for transaction in transactions:
            if transaction.type == TransactionType.EXPENSE and transaction.category:
                cat_name = transaction.category.name
                if cat_name not in monthly_averages:
                    monthly_averages[cat_name] = 0
                monthly_averages[cat_name] += transaction.amount
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—å–æ–º—ñ—Å—è—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏
        for cat in monthly_averages:
            monthly_averages[cat] = monthly_averages[cat] / total_months
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å—É–º–æ—é
        sorted_categories = sorted(monthly_averages.items(), key=lambda x: x[1], reverse=True)
        
        # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        total_avg_expenses = sum(monthly_averages.values())
        recommended_budget = total_avg_expenses * 1.15  # 15% –±—É—Ñ–µ—Ä
        
        text = (
            "ü§ñ **AI –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ë—é–¥–∂–µ—Ç—É**\n\n"
            f"üìä *–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ:*\n"
            f"üí∏ –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: `{total_avg_expenses:.2f} –≥—Ä–Ω/–º—ñ—Å`\n"
            f"üí∞ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –±—é–¥–∂–µ—Ç: `{recommended_budget:.2f} –≥—Ä–Ω/–º—ñ—Å`\n\n"
            f"üìà *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:*\n"
        )
        
        for i, (category, amount) in enumerate(sorted_categories[:5], 1):
            percentage = (amount / total_avg_expenses * 100) if total_avg_expenses > 0 else 0
            recommended_limit = amount * 1.1  # 10% –±—É—Ñ–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            text += f"{i}. **{category}**: `{amount:.2f}` –≥—Ä–Ω ({percentage:.1f}%)\n"
            text += f"   *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –ª—ñ–º—ñ—Ç:* `{recommended_limit:.2f}` –≥—Ä–Ω\n\n"
        
        text += (
            "üí° **AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n"
            "‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ª—ñ–º—ñ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n"
            "‚Ä¢ –î–æ–¥–∞–π—Ç–µ 10-15% –±—É—Ñ–µ—Ä –¥–ª—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç\n"
            "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Ç–∞ –∫–æ—Ä–∏–≥—É–π—Ç–µ –±—é–¥–∂–µ—Ç —â–æ–º—ñ—Å—è—Ü—è\n"
            "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ —Ç—Ä–µ–Ω–¥–∏ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="create_ai_budget"),
                InlineKeyboardButton("üéØ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏", callback_data="set_category_limits")
            ],
            [
                InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", callback_data="detailed_budget_analysis"),
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", callback_data="ai_budget_planning")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_ai_budget_planning: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ AI –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")]])
        )

async def show_savings_goals(query, context):
    """–¶—ñ–ª—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å"""
    keyboard = [
        [
            InlineKeyboardButton("üéØ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ü—ñ–ª—å", callback_data="create_savings_goal"),
            InlineKeyboardButton("üìä –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–ª—ñ", callback_data="view_current_goals")
        ],
        [
            InlineKeyboardButton("üèÜ –î–æ—Å—è–≥–Ω—É—Ç—ñ —Ü—ñ–ª—ñ", callback_data="achieved_goals"),
            InlineKeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å —Ü—ñ–ª–µ–π", callback_data="goals_progress")
        ],
        [
            InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∏ –ø–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è—Ö", callback_data="savings_tips"),
            InlineKeyboardButton("üîî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data="goals_reminders")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_ai_recommendations")
        ]
    ]
    
    text = (
        "üéØ **–¶—ñ–ª—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å**\n\n"
        "–í—Å—Ç–∞–Ω–æ–≤–ª—é–π—Ç–µ —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ü—ñ–ª—ñ:\n\n"
        "üí∞ *–¢–∏–ø–∏ —Ü—ñ–ª–µ–π:*\n"
        "‚Ä¢ –ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ –ø–æ–∫—É–ø–∫—É\n"
        "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ñ–æ–Ω–¥\n"
        "‚Ä¢ –í—ñ–¥–ø—É—Å—Ç–∫–∞ –∞–±–æ –ø–æ–¥–æ—Ä–æ–∂\n"
        "‚Ä¢ –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó\n"
        "‚Ä¢ –ü–æ–≥–∞—à–µ–Ω–Ω—è –±–æ—Ä–≥—ñ–≤\n\n"
        "üìä *–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:*\n"
        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å\n"
        "‚Ä¢ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ—Å—è–≥–Ω–µ–Ω—å\n\n"
        "üèÜ *–ú–æ—Ç–∏–≤–∞—Ü—ñ—è:* –ß—ñ—Ç–∫—ñ —Ü—ñ–ª—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑–∞–æ—â–∞–¥–∂—É–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ!"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ==================== –ù–û–í–Ü –†–û–ó–®–ò–†–ï–ù–Ü –§–£–ù–ö–¶–Ü–á –ê–ù–ê–õ–Ü–¢–ò–ö–ò ====================

async def show_analytics_visualizations(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üî• –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –≤–∏—Ç—Ä–∞—Ç", callback_data="viz_spending_heatmap"),
                InlineKeyboardButton("üí∏ –ì—Ä–æ—à–æ–≤–∏–π –ø–æ—Ç—ñ–∫", callback_data="viz_cash_flow")
            ],
            [
                InlineKeyboardButton("üìä –¢—Ä–µ–Ω–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="viz_category_trends"),
                InlineKeyboardButton("üìÖ –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –≤–∏—Ç—Ä–∞—Ç", callback_data="viz_spending_patterns")
            ],
            [
                InlineKeyboardButton("üç© –ü–æ–Ω—á–∏–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞", callback_data="viz_expense_donut"),
                InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç vs –§–∞–∫—Ç", callback_data="viz_budget_vs_actual")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", callback_data="analytics")
            ]
        ]
        
        text = (
            "üìä **–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö**\n\n"
            "üé® *–í–∏–±—ñ—Ä –∫—Ä–∞—Å–∏–≤–∏—Ö —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤:*\n\n"
            "üî• *–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞* ‚Äî –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø–æ –≥–æ–¥–∏–Ω–∞—Ö —ñ –¥–Ω—è—Ö\n"
            "üí∏ *–ì—Ä–æ—à–æ–≤–∏–π –ø–æ—Ç—ñ–∫* ‚Äî –¥–∏–Ω–∞–º—ñ–∫–∞ –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç\n"
            "üìä *–¢—Ä–µ–Ω–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π* ‚Äî –∑–º—ñ–Ω–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö\n"
            "üìÖ *–ü–∞—Ç—Ç–µ—Ä–Ω–∏ –≤–∏—Ç—Ä–∞—Ç* ‚Äî –∞–Ω–∞–ª—ñ–∑ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è —Ç–∞ –º—ñ—Å—è—Ü—è—Ö\n"
            "üç© *–ü–æ–Ω—á–∏–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞* ‚Äî —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç\n"
            "üí∞ *–ë—é–¥–∂–µ—Ç vs –§–∞–∫—Ç* ‚Äî –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ —ñ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ\n\n"
            "üí° *–ö–æ–∂–µ–Ω –≥—Ä–∞—Ñ—ñ–∫ –º—ñ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ —ñ–Ω—Å–∞–π—Ç–∏!*"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_analytics_visualizations: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

async def show_spending_heatmap(query, context):
    """–ü–æ–∫–∞–∑—É—î —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É –≤–∏—Ç—Ä–∞—Ç"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date=start_date, end_date=now)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
        transaction_data = [
            {
                'transaction_date': t.transaction_date,
                'amount': t.amount,
                'type': t.type.value
            }
            for t in transactions
        ]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É
        heatmap_buffer = advanced_analytics.create_spending_heatmap(transaction_data)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=heatmap_buffer,
            caption="üî• **–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç**\n\n–ü–æ–∫–∞–∑—É—î –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –≥–æ–¥–∏–Ω–∏ —Ç–∞ –¥–Ω—ñ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç. –ß–∏–º —Ç–µ–º–Ω—ñ—à–µ –∫–æ–ª—ñ—Ä, —Ç–∏–º –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π", callback_data="analytics_visualizations")
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error in show_spending_heatmap: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_visualizations")]])
        )

async def show_cash_flow_chart(query, context):
    """–ü–æ–∫–∞–∑—É—î –≥—Ä–∞—Ñ—ñ–∫ –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date=start_date, end_date=now)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        transaction_data = [
            {
                'transaction_date': t.transaction_date,
                'amount': t.amount,
                'type': t.type.value
            }
            for t in transactions
        ]
        
        if not transaction_data:
            await query.edit_message_text(
                "üì≠ –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_charts")]])
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É
        chart_buffer = advanced_analytics.create_cash_flow_chart(transaction_data)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=chart_buffer,
            caption="üí∏ **–ê–Ω–∞–ª—ñ–∑ –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É**\n\n–í–µ—Ä—Ö–Ω—è —á–∞—Å—Ç–∏–Ω–∞: —â–æ–¥–µ–Ω–Ω—ñ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏\n–ù–∏–∂–Ω—è —á–∞—Å—Ç–∏–Ω–∞: –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å\n\nüìà –ó–µ–ª–µ–Ω–∞ –∑–æ–Ω–∞ = –ø—Ä–æ—Ñ—ñ—Ü–∏—Ç\nüìâ –ß–µ—Ä–≤–æ–Ω–∞ –∑–æ–Ω–∞ = –¥–µ—Ñ—ñ—Ü–∏—Ç",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π", callback_data="analytics_visualizations")
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error in show_cash_flow_chart: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_visualizations")]])
        )

async def show_analytics_trends(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ç—Ä–µ–Ω–¥—ñ–≤ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤", callback_data="trends_analysis"),
                InlineKeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç", callback_data="trends_forecast")
            ],
            [
                InlineKeyboardButton("üîç –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π", callback_data="trends_anomalies"),
                InlineKeyboardButton("üìä –°–µ–∑–æ–Ω–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏", callback_data="trends_seasonality")
            ],
            [
                InlineKeyboardButton("üí° –Ü–Ω—Å–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π", callback_data="trends_insights"),
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", callback_data="analytics")
            ]
        ]
        
        text = (
            "üîç **–¢—Ä–µ–Ω–¥–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏**\n\n"
            "üß† *–†–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤:*\n\n"
            "üìà *–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤* ‚Äî –Ω–∞–ø—Ä—è–º–æ–∫ –∑–º—ñ–Ω–∏ –≤–∏—Ç—Ä–∞—Ç —ñ –¥–æ—Ö–æ–¥—ñ–≤\n"
            "üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç* ‚Äî –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–∏—Ç—Ä–∞—Ç\n"
            "üîç *–í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π* ‚Äî –Ω–µ–∑–≤–∏—á–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó\n"
            "üìä *–°–µ–∑–æ–Ω–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏* ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –∑–º—ñ–Ω–∏ –≤ –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ\n"
            "üí° *–Ü–Ω—Å–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π* ‚Äî –∫–æ—Ä–∏—Å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏\n\n"
            "üéØ *–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤!*"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_analytics_trends: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç—Ä–µ–Ω–¥—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

async def show_trends_analysis(query, context):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 60 –¥–Ω—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        now = datetime.now()
        start_date = now - timedelta(days=60)
        transactions = get_user_transactions(user.id, start_date=start_date, end_date=now)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        transaction_data = [
            {
                'transaction_date': t.transaction_date,
                'amount': t.amount,
                'type': t.type.value,
                'category_name': t.category.name if t.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
            }
            for t in transactions
        ]
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏
        trends_result = trend_analyzer.analyze_spending_trends(transaction_data)
        
        if "error" in trends_result:
            await query.edit_message_text(
                f"‚ùå {trends_result['error']}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_trends")]])
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª—ñ–∑—É
        overall_trend = trends_result.get("overall_trend", {})
        text = "üìà **–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –≤–∏—Ç—Ä–∞—Ç**\n\n"
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥
        if overall_trend:
            direction = overall_trend.get("direction", "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π")
            strength = overall_trend.get("strength", "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∞")
            avg_daily = overall_trend.get("avg_daily", 0)
            growth_per_day = overall_trend.get("growth_per_day", 0)
            
            trend_emoji = {
                "–∑—Ä–æ—Å—Ç–∞—é—á–∏–π": "üìà",
                "—Å–ø–∞–¥–Ω–∏–π": "üìâ", 
                "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π": "üìä"
            }.get(direction, "üìä")
            
            text += f"{trend_emoji} *–ó–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥:* {direction} ({strength})\n"
            text += f"üí∞ *–°–µ—Ä–µ–¥–Ω—å–æ —â–æ–¥–Ω—è:* {avg_daily:.2f} –≥—Ä–Ω\n"
            
            if abs(growth_per_day) > 1:
                text += f"üìä *–ó–º—ñ–Ω–∞ —â–æ–¥–Ω—è:* {growth_per_day:+.2f} –≥—Ä–Ω\n"
        
        # –¢—Ä–µ–Ω–¥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        category_trends = trends_result.get("category_trends", {})
        if category_trends:
            text += f"\nüè∑Ô∏è **–¢—Ä–µ–Ω–¥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:**\n"
            for category, data in list(category_trends.items())[:5]:
                trend = data.get("trend", "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π")
                change = data.get("change_percent", 0)
                trend_emoji = "üìà" if "–∑—Ä–æ—Å—Ç–∞—î" in trend else "üìâ" if "—Å–ø–∞–¥–∞—î" in trend else "üìä"
                text += f"{trend_emoji} *{category}:* {trend}"
                if abs(change) > 5:
                    text += f" ({change:+.1f}%)"
                text += "\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        forecast = trends_result.get("forecast", {})
        if "monthly_forecast" in forecast:
            monthly_forecast = forecast["monthly_forecast"]
            current_trend = forecast.get("current_trend", "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π")
            text += f"\nüîÆ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å:**\n"
            text += f"üí∏ *–û—á—ñ–∫—É–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:* {monthly_forecast:.2f} –≥—Ä–Ω\n"
            text += f"üìä *–ü–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–Ω–¥:* {current_trend}\n"
            
            confidence = forecast.get("confidence_interval", {})
            if confidence:
                lower = confidence.get("lower", 0)
                upper = confidence.get("upper", 0)
                text += f"üìè *–î—ñ–∞–ø–∞–∑–æ–Ω:* {lower:.0f} - {upper:.0f} –≥—Ä–Ω\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", callback_data="trends_forecast"),
                InlineKeyboardButton("üîç –ê–Ω–æ–º–∞–ª—ñ—ó", callback_data="trends_anomalies")
            ],
            [
                InlineKeyboardButton("üìä –°–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å", callback_data="trends_seasonality"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_trends")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_trends_analysis: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_trends")]])
        )

async def show_financial_health_score(query, context):
    """–ü–æ–∫–∞–∑—É—î –æ—Ü—ñ–Ω–∫—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date=start_date, end_date=now)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        
        # –©–æ–¥–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        daily_expenses = {}
        for t in transactions:
            if t.type == TransactionType.EXPENSE:
                date_key = t.transaction_date.strftime("%Y-%m-%d")
                daily_expenses[date_key] = daily_expenses.get(date_key, 0) + t.amount
        
        # –î–∂–µ—Ä–µ–ª–∞ –¥–æ—Ö–æ–¥—ñ–≤
        income_sources = []
        for t in transactions:
            if t.type == TransactionType.INCOME and t.category:
                income_sources.append(t.category.name)
        
        user_data = {
            "total_income": total_income,
            "total_expenses": total_expenses,
            "monthly_income": total_income,
            "monthly_expenses": total_expenses,
            "monthly_budget": user.monthly_budget,
            "daily_expenses": list(daily_expenses.values()),
            "income_sources": income_sources
        }
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ—Ü—ñ–Ω–∫—É –∑–¥–æ—Ä–æ–≤'—è
        health_score = insights_engine.generate_financial_health_score(user_data)
        
        if "error" in health_score:
            await query.edit_message_text(
                f"‚ùå {health_score['error']}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        score = health_score.get("overall_score", 0)
        level = health_score.get("health_level", "–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π")
        emoji = health_score.get("emoji", "‚ùì")
        
        text = f"{emoji} **–û—Ü—ñ–Ω–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è**\n\n"
        text += f"üéØ *–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:* {score:.1f}/100\n"
        text += f"üìä *–†—ñ–≤–µ–Ω—å:* {level}\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞ —Ä–æ–∑–±–∏–≤–∫–∞
        components = health_score.get("components", {})
        
        if "savings" in components:
            savings = components["savings"]
            text += f"üí∞ *–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è:* {savings.get('score', 0):.0f}/100\n"
            text += f"   {savings.get('description', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö')}\n\n"
        
        if "stability" in components:
            stability = components["stability"]
            text += f"üìä *–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å:* {stability.get('score', 0):.0f}/100\n"
            text += f"   {stability.get('description', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö')}\n\n"
        
        if "budget" in components:
            budget = components["budget"]
            text += f"üéØ *–ë—é–¥–∂–µ—Ç:* {budget.get('score', 0):.0f}/100\n"
            text += f"   {budget.get('description', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö')}\n\n"
        
        if "income" in components:
            income = components["income"]
            text += f"üíº *–î–æ—Ö–æ–¥–∏:* {income.get('score', 0):.0f}/100\n"
            text += f"   {income.get('description', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö')}\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = health_score.get("recommendations", [])
        if recommendations:
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:**\n"
            for rec in recommendations[:3]:
                text += f"‚Ä¢ {rec}\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏", callback_data="analytics_insights"),
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É", callback_data="analytics_health_score")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", callback_data="analytics")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_financial_health_score: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

async def show_personal_insights(query, context):
    """–ü–æ–∫–∞–∑—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date, now)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        transaction_data = [
            {
                'transaction_date': t.transaction_date,
                'amount': t.amount,
                'type': t.type.value,
                'category_name': t.category.name if t.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
            }
            for t in transactions
        ]
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏
        insights = insights_engine.generate_spending_insights(transaction_data, period_days=30)
        
        if not insights or (len(insights) == 1 and "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö" in insights[0]):
            await query.edit_message_text(
                "üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤.\n\n–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —ñ–Ω—Å–∞–π—Ç–∞–º–∏
        text = "üéØ **–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏**\n\n"
        text += "üîç *–ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 30 –¥–Ω—ñ–≤:*\n\n"
        
        for i, insight in enumerate(insights, 1):
            text += f"{i}. {insight}\n\n"
        
        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_expenses = sum(t['amount'] for t in transaction_data if t['type'] == 'expense')
        total_income = sum(t['amount'] for t in transaction_data if t['type'] == 'income')
        transaction_count = len([t for t in transaction_data if t['type'] == 'expense'])
        
        text += "üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"üí∏ –í–∏—Ç—Ä–∞—Ç: {total_expenses:.2f} –≥—Ä–Ω\n"
        text += f"üí∞ –î–æ—Ö–æ–¥—ñ–≤: {total_income:.2f} –≥—Ä–Ω\n"
        text += f"üî¢ –û–ø–µ—Ä–∞—Ü—ñ–π: {transaction_count}\n"
        
        if total_income > 0:
            savings_rate = ((total_income - total_expenses) / total_income) * 100
            text += f"üíæ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings_rate:.1f}%\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üí° –§—ñ–Ω–∞–Ω—Å–æ–≤–µ –∑–¥–æ—Ä–æ–≤'—è", callback_data="analytics_health_score"),
                InlineKeyboardButton("üîç –¢—Ä–µ–Ω–¥–∏", callback_data="analytics_trends")
            ],
            [
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Å–∞–π—Ç–∏", callback_data="analytics_insights"),
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", callback_data="analytics")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_personal_insights: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

# ==================== –°–ü–†–û–©–ï–ù–Ü –§–£–ù–ö–¶–Ü–á –ê–ù–ê–õ–Ü–¢–ò–ö–ò ====================

async def show_analytics_detailed(query, context):
    """–ü–æ–∫–∞–∑—É—î –∫–æ—Ä–∏—Å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∞–º–∏"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date=start_date, end_date=now)
        
        # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        balance = total_income - total_expenses
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        category_expenses = {}
        for t in transactions:
            if t.type == TransactionType.EXPENSE and t.category:
                cat_name = t.category.name
                category_expenses[cat_name] = category_expenses.get(cat_name, 0) + t.amount
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
        top_category = max(category_expenses.items(), key=lambda x: x[1]) if category_expenses else ("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö", 0)
        top_category_percent = (top_category[1] / total_expenses * 100) if total_expenses > 0 else 0
        
        # –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –¥–µ–Ω—å
        daily_avg = total_expenses / 30
        
        # –ê–Ω–∞–ª—ñ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π (–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ 30 –¥–Ω—è–º–∏)
        prev_start = start_date - timedelta(days=30)
        prev_end = start_date
        prev_transactions = get_user_transactions(user.id, start_date=prev_start, end_date=prev_end)
        prev_expenses = sum(t.amount for t in prev_transactions if t.type == TransactionType.EXPENSE)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä–µ–Ω–¥—É
        trend = "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π"
        trend_emoji = "üìä"
        if prev_expenses > 0:
            change_percent = ((total_expenses - prev_expenses) / prev_expenses) * 100
            if change_percent > 10:
                trend = "–∑—Ä–æ—Å—Ç–∞—é—á–∏–π"
                trend_emoji = "üìà"
            elif change_percent < -10:
                trend = "—Å–ø–∞–¥–Ω–∏–π"
                trend_emoji = "üìâ"
        
        # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å
        savings_rate = ((total_income - total_expenses) / total_income * 100) if total_income > 0 else 0
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏
        text = "ÔøΩ **–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
        text += "üí∞ **–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤:**\n"
        text += f"üíµ –î–æ—Ö–æ–¥–∏: `{total_income:.2f} –≥—Ä–Ω`\n"
        text += f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏: `{total_expenses:.2f} –≥—Ä–Ω`\n"
        text += f"üìä –ë–∞–ª–∞–Ω—Å: `{balance:.2f} –≥—Ä–Ω`\n"
        text += f"üìÖ –ù–∞ –¥–µ–Ω—å: `{daily_avg:.2f} –≥—Ä–Ω`\n\n"
        
        # –ê–Ω–∞–ª—ñ–∑ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å
        text += "üíé **–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è:**\n"
        if savings_rate >= 20:
            text += f"üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ! `{savings_rate:.1f}%` –≤—ñ–¥ –¥–æ—Ö–æ–¥—É\n"
            text += "‚úÖ –í–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ\n\n"
        elif savings_rate >= 10:
            text += f"üëç –î–æ–±—Ä–µ! `{savings_rate:.1f}%` –∑–∞–æ—â–∞–¥–∂–µ–Ω—å\n"
            text += "üí° –ú–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –¥–æ 20%\n\n"
        elif savings_rate >= 0:
            text += f"ÔøΩ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: `{savings_rate:.1f}%`\n"
            text += "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ 10-20%\n\n"
        else:
            text += f"üö® –ü–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∞ `{abs(savings_rate):.1f}%`\n"
            text += "üí° –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏\n\n"
        
        # –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç
        text += "üéØ **–ù–∞–π–±—ñ–ª—å—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏:**\n"
        if top_category[1] > 0:
            text += f"üèÜ **{top_category[0]}**\n"
            text += f"üí∞ `{top_category[1]:.2f} –≥—Ä–Ω` ({top_category_percent:.1f}%)\n"
            
            if top_category_percent > 40:
                text += "‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ –¥–ª—è –æ–¥–Ω—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n"
            elif top_category_percent > 25:
                text += "üìä –ü–æ–º—ñ—Ä–Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è\n"
            else:
                text += "‚úÖ –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ\n"
        text += "\n"
        
        # –¢—Ä–µ–Ω–¥ –≤–∏—Ç—Ä–∞—Ç
        text += f"üìà **–¢–µ–Ω–¥–µ–Ω—Ü—ñ—è:** {trend_emoji} {trend}\n"
        if prev_expenses > 0:
            change_amount = total_expenses - prev_expenses
            text += f"–ó–º—ñ–Ω–∞: `{change_amount:+.2f} –≥—Ä–Ω` –∑–∞ –º—ñ—Å—è—Ü—å\n\n"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∏
        text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n"
        
        conclusions = []
        if savings_rate < 0:
            conclusions.append("üö® –°–∫–æ—Ä–æ—Ç—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–µ–≥–∞–π–Ω–æ")
        elif savings_rate < 10:
            conclusions.append("üìà –ó–±—ñ–ª—å—à—ñ—Ç—å –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è")
        
        if top_category_percent > 35:
            conclusions.append(f"üéØ –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ '{top_category[0]}'")
        
        if trend == "–∑—Ä–æ—Å—Ç–∞—é—á–∏–π":
            conclusions.append("‚ö° –ö–æ–Ω—Ç—Ä–æ–ª—é–π—Ç–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç")
        elif trend == "—Å–ø–∞–¥–Ω–∏–π":
            conclusions.append("‚úÖ –í–∏ –µ–∫–æ–Ω–æ–º–∏—Ç–µ - —Ç–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!")
        
        weekly_budget = daily_avg * 7
        conclusions.append(f"üìÖ –¢–∏–∂–Ω–µ–≤–∏–π –±—é–¥–∂–µ—Ç: ~{weekly_budget:.0f} –≥—Ä–Ω")
        
        if not conclusions:
            conclusions.append("üìä –§—ñ–Ω–∞–Ω—Å–∏ –≤ –Ω–æ—Ä–º—ñ")
        
        for conclusion in conclusions[:4]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            text += f"‚Ä¢ {conclusion}\n"
        
        keyboard = [
            [
                InlineKeyboardButton("ÔøΩ –ì—Ä–∞—Ñ—ñ–∫–∏", callback_data="analytics_charts"),
                InlineKeyboardButton("üí° AI –ü–æ—Ä–∞–¥–∏", callback_data="analytics_insights_simple")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_analytics_detailed: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

async def show_analytics_charts(query, context):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –¥–≤–æ–º–∞ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    try:
        text = (
            "üìä **–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥—ñ–∞–≥—Ä–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:\n\n"
            "üç© **–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞**\n"
            "‚Ä¢ –†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö\n"
            "‚Ä¢ –ù–∞–æ—á–Ω–æ –ø–æ–∫–∞–∑—É—î –¥–µ –Ω–∞–π–±—ñ–ª—å—à–µ —Ç—Ä–∞—Ç\n"
            "‚Ä¢ –í—ñ–¥—Å–æ—Ç–∫–∏ —Ç–∞ —Å—É–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n\n"
            "üìä **–°—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫**\n"
            "‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç\n"
            "‚Ä¢ –î–∏–Ω–∞–º—ñ–∫–∞ –∑–º—ñ–Ω –∑–∞ –ø–µ—Ä—ñ–æ–¥\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤\n\n"
            "ÔøΩ *–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–∞–≥—Ä–∞–º–∏ –æ–±–µ—Ä–µ—Ç–µ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É*"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üç© –ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞", callback_data="chart_type_pie"),
                InlineKeyboardButton("üìä –°—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π", callback_data="chart_type_bar")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_analytics_charts: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

async def show_analytics_insights_simple(query, context):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ—Å—Ç—ñ —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date, now)
        
        if not transactions:
            await query.edit_message_text(
                "üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.\n\n–î–æ–¥–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
            )
            return
        
        # –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        category_totals = {}
        for t in transactions:
            if t.type == TransactionType.EXPENSE and t.category:
                cat_name = t.category.name
                category_totals[cat_name] = category_totals.get(cat_name, 0) + t.amount
        
        insights = []
        
        # 1. –ê–Ω–∞–ª—ñ–∑ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å
        if total_income > 0:
            savings_rate = ((total_income - total_expenses) / total_income) * 100
            if savings_rate >= 20:
                insights.append("üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∏ –∑–∞–æ—â–∞–¥–∂—É—î—Ç–µ –ø–æ–Ω–∞–¥ 20% –¥–æ—Ö–æ–¥—ñ–≤")
            elif savings_rate >= 10:
                insights.append("üëç –î–æ–±—Ä–µ! –ù–∞–º–∞–≥–∞–π—Ç–µ—Å—å –∑–±—ñ–ª—å—à–∏—Ç–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –¥–æ 20%")
            elif savings_rate >= 0:
                insights.append("üí™ –í–∏ —Ç—Ä–∏–º–∞—î—Ç–µ –±–∞–ª–∞–Ω—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–æ—â–∞–¥–∂—É–≤–∞—Ç–∏ —Ö–æ—á–∞ –± 10%")
            else:
                insights.append("‚ö†Ô∏è –í–∏—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –¥–æ—Ö–æ–¥–∏. –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")
        
        # 2. –ê–Ω–∞–ª—ñ–∑ –Ω–∞–π–±—ñ–ª—å—à–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if category_totals:
            top_category = max(category_totals.items(), key=lambda x: x[1])
            top_percentage = (top_category[1] / total_expenses) * 100
            
            if top_percentage > 40:
                insights.append(f"üéØ –í–∞—à–∞ –Ω–∞–π–±—ñ–ª—å—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç ‚Äî {top_category[0]} ({top_percentage:.1f}%). –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç—É—Ç –Ω–∞ 10-15%.")
            elif top_percentage > 25:
                insights.append(f"üìä –ù–∞–π–±—ñ–ª—å—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {top_category[0]} ({top_percentage:.1f}%)")
        
        # 3. –ê–Ω–∞–ª—ñ–∑ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∏—Ç—Ä–∞—Ç
        avg_daily = total_expenses / 30
        if user.monthly_budget:
            target_daily = user.monthly_budget / 30
            if avg_daily > target_daily:
                insights.append(f"üìâ –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ {avg_daily:.0f} –≥—Ä–Ω/–¥–µ–Ω—å –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å —Ü—ñ–ª—å–æ–≤—ñ {target_daily:.0f} –≥—Ä–Ω/–¥–µ–Ω—å")
            else:
                insights.append(f"‚úÖ –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ {avg_daily:.0f} –≥—Ä–Ω/–¥–µ–Ω—å –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É")
        else:
            insights.append(f"üìä –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {avg_daily:.0f} –≥—Ä–Ω –Ω–∞ –¥–µ–Ω—å")
        
        # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –ø–æ –±—é–¥–∂–µ—Ç—É
        if not user.monthly_budget:
            recommended_budget = total_expenses * 1.1  # +10% –¥–ª—è –ø–æ–¥—É—à–∫–∏
            insights.append(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç: {recommended_budget:.0f} –≥—Ä–Ω/–º—ñ—Å—è—Ü—å")
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
        text = "üí° **–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏**\n\n"
        text += "üß† –ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤:\n\n"
        
        for i, insight in enumerate(insights[:4], 1):
            text += f"{i}. {insight}\n\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", callback_data="analytics_forecast"),
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫–∏", callback_data="analytics_charts")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", callback_data="analytics")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_analytics_insights_simple: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ä–∞–¥",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

async def show_analytics_forecast(query, context):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ—Å—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date, now)
        
        expense_transactions = [t for t in transactions if t.type == TransactionType.EXPENSE]
        
        if len(expense_transactions) < 7:
            await query.edit_message_text(
                "üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É.\n\n–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–º—ñ–Ω—ñ–º—É–º 7) –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
            )
            return
        
        # –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–µ—Ä–µ–¥–Ω—ñ—Ö
        total_expenses = sum(t.amount for t in expense_transactions)
        avg_daily = total_expenses / 30
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å —Ç–∞ –º—ñ—Å—è—Ü—å
        weekly_forecast = avg_daily * 7
        monthly_forecast = avg_daily * 30
        
        # –¢—Ä–µ–Ω–¥ (–æ—Å—Ç–∞–Ω–Ω—ñ 15 –¥–Ω—ñ–≤ vs –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 15 –¥–Ω—ñ–≤)
        mid_point = len(expense_transactions) // 2
        if mid_point > 3:
            recent_expenses = expense_transactions[mid_point:]
            older_expenses = expense_transactions[:mid_point]
            
            recent_avg = sum(t.amount for t in recent_expenses) / len(recent_expenses) if recent_expenses else 0
            older_avg = sum(t.amount for t in older_expenses) / len(older_expenses) if older_expenses else 0
            
            if recent_avg > older_avg * 1.1:
                trend = "–∑—Ä–æ—Å—Ç–∞—é—á–∏–π"
                trend_emoji = "üìà"
            elif recent_avg < older_avg * 0.9:
                trend = "—Å–ø–∞–¥–Ω–∏–π"
                trend_emoji = "üìâ"
            else:
                trend = "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π"
                trend_emoji = "üìä"
        else:
            trend = "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π"
            trend_emoji = "üìä"
        
        text = "üîÆ **–ü—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç**\n\n"
        text += f"üìä *–ü–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–Ω–¥:* –í–∏—Ç—Ä–∞—Ç–∏ {trend}\n\n"
        
        text += "üìà **–ü—Ä–æ–≥–Ω–æ–∑–∏:**\n"
        text += f"üìÖ –ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: `{weekly_forecast:.2f} –≥—Ä–Ω`\n"
        text += f"üìÜ –ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å: `{monthly_forecast:.2f} –≥—Ä–Ω`\n\n"
        
        text += f"üìä **–î–µ—Ç–∞–ª—ñ:**\n"
        text += f"üí∏ –°–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –¥–µ–Ω—å: `{avg_daily:.2f} –≥—Ä–Ω`\n"
        text += f"üìù –ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ {len(expense_transactions)} –æ–ø–µ—Ä–∞—Ü—ñ—è—Ö\n\n"
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –±—é–¥–∂–µ—Ç–æ–º
        if user.monthly_budget:
            if monthly_forecast > user.monthly_budget:
                over_budget = monthly_forecast - user.monthly_budget
                text += f"‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–µ—Ä–µ–≤–∏—â—É—î –±—é–¥–∂–µ—Ç –Ω–∞ `{over_budget:.2f} –≥—Ä–Ω`\n"
                text += f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ `{over_budget/30:.2f} –≥—Ä–Ω/–¥–µ–Ω—å`"
            else:
                under_budget = user.monthly_budget - monthly_forecast
                text += f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É\n"
                text += f"üí∞ –ó–∞–ª–∏—à–∏—Ç—å—Å—è `{under_budget:.2f} –≥—Ä–Ω` –≤—ñ–¥ –±—é–¥–∂–µ—Ç—É"
        else:
            text += f"üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –±—é–¥–∂–µ—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º"
        
        keyboard = [
            [
                InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∏", callback_data="analytics_insights_simple"),
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫–∏", callback_data="analytics_charts")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", callback_data="analytics")
            ]
        ]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_analytics_forecast: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")]])
        )

async def show_chart_data_type_selection(query, context, chart_type):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–∞–Ω–∏—Ö (–≤–∏—Ç—Ä–∞—Ç–∏/–¥–æ—Ö–æ–¥–∏) –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É"""
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –≥—Ä–∞—Ñ—ñ–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        context.user_data['selected_chart_type'] = chart_type
        
        chart_name = "üç© –ö—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏" if chart_type == "pie" else "üìä –°—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É"
        
        if chart_type == "pie":
            text = (
                f"üìä **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {chart_name}**\n\n"
                "–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏?\n\n"
                "üí∏ **–í–∏—Ç—Ä–∞—Ç–∏** ‚Äî –¥–µ –Ω–∞–π–±—ñ–ª—å—à–µ —Ç—Ä–∞—Ç?\n"
                "‚Ä¢ –ü–æ–∫–∞–∂–µ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç\n"
                "‚Ä¢ –í—ñ–¥—Å–æ—Ç–∫–∏ —Ç–∞ —Å—É–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n\n"
                "üí∞ **–î–æ—Ö–æ–¥–∏** ‚Äî –∑–≤—ñ–¥–∫–∏ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∫–æ—à—Ç–∏?\n"
                "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–∏—Ö –¥–∂–µ—Ä–µ–ª –¥–æ—Ö–æ–¥—É\n"
                "‚Ä¢ –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å\n\n"
                "üëÜ *–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É*"
            )
        else:
            text = (
                f"üìä **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {chart_name}**\n\n"
                "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n\n"
                "üí∏ **–í–∏—Ç—Ä–∞—Ç–∏** ‚Äî —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö\n"
                "üí∞ **–î–æ—Ö–æ–¥–∏** ‚Äî —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–∞—à–∏—Ö –¥–æ—Ö–æ–¥—ñ–≤ –ø–æ –¥–∂–µ—Ä–µ–ª–∞—Ö\n"
                "üìä **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è** ‚Äî –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏ —Ä–∞–∑–æ–º\n"
            )
        
        keyboard = [
            [
                InlineKeyboardButton("üí∏ –í–∏—Ç—Ä–∞—Ç–∏", callback_data=f"chart_data_expenses_{chart_type}"),
                InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥–∏", callback_data=f"chart_data_income_{chart_type}")
            ]
        ]
        
        if chart_type == "bar":
            keyboard.insert(1, [InlineKeyboardButton("üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", callback_data=f"chart_data_comparison_{chart_type}")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", callback_data="analytics_charts")])
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_chart_data_type_selection: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_charts")]])
        )

async def show_chart_period_selection(query, context, chart_type, data_type):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É"""
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –¥–∞–Ω–∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        context.user_data['selected_data_type'] = data_type
        
        chart_name = "üç© –ö—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏" if chart_type == "pie" else "üìä –°—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É"
        data_name = {
            "expenses": "üí∏ –í–∏—Ç—Ä–∞—Ç–∏",
            "income": "üí∞ –î–æ—Ö–æ–¥–∏", 
            "comparison": "üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"
        }.get(data_type, "–î–∞–Ω—ñ")
        
        if chart_type == "pie":
            text = (
                f"üìä **–ü–µ—Ä—ñ–æ–¥ –¥–ª—è {chart_name}**\n\n"
                f"–ê–Ω–∞–ª—ñ–∑: {data_name}\n\n"
                "–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—ñ–∞–≥—Ä–∞–º—É?\n\n"
                "üìÖ **–ú—ñ—Å—è—Ü—å** ‚Äî –Ω–∞–π–ø–æ–≤–Ω—ñ—à–∞ –∫–∞—Ä—Ç–∏–Ω–∞\n"
                "‚Ä¢ –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ 30 –¥–Ω—ñ–≤\n\n"
                "üìÜ **–¢–∏–∂–¥–µ–Ω—å** ‚Äî –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–µ–Ω–¥–∏\n"
                "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ 7 –¥–Ω—ñ–≤\n\n"
                " *–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ '–ú—ñ—Å—è—Ü—å' –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É*"
            )
        else:
            text = (
                f"üìä **{chart_name} - {data_name}**\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:\n\n"
                "üìÖ **–ú—ñ—Å—è—Ü—å** ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤\n"
                "üìÜ **–¢–∏–∂–¥–µ–Ω—å** ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤\n\n"
                "–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫ üìà"
            )
        
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –ú—ñ—Å—è—Ü—å", callback_data=f"generate_chart_{chart_type}_{data_type}_month"),
                InlineKeyboardButton("üìÜ –¢–∏–∂–¥–µ–Ω—å", callback_data=f"generate_chart_{chart_type}_{data_type}_week")
            ]
        ]
        
        # –õ–æ–≥—ñ–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–∏–ø—É –≥—Ä–∞—Ñ—ñ–∫—É
        if chart_type == "bar":
            # –î–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ ‚Äî –Ω–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (–æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–∞–Ω–∏—Ö)
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", callback_data="analytics_charts")])
        else:
            # –î–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º ‚Äî –Ω–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –î–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö", callback_data=f"chart_type_{chart_type}")])
        
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show_chart_period_selection: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_charts")]])
        )

async def generate_simple_chart(query, context, chart_type, data_type, period):
    """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Å—Ç–∏–π —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –≥—Ä–∞—Ñ—ñ–∫"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥
        now = datetime.now()
        if period == "week":
            start_date = (now - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "–û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤"
        else:  # month
            start_date = now - timedelta(days=30)
            period_name = "–û—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transactions = get_user_transactions(user.id, start_date=start_date, end_date=now)
        
        if not transactions:
            await query.edit_message_text(
                f"üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –ø–µ—Ä—ñ–æ–¥: {period_name}\n\n"
                "–î–æ–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data="add_transaction")],
                    [InlineKeyboardButton("‚óÄÔ∏è –î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", callback_data="analytics_charts")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
        loading_msg = await query.edit_message_text(
            f"üìä –°—Ç–≤–æ—Ä—é—é {chart_type} –≥—Ä–∞—Ñ—ñ–∫...\n"
            f"üìÖ –ü–µ—Ä—ñ–æ–¥: {period_name}\n"
            f"üíæ –û–±—Ä–æ–±–ª—è—é {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π..."
        )
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ —Ç–∏–ø–æ–º
        if data_type == "expenses":
            filtered_transactions = [t for t in transactions if t.type == TransactionType.EXPENSE]
            chart_title = f"–í–∏—Ç—Ä–∞—Ç–∏ - {period_name}"
        elif data_type == "income":
            filtered_transactions = [t for t in transactions if t.type == TransactionType.INCOME]
            chart_title = f"–î–æ—Ö–æ–¥–∏ - {period_name}"
        else:  # comparison
            filtered_transactions = transactions
            chart_title = f"–î–æ—Ö–æ–¥–∏ vs –í–∏—Ç—Ä–∞—Ç–∏ - {period_name}"
        
        if not filtered_transactions and data_type != "comparison":
            data_name = "–≤–∏—Ç—Ä–∞—Ç" if data_type == "expenses" else "–¥–æ—Ö–æ–¥—ñ–≤"
            await loading_msg.edit_text(
                f"üìä –ù–µ–º–∞—î {data_name} –∑–∞ –ø–µ—Ä—ñ–æ–¥: {period_name}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –¥–æ–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –î–æ –ø–µ—Ä—ñ–æ–¥—ñ–≤", callback_data=f"chart_data_{data_type}_{chart_type}")],
                    [InlineKeyboardButton("‚óÄÔ∏è –î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", callback_data="analytics_charts")]
                ])
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        try:
            if chart_type == "pie":
                chart_buffer = await create_pie_chart(filtered_transactions, data_type, chart_title)
            else:  # bar
                chart_buffer = await create_bar_chart(transactions, data_type, chart_title, period)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏
            if chart_type == "pie":
                # –†–æ–∑—Ä–∞—Ö—É—î–º–æ –¥–µ—è–∫—ñ —Ü—ñ–∫–∞–≤—ñ —Ñ–∞–∫—Ç–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
                total_amount = sum(abs(t.amount) for t in filtered_transactions)
                num_categories = len(set(t.category.name if t.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó" for t in filtered_transactions))
                
                if data_type == "expenses":
                    caption_text = (
                        f"üç© **–ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç –∑–∞ {period_name.lower()}**\n\n"
                        f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: **{total_amount:,.0f} –≥—Ä–Ω**\n"
                        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: **{num_categories}**\n"
                        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: **{len(filtered_transactions)}**\n\n"
                        f"üí° *–ù–∞–π–±—ñ–ª—å—à—ñ —Å–µ–∫—Ç–æ—Ä–∏ –ø–æ–∫–∞–∑—É—é—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç*"
                    )
                else:  # income
                    caption_text = (
                        f"üç© **–ê–Ω–∞–ª—ñ–∑ –¥–æ—Ö–æ–¥—ñ–≤ –∑–∞ {period_name.lower()}**\n\n"
                        f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: **{total_amount:,.0f} –≥—Ä–Ω**\n"
                        f"üè∑Ô∏è –î–∂–µ—Ä–µ–ª: **{num_categories}**\n"
                        f"üìä –ù–∞–¥—Ö–æ–¥–∂–µ–Ω—å: **{len(filtered_transactions)}**\n\n"
                        f"üí° *–î—ñ–∞–≥—Ä–∞–º–∞ –ø–æ–∫–∞–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–∏—Ö –¥–æ—Ö–æ–¥—ñ–≤*"
                    )
            else:
                caption_text = (
                    f"üìä **{chart_title}**\n\n"
                    f"üìà –ì—Ä–∞—Ñ—ñ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ {len(filtered_transactions) if data_type != 'comparison' else len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"
                )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=chart_buffer,
                caption=caption_text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üîÑ –Ü–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥", callback_data=f"chart_data_{data_type}_{chart_type}")
                    ],
                    [InlineKeyboardButton("‚óÄÔ∏è –î–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", callback_data="analytics_charts")]
                ])
            )
            
        except Exception as chart_error:
            logger.error(f"Error creating chart: {str(chart_error)}")
            await loading_msg.edit_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—É\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–∏–ø –≥—Ä–∞—Ñ—ñ–∫—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", callback_data="analytics_charts")]
                ])
            )
        
    except Exception as e:
        logger.error(f"Error in generate_simple_chart: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—É",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_charts")]])
        )

async def create_pie_chart(transactions, data_type, title):
    """–°—Ç–≤–æ—Ä—é—î —Å—É—á–∞—Å–Ω—É –∫—Ä—É–≥–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º"""
    import matplotlib.pyplot as plt
    import matplotlib.patches as mpatches
    import io
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —à—Ä–∏—Ñ—Ç–∏ - —Å–ø—Ä–æ—â—É—î–º–æ –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial', 'sans-serif']
    
    # –ì—Ä—É–ø—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    category_totals = {}
    
    for transaction in transactions:
        category_name = transaction.category.name if transaction.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
        category_totals[category_name] = category_totals.get(category_name, 0) + abs(transaction.amount)
    
    if not category_totals:
        raise Exception("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏")
    
    # –°–æ—Ä—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —Å—É–º–æ—é
    sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
    
    # –ë–µ—Ä–µ–º–æ —Ç–æ–ø-7 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, —Ä–µ—à—Ç—É –æ–±'—î–¥–Ω—É—î–º–æ –≤ "–Ü–Ω—à–µ"
    if len(sorted_categories) > 7:
        top_categories = sorted_categories[:6]
        other_sum = sum(amount for _, amount in sorted_categories[6:])
        if other_sum > 0:
            top_categories.append(("–Ü–Ω—à–µ", other_sum))
        categories, amounts = zip(*top_categories)
    else:
        categories, amounts = zip(*sorted_categories)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–≥—É—Ä—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è–º–∏ - –∑–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
    fig, ax = plt.subplots(figsize=(14, 12), facecolor='white')  # –ó–±—ñ–ª—å—à–∏–ª–∏ –∑ (12, 10) –¥–æ (14, 12)
    
    # –°—É—á–∞—Å–Ω–∞ –∫–æ–ª—å–æ—Ä–æ–≤–∞ –ø–∞–ª—ñ—Ç—Ä–∞
    modern_colors = [
        '#FF6B8A',  # –†–æ–∂–µ–≤–∏–π
        '#4ECDC4',  # –ë—ñ—Ä—é–∑–æ–≤–∏–π  
        '#45B7D1',  # –ë–ª–∞–∫–∏—Ç–Ω–∏–π
        '#96CEB4',  # –ú'—è—Ç–Ω–∏–π
        '#FECA57',  # –ñ–æ–≤—Ç–∏–π
        '#A55EEA',  # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π
        '#26D0CE',  # –ê–∫–≤–∞–º–∞—Ä–∏–Ω
        '#FF9FF3'   # –õ–∞–≤–∞–Ω–¥–æ–≤–∏–π
    ]
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    total_amount = sum(amounts)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä—É–≥–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É –±–µ–∑ –ø—ñ–¥–ø–∏—Å—ñ–≤
    wedges, texts, autotexts = plt.pie(
        amounts, 
        labels=None,  # –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∏ –Ω–∞ –¥—ñ–∞–≥—Ä–∞–º—ñ
        autopct=lambda pct: f'{pct:.1f}%' if pct > 5 else '',  # –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å–µ–∫—Ç–æ—Ä—ñ–≤
        startangle=90,
        colors=modern_colors[:len(categories)],
        wedgeprops=dict(width=0.7, edgecolor='white', linewidth=2),  # –†–æ–±–∏–º–æ –ø–æ–Ω—á–∏–∫–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É
        pctdistance=0.85
    )
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ - –∑–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
    for autotext in autotexts:
        autotext.set_color('#2C3E50')
        autotext.set_fontweight('bold')
        autotext.set_fontsize(24)  # –ó–±—ñ–ª—å—à–∏–ª–∏ –∑ 11 –¥–æ 16
    
    # –î–æ–¥–∞—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ–∑ –∑–∞–≥–∞–ª—å–Ω–æ—é —Å—É–º–æ—é
    centre_circle = plt.Circle((0,0), 0.4, fc='white', linewidth=2, edgecolor='#E8E8E8')
    ax.add_artist(centre_circle)
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç - –∑–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
    plt.text(0, 0.1, f'{total_amount:,.0f}', ha='center', va='center', 
             fontsize=32, fontweight='bold', color='#2C3E50')  # –ó–±—ñ–ª—å—à–∏–ª–∏ –∑ 16 –¥–æ 24
    plt.text(0, -0.1, '–≥—Ä–Ω', ha='center', va='center', 
             fontsize=28, color='#7F8C8D')  # –ó–±—ñ–ª—å—à–∏–ª–∏ –∑ 12 –¥–æ 18
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞—Å–∏–≤—É –ª–µ–≥–µ–Ω–¥—É
    legend_elements = []
    for i, (category, amount) in enumerate(zip(categories, amounts)):
        percentage = (amount / total_amount) * 100
        label = f"{category}: {amount:,.0f} –≥—Ä–Ω ({percentage:.1f}%)"
        legend_elements.append(mpatches.Patch(color=modern_colors[i], label=label))
    
    # –†–æ–∑–º—ñ—â—É—î–º–æ –ª–µ–≥–µ–Ω–¥—É –ø–æ–∑–∞ –¥—ñ–∞–≥—Ä–∞–º–æ—é - –∑–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É
    plt.legend(
        handles=legend_elements,
        loc='center left',
        bbox_to_anchor=(1.1, 0.5),
        fontsize=26,  # –ó–±—ñ–ª—å—à–∏–ª–∏ –∑ 10 –¥–æ 14
        frameon=False
    )
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –∑–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
    plt.title(title, fontsize=32, fontweight='bold', pad=30, color='#2C3E50')  # –ó–±—ñ–ª—å—à–∏–ª–∏ –∑ 16 –¥–æ 20
    plt.axis('equal')
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none', pad_inches=0.3)
    buffer.seek(0)
    plt.close()
    
    return buffer

async def create_bar_chart(transactions, data_type, title, period):
    """–°—Ç–≤–æ—Ä—é—î —Å—É—á–∞—Å–Ω–∏–π —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º"""
    import matplotlib.pyplot as plt
    import matplotlib.patches as mpatches
    import io
    from collections import defaultdict
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —à—Ä–∏—Ñ—Ç–∏
    plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial', 'sans-serif']
    
    if data_type == "comparison":
        # –ì—Ä—É–ø—É—î–º–æ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
        income_data = defaultdict(float)
        expense_data = defaultdict(float)
        
        for transaction in transactions:
            if period == "week":
                # –î–ª—è —Ç–∏–∂–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è
                weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
                weekday_name = weekdays[transaction.transaction_date.weekday()]
                key = f"{weekday_name} ({transaction.transaction_date.strftime('%d.%m')})"
            else:  # month
                # –î–ª—è –º—ñ—Å—è—Ü—è –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ —Ç–∏–∂–Ω—è—Ö
                week_number = (transaction.transaction_date.day - 1) // 7 + 1
                key = f"–¢–∏–∂–¥–µ–Ω—å {week_number}"
            
            if transaction.type == TransactionType.INCOME:
                income_data[key] += transaction.amount
            else:
                expense_data[key] += transaction.amount
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É
        if period == "week":
            # –î–ª—è —Ç–∏–∂–Ω—è —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 7 –¥–Ω—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è
            from datetime import datetime, timedelta
            now = datetime.now()
            all_keys = []
            
            for i in range(6, -1, -1):  # –≤—ñ–¥ 6 –¥–Ω—ñ–≤ —Ç–æ–º—É –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ
                date = now - timedelta(days=i)
                weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
                weekday_name = weekdays[date.weekday()]
                key = f"{weekday_name} ({date.strftime('%d.%m')})"
                all_keys.append(key)
        else:  # month
            all_keys = [f"–¢–∏–∂–¥–µ–Ω—å {i}" for i in range(1, 5)]
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∫–ª—é—á—ñ, –¥–µ —î –¥–∞–Ω—ñ
        filtered_keys = [key for key in all_keys if income_data[key] > 0 or expense_data[key] > 0]
        if not filtered_keys:
            filtered_keys = all_keys  # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö
        
        incomes = [income_data.get(key, 0) for key in filtered_keys]
        expenses = [expense_data.get(key, 0) for key in filtered_keys]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—É—á–∞—Å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ - –∑–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
        fig, ax = plt.subplots(figsize=(14, 10), facecolor='white')
        
        x = range(len(filtered_keys))
        width = 0.35
        
        # –°—É—á–∞—Å–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
        income_color = '#4ECDC4'  # –ë—ñ—Ä—é–∑–æ–≤–∏–π –¥–ª—è –¥–æ—Ö–æ–¥—ñ–≤
        expense_color = '#FF6B8A'  # –†–æ–∂–µ–≤–∏–π –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
        bars1 = ax.bar([i - width/2 for i in x], incomes, width, 
                      label='üí∞ –î–æ—Ö–æ–¥–∏', color=income_color, 
                      edgecolor='white', linewidth=2, alpha=0.9)
        bars2 = ax.bar([i + width/2 for i in x], expenses, width, 
                      label='üí∏ –í–∏—Ç—Ä–∞—Ç–∏', color=expense_color, 
                      edgecolor='white', linewidth=2, alpha=0.9)
        
        # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≤–µ–ª–∏–∫–∏–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
        for bar, amount in zip(bars1, incomes):
            if amount > 0:
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + max(incomes + expenses)*0.01,
                       f'{amount:,.0f}', ha='center', va='bottom', 
                       fontweight='bold', fontsize=16, color='#2C3E50')
        
        for bar, amount in zip(bars2, expenses):
            if amount > 0:
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + max(incomes + expenses)*0.01,
                       f'{amount:,.0f}', ha='center', va='bottom', 
                       fontweight='bold', fontsize=16, color='#2C3E50')
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Å—ñ –∑ –≤–µ–ª–∏–∫–∏–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
        ax.set_xlabel('–ü–µ—Ä—ñ–æ–¥', fontsize=24, fontweight='bold', color='#2C3E50')
        ax.set_ylabel('–°—É–º–∞ (–≥—Ä–Ω)', fontsize=24, fontweight='bold', color='#2C3E50')
        ax.set_title(title, fontsize=28, fontweight='bold', pad=30, color='#2C3E50')
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º—ñ—Ç–∫–∏ –æ—Å–µ–π
        ax.set_xticks(x)
        ax.set_xticklabels(filtered_keys, fontsize=20, rotation=0 if len(filtered_keys) <= 4 else 45)
        ax.tick_params(axis='y', labelsize=18)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞—Å–∏–≤—É –ª–µ–≥–µ–Ω–¥—É
        ax.legend(fontsize=22, loc='upper left', frameon=True, 
                 fancybox=True, shadow=True, framealpha=0.9)
        
        # –î–æ–¥–∞—î–º–æ —Å—ñ—Ç–∫—É
        ax.grid(True, alpha=0.3, axis='y', linestyle='--', linewidth=1)
        ax.set_axisbelow(True)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–µ–∂—ñ –æ—Å–µ–π
        max_value = max(max(incomes) if incomes else [0], max(expenses) if expenses else [0])
        if max_value > 0:
            ax.set_ylim(0, max_value * 1.15)
        
    else:
        # –°—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        category_totals = {}
        
        for transaction in transactions:
            category_name = transaction.category.name if transaction.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
            category_totals[category_name] = category_totals.get(category_name, 0) + abs(transaction.amount)
        
        if not category_totals:
            raise Exception("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É")
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —Å—É–º–æ—é
        sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
        
        # –ë–µ—Ä–µ–º–æ —Ç–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if len(sorted_categories) > 8:
            top_categories = sorted_categories[:7]
            other_sum = sum(amount for _, amount in sorted_categories[7:])
            if other_sum > 0:
                top_categories.append(("–Ü–Ω—à–µ", other_sum))
            sorted_categories = top_categories
        
        categories, amounts = zip(*sorted_categories)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—É—á–∞—Å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ - –∑–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
        fig, ax = plt.subplots(figsize=(14, 10), facecolor='white')
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –∫–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
        if data_type == "expenses":
            colors = ['#FF6B8A', '#FF8A9B', '#FFA8AB', '#FFC7BB', '#FFE5CB']
            main_color = '#FF6B8A'
        else:  # income
            colors = ['#4ECDC4', '#6DD5C7', '#8BDDCA', '#A9E5CE', '#C7EDD1']
            main_color = '#4ECDC4'
        
        # –†–æ–∑—à–∏—Ä—é—î–º–æ –ø–∞–ª—ñ—Ç—Ä—É –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
        while len(colors) < len(categories):
            colors.extend(colors)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º –∫–æ–ª—å–æ—Ä—ñ–≤
        bars = ax.bar(range(len(categories)), amounts, 
                     color=colors[:len(categories)], 
                     edgecolor='white', linewidth=2, alpha=0.9)
        
        # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≤–µ–ª–∏–∫–∏–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
        for bar, amount in zip(bars, amounts):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + max(amounts)*0.01,
                   f'{amount:,.0f}', ha='center', va='bottom', 
                   fontweight='bold', fontsize=16, color='#2C3E50')
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Å—ñ –∑ –≤–µ–ª–∏–∫–∏–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
        ax.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó', fontsize=24, fontweight='bold', color='#2C3E50')
        ax.set_ylabel('–°—É–º–∞ (–≥—Ä–Ω)', fontsize=24, fontweight='bold', color='#2C3E50')
        ax.set_title(title, fontsize=28, fontweight='bold', pad=30, color='#2C3E50')
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º—ñ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        ax.set_xticks(range(len(categories)))
        ax.set_xticklabels(categories, fontsize=18, rotation=45, ha='right')
        ax.tick_params(axis='y', labelsize=18)
        
        # –î–æ–¥–∞—î–º–æ —Å—ñ—Ç–∫—É
        ax.grid(True, alpha=0.3, axis='y', linestyle='--', linewidth=1)
        ax.set_axisbelow(True)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–µ–∂—ñ –æ—Å–µ–π
        ax.set_ylim(0, max(amounts) * 1.15)
    
    # –ü–æ–∫—Ä–∞—â—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥
    plt.tight_layout()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä –∑ –≤–∏—Å–æ–∫–æ—é —è–∫—ñ—Å—Ç—é
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none', pad_inches=0.3)
    buffer.seek(0)
    plt.close()
    
    return buffer

# ==================== PDF –ó–í–Ü–¢ ====================

async def generate_pdf_report(query, context):
    """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤–Ω–∏–π PDF –∑–≤—ñ—Ç –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é"""
    try:
        user = get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        await query.edit_message_text(
            "üìÑ **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF –∑–≤—ñ—Ç—É**\n\n"
            "‚è≥ –ó–±–∏—Ä–∞—î–º–æ –≤–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ...\n"
            "üìä –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...\n"
            "üìà –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏...\n\n"
            "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.",
            parse_mode="Markdown"
        )
        
        # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        now = datetime.now()
        start_date = now - timedelta(days=30)
        transactions = get_user_transactions(user.id, start_date=start_date, end_date=now)
        
        # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        balance = total_income - total_expenses
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        category_expenses = {}
        for t in transactions:
            if t.type == TransactionType.EXPENSE and t.category:
                cat_name = t.category.name
                category_expenses[cat_name] = category_expenses.get(cat_name, 0) + t.amount
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç
        pdf_buffer = create_pdf_report(user, transactions, {
            'total_income': total_income,
            'total_expenses': total_expenses,
            'balance': balance,
            'category_expenses': category_expenses,
            'period': '30 –¥–Ω—ñ–≤'
        })
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ PDF —Ñ–∞–π–ª
        filename = f"financial_report_{user.username or user.telegram_id}_{now.strftime('%Y%m%d')}.pdf"
        
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=pdf_buffer,
            filename=filename,
            caption="üìÑ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç**\n\n"
                   "üìä –í–∫–ª—é—á–∞—î –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤\n"
                   "üí° –ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ —Ç–∞ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏\n\n"
                   "üíæ –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ü–µ–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!",
            parse_mode="Markdown"
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ - –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∏–π –∑–≤—ñ—Ç"
        keyboard = [
            [
                InlineKeyboardButton("ÔøΩ –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", callback_data="analytics"),
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚úÖ **PDF –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
                 "üìÑ –î–æ–∫—É–º–µ–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å:\n"
                 "‚Ä¢ –ü–æ–≤–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç\n"
                 "‚Ä¢ –ì—Ä–∞—Ñ—ñ–∫–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö\n"
                 "‚Ä¢ –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É –≤–∏—Ç—Ä–∞—Ç\n"
                 "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n"
                 "‚Ä¢ –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å\n\n"
                 "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π –∑–≤—ñ—Ç –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in generate_pdf_report: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑–≤—ñ—Ç—É\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="generate_pdf_report"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics")
            ]])
        )

def create_pdf_report(user, transactions, stats):
    """–°—Ç–≤–æ—Ä—é—î —Å—É—á–∞—Å–Ω–∏–π PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º –∑–≤—ñ—Ç–æ–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ"""
    try:
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle, PageBreak, KeepTogether
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch, mm
        from reportlab.lib import colors
        from reportlab.pdfgen import canvas
        from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        import io
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—É—Ñ–µ—Ä –¥–ª—è PDF
        buffer = io.BytesIO()
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ —à—Ä–∏—Ñ—Ç DejaVu –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—ñ
        try:
            import os
            from reportlab.pdfbase.pdfmetrics import registerFontFamily
            
            # –®–ª—è—Ö –¥–æ –Ω–∞—à–∏—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö —à—Ä–∏—Ñ—Ç—ñ–≤
            base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            font_dir = os.path.join(base_dir, 'fonts')
            
            regular_font_path = os.path.join(font_dir, 'DejaVuSans.ttf')
            bold_font_path = os.path.join(font_dir, 'DejaVuSans-Bold.ttf')
            
            if os.path.exists(regular_font_path):
                # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —à—Ä–∏—Ñ—Ç
                pdfmetrics.registerFont(TTFont('DejaVuSans', regular_font_path))
                
                # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∂–∏—Ä–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –≤—ñ–Ω —î
                if os.path.exists(bold_font_path):
                    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', bold_font_path))
                    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Å—ñ–º'—é —à—Ä–∏—Ñ—Ç—ñ–≤
                    registerFontFamily('DejaVuSans', normal='DejaVuSans', bold='DejaVuSans-Bold')
                
                font_name = 'DejaVuSans'
                logger.info(f"Successfully registered DejaVu Sans font from {regular_font_path}")
            else:
                # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à—Ä–∏—Ñ—Ç
                font_name = 'Helvetica'
                logger.warning(f"DejaVu Sans font not found at {regular_font_path}, using Helvetica")
                
        except Exception as e:
            font_name = 'Helvetica'
            logger.error(f"Error registering font: {str(e)}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –∫—Ä–∞—â–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        doc = SimpleDocTemplate(
            buffer, 
            pagesize=A4,
            rightMargin=20*mm,
            leftMargin=20*mm,
            topMargin=25*mm,
            bottomMargin=20*mm
        )
        story = []
        
        # –°—É—á–∞—Å–Ω—ñ —Å—Ç–∏–ª—ñ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ
        styles = getSampleStyleSheet()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
        bold_font_name = 'DejaVuSans-Bold' if font_name == 'DejaVuSans' else font_name
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_style = ParagraphStyle(
            'ModernTitle',
            parent=styles['Title'],
            fontName=bold_font_name,
            fontSize=28,
            textColor=colors.HexColor('#1e3a8a'),  # –ì–ª–∏–±–æ–∫–∏–π —Å–∏–Ω—ñ–π
            alignment=TA_CENTER,
            spaceBefore=10,
            spaceAfter=30,
            leading=36
        )
        
        # –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        section_style = ParagraphStyle(
            'ModernSection',
            parent=styles['Heading2'],
            fontName=bold_font_name,
            fontSize=16,
            textColor=colors.HexColor('#059669'),  # –ó–µ–ª–µ–Ω–∏–π
            spaceBefore=20,
            spaceAfter=12,
            borderWidth=0,
            borderColor=colors.HexColor('#d1fae5'),
            borderPadding=8,
            backColor=colors.HexColor('#f0fdf4')
        )
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        body_style = ParagraphStyle(
            'ModernBody',
            parent=styles['Normal'],
            fontName=font_name,
            fontSize=11,
            textColor=colors.HexColor('#374151'),  # –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π
            spaceAfter=8,
            alignment=TA_JUSTIFY,
            leading=16
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –≤–∞–∂–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        highlight_style = ParagraphStyle(
            'Highlight',
            parent=body_style,
            backColor=colors.HexColor('#fef3c7'),  # –ñ–æ–≤—Ç–∏–π —Ñ–æ–Ω
            borderWidth=1,
            borderColor=colors.HexColor('#f59e0b'),
            borderPadding=12,
            spaceBefore=12,
            spaceAfter=12,
            leading=16
        )
        
        # –ó–ê–ì–û–õ–û–í–û–ö –ó–í–Ü–¢–£
        story.append(Paragraph("–ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–ô –§–Ü–ù–ê–ù–°–û–í–ò–ô –ó–í–Ü–¢", title_style))
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
        current_date = datetime.now()
        info_text = f"""
        <b>–ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É:</b> –æ—Å—Ç–∞–Ω–Ω—ñ {stats['period']}<br/>
        <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user.username or f'ID: {user.telegram_id}'}<br/>
        <b>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</b> {current_date.strftime('%d.%m.%Y –æ %H:%M')}<br/>
        <b>–í–∞–ª—é—Ç–∞:</b> —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≥—Ä–∏–≤–Ω—è (–≥—Ä–Ω)
        """
        story.append(Paragraph(info_text, body_style))
        story.append(Spacer(1, 20))
        
        # –û–°–ù–û–í–ù–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò
        story.append(Paragraph("–§–Ü–ù–ê–ù–°–û–í–ò–ô –ü–Ü–î–°–£–ú–û–ö", section_style))
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫
        daily_avg = stats['total_expenses'] / 30
        savings_rate = ((stats['total_income'] - stats['total_expenses']) / stats['total_income'] * 100) if stats['total_income'] > 0 else 0
        
        # –¢–∞–±–ª–∏—Ü—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑ —Å—É—á–∞—Å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
        main_data = [
            ['–ü–û–ö–ê–ó–ù–ò–ö', '–°–£–ú–ê', '–î–ï–¢–ê–õ–Ü'],
            ['–ó–∞–≥–∞–ª—å–Ω—ñ –¥–æ—Ö–æ–¥–∏', f"{stats['total_income']:,.2f} –≥—Ä–Ω", '–ó–∞ –ø–µ—Ä—ñ–æ–¥'],
            ['–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏', f"{stats['total_expenses']:,.2f} –≥—Ä–Ω", f"‚âà {daily_avg:.0f} –≥—Ä–Ω/–¥–µ–Ω—å"],
            ['–ß–∏—Å—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', f"{stats['balance']:+,.2f} –≥—Ä–Ω", f"{'–ü—Ä–æ—Ñ—ñ—Ü–∏—Ç' if stats['balance'] >= 0 else '–î–µ—Ñ—ñ—Ü–∏—Ç'}"],
            ['–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å', f"{savings_rate:.1f}%", f"{'–í—ñ–¥–º—ñ–Ω–Ω–æ' if savings_rate >= 20 else '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏' if savings_rate < 10 else '–ù–µ–ø–æ–≥–∞–Ω–æ'}"]
        ]
        
        main_table = Table(main_data, colWidths=[55*mm, 40*mm, 60*mm])
        main_table.setStyle(TableStyle([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e40af')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, 0), bold_font_name),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            
            # –î–∞–Ω—ñ
            ('FONTNAME', (0, 1), (-1, -1), font_name),
            ('FONTSIZE', (0, 1), (-1, -1), 12),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8fafc')]),
            ('ALIGN', (0, 1), (0, -1), 'LEFT'),
            ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
            ('ALIGN', (2, 1), (2, -1), 'LEFT'),
            ('TOPPADDING', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
            
            # –°—ñ—Ç–∫–∞
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
            ('LINEBELOW', (0, 0), (-1, 0), 2, colors.HexColor('#1e40af')),
            # –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–æ–∑—Ä–∏–≤—É —Ç–∞–±–ª–∏—Ü—ñ
            ('SPLITLONGWORDS', (0, 0), (-1, -1), True),
        ]))
        
        # –î–æ–¥–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è–º —Ä–æ–∑—Ä–∏–≤—É
        main_table.hAlign = 'CENTER'
        story.append(KeepTogether([main_table]))
        story.append(Spacer(1, 20))
        
        # –ê–ù–ê–õ–Ü–ó –ó–ê–û–©–ê–î–ñ–ï–ù–¨
        savings_section = []
        savings_section.append(Paragraph("–ê–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö –∑–∞–æ—â–∞–¥–∂–µ–Ω—å", section_style))
        
        if savings_rate >= 20:
            savings_analysis = f"""
            <b>–ß—É–¥–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏!</b><br/>
            –í–∏ –∑–∞–æ—â–∞–¥–∂—É—î—Ç–µ <b>{savings_rate:.1f}%</b> –≤—ñ–¥ –≤–∞—à–æ–≥–æ –¥–æ—Ö–æ–¥—É. –¶–µ –≤—ñ–¥–º—ñ–Ω–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫, —è–∫–∏–π —Å–≤—ñ–¥—á–∏—Ç—å –ø—Ä–æ –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏.<br/><br/>
            <b>–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏:</b><br/>
            ‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–æ—â–∞–¥–∂–µ–Ω—å: 10% [–í–ò–ö–û–ù–ê–ù–û]<br/>
            ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: 20% [–í–ò–ö–û–ù–ê–ù–û]<br/>
            ‚Ä¢ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {savings_rate:.1f}% [–í–Ü–î–ú–Ü–ù–ù–û]<br/>
            """
        elif savings_rate >= 10:
            savings_analysis = f"""
            <b>–•–æ—Ä–æ—à–∏–π –ø–æ—á–∞—Ç–æ–∫!</b><br/>
            –í–∏ –∑–∞–æ—â–∞–¥–∂—É—î—Ç–µ <b>{savings_rate:.1f}%</b> –≤—ñ–¥ –¥–æ—Ö–æ–¥—É. –¶–µ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞–ª–µ —î –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.<br/><br/>
            <b>–ü–æ—Ä–∞–¥–∏ –¥–ª—è —Ä–æ—Å—Ç—É:</b><br/>
            ‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {savings_rate:.1f}% [–í–ò–ö–û–ù–ê–ù–û]<br/>
            ‚Ä¢ –¶—ñ–ª—å: 20% [–¶–Ü–õ–¨]<br/>
            ‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–±—ñ–ª—å—à–∏—Ç–∏ –Ω–∞: {20-savings_rate:.1f}%<br/>
            """
        elif savings_rate >= 0:
            savings_analysis = f"""
            <b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ —É–≤–∞–≥–∞</b><br/>
            –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥–∞—é—Ç—å –ª–∏—à–µ <b>{savings_rate:.1f}%</b> –≤—ñ–¥ –¥–æ—Ö–æ–¥—É. –¶–µ –Ω–∏–∂—á–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è.<br/><br/>
            <b>–ü–ª–∞–Ω –¥—ñ–π:</b><br/>
            ‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {savings_rate:.1f}% [–ù–ò–ó–¨–ö–ò–ô]<br/>
            ‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–ª—å: 10% [–¶–Ü–õ–¨]<br/>
            ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–ª—å: 20% [–Ü–î–ï–ê–õ]<br/>
            """
        else:
            deficit_amount = abs(stats['balance'])
            savings_analysis = f"""
            <b>–ö–†–ò–¢–ò–ß–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø!</b><br/>
            –í–∏—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –¥–æ—Ö–æ–¥–∏ –Ω–∞ <b>{deficit_amount:,.2f} –≥—Ä–Ω</b> ({abs(savings_rate):.1f}%).<br/><br/>
            <b>–¢–ï–†–ú–Ü–ù–û–í–Ü –î–Ü–á:</b><br/>
            ‚Ä¢ –ù–µ–≥–∞–π–Ω–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏<br/>
            ‚Ä¢ –°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏<br/>
            ‚Ä¢ –ó–Ω–∞–π—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ –¥–æ—Ö–æ–¥—É<br/>
            """
        
        savings_section.append(Paragraph(savings_analysis, highlight_style))
        story.append(KeepTogether(savings_section))
        story.append(Spacer(1, 15))
        
        # –ê–ù–ê–õ–Ü–ó –ö–ê–¢–ï–ì–û–†–Ü–ô –í–ò–¢–†–ê–¢
        if stats['category_expenses']:
            story.append(Paragraph("–°–¢–†–£–ö–¢–£–†–ê –í–ê–®–ò–• –í–ò–¢–†–ê–¢", section_style))
            
            sorted_categories = sorted(stats['category_expenses'].items(), key=lambda x: x[1], reverse=True)
            
            # –¢–∞–±–ª–∏—Ü—è —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            category_data = [['–ö–ê–¢–ï–ì–û–†–Ü–Ø', '–°–£–ú–ê', '–ß–ê–°–¢–ö–ê', '–û–¶–Ü–ù–ö–ê']]
            
            for i, (category, amount) in enumerate(sorted_categories[:5]):
                percentage = (amount / stats['total_expenses'] * 100) if stats['total_expenses'] > 0 else 0
                
                if percentage > 40:
                    evaluation = "–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ"
                elif percentage > 25:
                    evaluation = "–ü–æ–º—ñ—Ä–Ω–æ"
                elif percentage > 15:
                    evaluation = "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
                else:
                    evaluation = "–î–æ–±—Ä–µ"
                
                category_data.append([
                    f"{i+1}. {category}",
                    f"{amount:,.2f} –≥—Ä–Ω",
                    f"{percentage:.1f}%",
                    evaluation
                ])
            
            category_table = Table(category_data, colWidths=[45*mm, 25*mm, 18*mm, 30*mm])
            category_table.setStyle(TableStyle([
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#dc2626')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('FONTNAME', (0, 0), (-1, 0), bold_font_name),
                ('FONTSIZE', (0, 0), (-1, 0), 11),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
                
                # –î–∞–Ω—ñ
                ('FONTNAME', (0, 1), (-1, -1), font_name),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#fef2f2')]),
                ('ALIGN', (0, 1), (0, -1), 'LEFT'),
                ('ALIGN', (1, 1), (2, -1), 'RIGHT'),
                ('ALIGN', (3, 1), (3, -1), 'CENTER'),
                ('TOPPADDING', (0, 1), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
                
                # –°—ñ—Ç–∫–∞
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#f3f4f6')),
                ('LINEBELOW', (0, 0), (-1, 0), 2, colors.HexColor('#dc2626')),
                # –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–æ–∑—Ä–∏–≤—É —Ç–∞–±–ª–∏—Ü—ñ
                ('SPLITLONGWORDS', (0, 0), (-1, -1), True),
            ]))
            
            # –¶–µ–Ω—Ç—Ä—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é —ñ –¥–æ–¥–∞—î–º–æ –∑ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è–º —Ä–æ–∑—Ä–∏–≤—É
            category_table.hAlign = 'CENTER'
            story.append(KeepTogether([category_table]))
            story.append(Spacer(1, 15))
        
        # –ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
        recommendations_section = []
        recommendations_section.append(Paragraph("–ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á", section_style))
        
        recommendations = []
        
        # –ê–Ω–∞–ª—ñ–∑ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if stats['category_expenses']:
            top_category = max(stats['category_expenses'].items(), key=lambda x: x[1])
            top_percentage = (top_category[1] / stats['total_expenses'] * 100) if stats['total_expenses'] > 0 else 0
            
            if top_percentage > 40:
                recommendations.append(f"<b>–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç:</b> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{top_category[0]}' –∑–∞–π–º–∞—î {top_percentage:.1f}% –±—é–¥–∂–µ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç—É—Ç –Ω–∞ 10-15%.")
            elif top_percentage > 25:
                recommendations.append(f"<b>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b> '{top_category[0]}' —Å–∫–ª–∞–¥–∞—î {top_percentage:.1f}% –≤–∏—Ç—Ä–∞—Ç - —Å–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Ü—ñ—î—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é.")
            else:
                recommendations.append("<b>–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ—Å—Ç—å:</b> –£ –≤–∞—Å –¥–æ–±—Ä–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö.")
        
        # –ü–æ—Ä–∞–¥–∏ –ø–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è–º
        if savings_rate < 0:
            recommendations.append("<b>–¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –¥—ñ—è:</b> –°–∫–æ—Ä–æ—Ç—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ 20-30% –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        elif savings_rate < 10:
            recommendations.append("<b>–¶—ñ–ª—å –∑–∞–æ—â–∞–¥–∂–µ–Ω—å:</b> –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ—Å—è–≥—Ç–∏ —Ä—ñ–≤–Ω—è 10% –∑–∞–æ—â–∞–¥–∂–µ–Ω—å –≤—ñ–¥ –¥–æ—Ö–æ–¥—É.")
        elif savings_rate < 20:
            recommendations.append("<b>–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:</b> –ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä —Ü—ñ–ª—å - 20% –∑–∞–æ—â–∞–¥–∂–µ–Ω—å.")
        
        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
        weekly_budget = daily_avg * 7
        monthly_budget = daily_avg * 30
        recommendations.append(f"<b>–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è:</b> –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∏—Ç–º –≤–∏—Ç—Ä–∞—Ç: {daily_avg:.0f} –≥—Ä–Ω/–¥–µ–Ω—å, {weekly_budget:.0f} –≥—Ä–Ω/—Ç–∏–∂–¥–µ–Ω—å.")
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
        recommendations.append("<b>–†–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —â–æ—Ç–∏–∂–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é.")
        recommendations.append("<b>–¶—ñ–ª—ñ:</b> –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü—ñ–ª—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å.")
        
        for i, rec in enumerate(recommendations, 1):
            rec_paragraph = Paragraph(f"{i}. {rec}", body_style)
            recommendations_section.append(rec_paragraph)
            recommendations_section.append(Spacer(1, 4))
        
        story.append(KeepTogether(recommendations_section))
        story.append(Spacer(1, 20))
        
        # –ü–Ü–î–í–ê–õ –î–û–ö–£–ú–ï–ù–¢–£
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontName=font_name,
            fontSize=9,
            textColor=colors.HexColor('#6b7280'),
            alignment=TA_CENTER,
            spaceBefore=20,
            borderWidth=1,
            borderColor=colors.HexColor('#e5e7eb'),
            borderPadding=8,
            backColor=colors.HexColor('#f9fafb')
        )
        
        footer_text = f"""
        <b>FinAssistAI Bot</b> | –†–æ–∑—É–º–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫<br/>
        –ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ ‚Ä¢ {current_date.strftime('%d.%m.%Y –æ %H:%M')}<br/>
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        """
        
        story.append(Paragraph(footer_text, footer_style))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF
        doc.build(story)
        buffer.seek(0)
        
        return buffer
        
    except ImportError as e:
        logger.error(f"ReportLab not available: {str(e)}")
        # –Ø–∫—â–æ reportlab –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
        return create_simple_text_report(user, transactions, stats)
    except Exception as e:
        logger.error(f"Error creating PDF report: {str(e)}")
        return create_simple_text_report(user, transactions, stats)

def create_simple_text_report(user, transactions, stats):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç —è–∫ fallback"""
    buffer = io.BytesIO()
    
    current_date = datetime.now()
    savings_rate = ((stats['total_income'] - stats['total_expenses']) / stats['total_income'] * 100) if stats['total_income'] > 0 else 0
    daily_avg = stats['total_expenses'] / 30
    
    report_text = f"""
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ               –ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–ô –§–Ü–ù–ê–ù–°–û–í–ò–ô –ó–í–Ü–¢                  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username or f'ID: {user.telegram_id}'}
–ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É: –æ—Å—Ç–∞–Ω–Ω—ñ {stats['period']}
–°—Ç–≤–æ—Ä–µ–Ω–æ: {current_date.strftime('%d.%m.%Y –æ %H:%M')}
–í–∞–ª—é—Ç–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≥—Ä–∏–≤–Ω—è (–≥—Ä–Ω)

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    –§–Ü–ù–ê–ù–°–û–í–ò–ô –ü–Ü–î–°–£–ú–û–ö                      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

–ó–∞–≥–∞–ª—å–Ω—ñ –¥–æ—Ö–æ–¥–∏:      {stats['total_income']:>12,.2f} –≥—Ä–Ω
–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:     {stats['total_expenses']:>12,.2f} –≥—Ä–Ω
–ß–∏—Å—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:     {stats['balance']:>+12,.2f} –≥—Ä–Ω
–°–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –¥–µ–Ω—å:     {daily_avg:>12,.0f} –≥—Ä–Ω

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                      –ê–ù–ê–õ–Ü–ó –ó–ê–û–©–ê–î–ñ–ï–ù–¨                      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å: {savings_rate:>6.1f}%

"""

    if savings_rate >= 20:
        report_text += "–ß–£–î–û–í–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò!\n"
        report_text += f"–í–∏ –∑–∞–æ—â–∞–¥–∂—É—î—Ç–µ {savings_rate:.1f}% –≤—ñ–¥ –¥–æ—Ö–æ–¥—É - —Ü–µ –≤—ñ–¥–º—ñ–Ω–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫!\n"
        report_text += "–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏. –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!\n"
    elif savings_rate >= 10:
        report_text += "–•–û–†–û–®–ò–ô –ü–û–ß–ê–¢–û–ö!\n"
        report_text += f"–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è {savings_rate:.1f}% - —Ü–µ –¥–æ–±—Ä–µ, –∞–ª–µ —î –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è —Ä–æ—Å—Ç—É.\n"
        report_text += f"–¶—ñ–ª—å: –∑–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 20% (–ø–æ—Ç—Ä—ñ–±–Ω–æ +{20-savings_rate:.1f}%)\n"
    elif savings_rate >= 0:
        report_text += "–ü–û–¢–†–Ü–ë–ù–ê –£–í–ê–ì–ê!\n"
        report_text += f"–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –ª–∏—à–µ {savings_rate:.1f}% - –Ω–∏–∂—á–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ.\n"
        report_text += "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: –º—ñ–Ω—ñ–º—É–º 10%, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 20%\n"
    else:
        deficit_amount = abs(stats['balance'])
        report_text += "–ö–†–ò–¢–ò–ß–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø!\n"
        report_text += f"–î–µ—Ñ—ñ—Ü–∏—Ç {deficit_amount:,.2f} –≥—Ä–Ω ({abs(savings_rate):.1f}%)\n"
        report_text += "–ü–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –¥—ñ—ó –¥–ª—è –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É!\n"

    if stats['category_expenses']:
        report_text += f"\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        report_text += f"‚îÇ                  –°–¢–†–£–ö–¢–£–†–ê –í–ò–¢–†–ê–¢                          ‚îÇ\n"
        report_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        sorted_categories = sorted(stats['category_expenses'].items(), key=lambda x: x[1], reverse=True)
        
        report_text += "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        report_text += "‚îÇ  ‚Ññ  ‚îÇ       –ö–∞—Ç–µ–≥–æ—Ä—ñ—è         ‚îÇ    –°—É–º–∞    ‚îÇ –ß–∞—Å—Ç–∫–∞  ‚îÇ  –û—Ü—ñ–Ω–∫–∞  ‚îÇ\n"
        report_text += "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
        
        for i, (category, amount) in enumerate(sorted_categories[:5], 1):
            percentage = (amount / stats['total_expenses'] * 100) if stats['total_expenses'] > 0 else 0
            
            if percentage > 40:
                evaluation = " –ë–∞–≥–∞—Ç–æ"
            elif percentage > 25:
                evaluation = " –ü–æ–º—ñ—Ä–Ω–æ"
            elif percentage > 15:
                evaluation = " –ù–æ—Ä–º–∞"
            else:
                evaluation = " –î–æ–±—Ä–µ"
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ–≤–≥—ñ –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            display_category = category[:22] + "..." if len(category) > 22 else category
            
            report_text += f"‚îÇ {i:>2}. ‚îÇ {display_category:<23} ‚îÇ {amount:>8,.0f} ‚îÇ {percentage:>5.1f}% ‚îÇ{evaluation:<9} ‚îÇ\n"
        
        report_text += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
    
    report_text += f"\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
    report_text += f"‚îÇ                –ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á                     ‚îÇ\n"
    report_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
    
    recommendations = []
    
    # –ê–Ω–∞–ª—ñ–∑ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if stats['category_expenses']:
        top_category = max(stats['category_expenses'].items(), key=lambda x: x[1])
        top_percentage = (top_category[1] / stats['total_expenses'] * 100) if stats['total_expenses'] > 0 else 0
        
        if top_percentage > 40:
            recommendations.append(f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: '{top_category[0]}' –∑–∞–π–º–∞—î {top_percentage:.1f}% –±—é–¥–∂–µ—Ç—É")
        elif top_percentage > 25:
            recommendations.append(f"–ö–æ–Ω—Ç—Ä–æ–ª—å: '{top_category[0]}' - {top_percentage:.1f}% –≤–∏—Ç—Ä–∞—Ç")
        else:
            recommendations.append("–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ—Å—Ç—å: –¥–æ–±—Ä–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö")
    
    # –ü–æ—Ä–∞–¥–∏ –ø–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è–º
    if savings_rate < 0:
        recommendations.append("–¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –¥—ñ—è: —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ 20-30%")
    elif savings_rate < 10:
        recommendations.append("–¶—ñ–ª—å: –¥–æ—Å—è–≥—Ç–∏ 10% –∑–∞–æ—â–∞–¥–∂–µ–Ω—å –≤—ñ–¥ –¥–æ—Ö–æ–¥—É")
    elif savings_rate < 20:
        recommendations.append("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è: –Ω–∞—Å—Ç—É–ø–Ω–∞ —Ü—ñ–ª—å - 20% –∑–∞–æ—â–∞–¥–∂–µ–Ω—å")
    
    # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    weekly_budget = daily_avg * 7
    recommendations.append(f"–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è: {daily_avg:.0f} –≥—Ä–Ω/–¥–µ–Ω—å, {weekly_budget:.0f} –≥—Ä–Ω/—Ç–∏–∂–¥–µ–Ω—å")
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
    recommendations.append("–†–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å: –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —â–æ—Ç–∏–∂–Ω—è")
    recommendations.append("–¶—ñ–ª—ñ: –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü—ñ–ª—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å")
    
    for i, rec in enumerate(recommendations, 1):
        report_text += f"{i}. {rec}\n"
    
    report_text += f"\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
    report_text += f"‚îÇ FinAssistAI Bot | –†–æ–∑—É–º–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫              ‚îÇ\n"
    report_text += f"‚îÇ –ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ ‚Ä¢ {current_date.strftime('%d.%m.%Y –æ %H:%M'):>27} ‚îÇ\n"
    report_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
    
    buffer.write(report_text.encode('utf-8'))
    buffer.seek(0)
    
    return buffer
