#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç—É –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.db_operations import get_user, get_user_transactions
from database.models import TransactionType
from handlers.ai_assistant_handler import (
    generate_personal_advice, 
    generate_financial_forecast, 
    answer_custom_question
)
from services.openai_service import OpenAIService
from database.config import OPENAI_API_KEY

async def test_ai_assistant():
    """–¢–µ—Å—Ç—É—î AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞"""
    print("ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î OpenAI API –∫–ª—é—á
    if not OPENAI_API_KEY:
        print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("üí° –î–æ–¥–∞–π—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª")
        return
    
    print(f"‚úÖ OpenAI API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ: {OPENAI_API_KEY[:10]}...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    class TestUser:
        def __init__(self):
            self.id = 123456
            self.monthly_budget = 15000
            self.currency = "UAH"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    test_transactions = [
        {
            'amount': 500.0,
            'category': '–á–∂–∞',
            'type': 'expense',
            'date': (datetime.now() - timedelta(days=5)).isoformat(),
            'description': '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç'
        },
        {
            'amount': 200.0,
            'category': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
            'type': 'expense',
            'date': (datetime.now() - timedelta(days=3)).isoformat(),
            'description': '–ú–µ—Ç—Ä–æ'
        },
        {
            'amount': 1200.0,
            'category': '–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏',
            'type': 'expense',
            'date': (datetime.now() - timedelta(days=10)).isoformat(),
            'description': '–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è'
        },
        {
            'amount': 25000.0,
            'category': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
            'type': 'income',
            'date': (datetime.now() - timedelta(days=1)).isoformat(),
            'description': '–ú—ñ—Å—è—á–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞'
        }
    ]
    
    user = TestUser()
    
    print("\nüí° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø–æ—Ä–∞–¥–∏...")
    try:
        advice = await generate_personal_advice(user, test_transactions)
        print("‚úÖ –ü–æ—Ä–∞–¥–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞:")
        print(advice)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏: {e}")
    
    print("\nüîÆ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É...")
    try:
        forecast = await generate_financial_forecast(user, test_transactions)
        print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–π:")
        print(forecast)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É: {e}")
    
    print("\n‚ùì –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è...")
    try:
        question = "–°–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—á–∞—é –Ω–∞ —ó–∂—É —â–æ–º—ñ—Å—è—Ü—è?"
        answer = await answer_custom_question(question, user, test_transactions)
        print("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞:")
        print(answer)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_ai_assistant())
