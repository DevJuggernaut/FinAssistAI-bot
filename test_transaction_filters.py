#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
"""

from database.models import TransactionType
from database.db_operations import get_transactions, get_or_create_user
from datetime import datetime, timedelta
import calendar

def test_transaction_filters():
    """–¢–µ—Å—Ç—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = get_or_create_user(580683833)
    print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id})")
    
    # –¢–µ—Å—Ç 1: –í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    all_transactions = get_transactions(user.id, limit=100)
    print(f"üìä –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(all_transactions)}")
    
    # –¢–µ—Å—Ç 2: –§—ñ–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    income_transactions = get_transactions(user.id, limit=100, transaction_type=TransactionType.INCOME)
    expense_transactions = get_transactions(user.id, limit=100, transaction_type=TransactionType.EXPENSE)
    print(f"üí∞ –î–æ—Ö–æ–¥—ñ–≤: {len(income_transactions)}")
    print(f"üí∏ –í–∏—Ç—Ä–∞—Ç: {len(expense_transactions)}")
    
    # –¢–µ—Å—Ç 3: –§—ñ–ª—å—Ç—Ä –ø–æ –ø–µ—Ä—ñ–æ–¥—É (–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å)
    today = datetime.now()
    start_date = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    last_day = calendar.monthrange(today.year, today.month)[1]
    end_date = today.replace(day=last_day, hour=23, minute=59, second=59, microsecond=999999)
    
    month_transactions = get_transactions(
        user.id, 
        limit=100, 
        start_date=start_date, 
        end_date=end_date
    )
    print(f"üìÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å: {len(month_transactions)}")
    
    # –¢–µ—Å—Ç 4: –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä (–≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å)
    month_expenses = get_transactions(
        user.id,
        limit=100,
        transaction_type=TransactionType.EXPENSE,
        start_date=start_date,
        end_date=end_date
    )
    print(f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å: {len(month_expenses)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ
    assert len(income_transactions) + len(expense_transactions) <= len(all_transactions), "–ü–æ–º–∏–ª–∫–∞ –≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ —Ç–∏–ø—É"
    assert len(month_transactions) <= len(all_transactions), "–ü–æ–º–∏–ª–∫–∞ –≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –¥–∞—Ç—ñ"
    assert len(month_expenses) <= len(month_transactions), "–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ–π —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó"
    
    print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    if all_transactions:
        print("\nüìù –ü—Ä–∏–∫–ª–∞–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
        for i, t in enumerate(all_transactions[:3]):
            type_text = "–î–æ—Ö—ñ–¥" if t.type == TransactionType.INCOME else "–í–∏—Ç—Ä–∞—Ç–∞"
            print(f"{i+1}. {t.transaction_date.strftime('%d.%m.%Y')} - {type_text}: {t.amount} UAH ({t.description})")

if __name__ == "__main__":
    test_transaction_filters()
