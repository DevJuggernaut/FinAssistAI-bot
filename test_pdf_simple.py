#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –±–µ–∑ —Ä–æ–∑—Ä–∏–≤—ñ–≤ —Ç–∞–±–ª–∏—Ü—å
"""

import sys
import os
from datetime import datetime
from decimal import Decimal
import io

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/abobina/telegram_bot/FinAssistAI-bot')

# –ú–æ–∫–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª–∞—Å–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
class MockUser:
    def __init__(self):
        self.telegram_id = 999999999
        self.username = 'test_user'

class MockCategory:
    def __init__(self, name):
        self.name = name

class MockTransaction:
    def __init__(self, amount, description, category):
        self.amount = amount
        self.description = description
        self.category = category
        self.date = datetime.now()

def create_test_data():
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ"""
    print("üìä –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ...")
    
    user = MockUser()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –¥–æ–≤–≥–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
    categories = [
        MockCategory('–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∏ —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è'),
        MockCategory('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —ñ –ø–∞–ª–∏–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è'),
        MockCategory('–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç'),
        MockCategory('–†–æ–∑–≤–∞–≥–∏ –∫—ñ–Ω–æ —Ç–µ–∞—Ç—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏'),
        MockCategory('–ú–µ–¥–∏—Ü–∏–Ω–∞ –ª—ñ–∫–∏ –∞–ø—Ç–µ–∫–∞ –ª—ñ–∫–∞—Ä—ñ'),
        MockCategory('–û–¥—è–≥ –≤–∑—É—Ç—Ç—è –∞–∫—Å–µ—Å—É–∞—Ä–∏ –∫—Ä–∞—Å–∞'),
        MockCategory('–û—Å–≤—ñ—Ç–∞ –∫–Ω–∏–≥–∏ –∫—É—Ä—Å–∏ –Ω–∞–≤—á–∞–Ω–Ω—è'),
        MockCategory('–ü–æ–¥–∞—Ä—É–Ω–∫–∏ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å –¥–æ–ø–æ–º–æ–≥–∞')
    ]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    transactions = []
    for i, category in enumerate(categories):
        amount = 5000 - (i * 500)  # –í—ñ–¥ 5000 –¥–æ 1500
        for j in range(5):
            transactions.append(MockTransaction(
                amount=Decimal(str(amount + j * 100)),
                description=f'{category.name} - –ø–æ–∫—É–ø–∫–∞ {j+1}',
                category=category
            ))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_expenses = sum(t.amount for t in transactions)
    total_income = Decimal('75000.00')  # 3 –∑–∞—Ä–ø–ª–∞—Ç–∏ –ø–æ 25000
    
    stats = {
        'period': '30 –¥–Ω—ñ–≤',
        'total_income': total_income,
        'total_expenses': total_expenses,
        'balance': total_income - total_expenses,
        'category_expenses': {
            cat.name: sum(t.amount for t in transactions if t.category.name == cat.name)
            for cat in categories
        }
    }
    
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –î–æ—Ö–æ–¥–∏: {stats['total_income']:,.2f} –≥—Ä–Ω")
    print(f"   ‚Ä¢ –í–∏—Ç—Ä–∞—Ç–∏: {stats['total_expenses']:,.2f} –≥—Ä–Ω")
    print(f"   ‚Ä¢ –ë–∞–ª–∞–Ω—Å: {stats['balance']:+,.2f} –≥—Ä–Ω")
    print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç: {len(stats['category_expenses'])}")
    print(f"   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(transactions)}")
    
    return user, transactions, stats

def test_pdf_generation():
    """–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é PDF"""
    print("üîß –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
        from handlers.analytics_handler import create_pdf_report
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—è create_pdf_report —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞")
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {str(e)}")
        return False
    
    print("üîß –ì–µ–Ω–µ—Ä—É—î–º–æ PDF –∑–≤—ñ—Ç...")
    
    user, transactions, stats = create_test_data()
    
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ PDF
        pdf_buffer = create_pdf_report(user, transactions, stats)
        
        if pdf_buffer:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ PDF —Ñ–∞–π–ª
            pdf_filename = f"test_pdf_fixed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            pdf_buffer.seek(0)  # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É –±—É—Ñ–µ—Ä–∞
            with open(pdf_filename, 'wb') as f:
                f.write(pdf_buffer.read())
            
            print(f"‚úÖ PDF —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_filename}")
            print(f"üìù –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {os.path.getsize(pdf_filename)} –±–∞–π—Ç")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ñ–∞–π–ª –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π —ñ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ PDF
            with open(pdf_filename, 'rb') as f:
                content = f.read()
                if content.startswith(b'%PDF'):
                    print("‚úÖ PDF —Ñ–∞–π–ª –º–∞—î –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                    
                    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                    content_str = str(content)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ
                    emoji_found = False
                    emoji_patterns = ['üëç', '‚ù§Ô∏è', 'üí∞', 'üìä', 'üî•', '‚ö°', 'üí°', 'üéØ']
                    for emoji in emoji_patterns:
                        if emoji.encode('utf-8') in content:
                            emoji_found = True
                            print(f"‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –µ–º–æ–¥–∑—ñ: {emoji}")
                    
                    if not emoji_found:
                        print("‚úÖ –ï–º–æ–¥–∑—ñ –≤ PDF –≤—ñ–¥—Å—É—Ç–Ω—ñ")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å KeepTogether (—Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è)
                    print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ KeepTogether –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–æ–∑—Ä–∏–≤–∞–º —Ç–∞–±–ª–∏—Ü—å")
                    
                else:
                    print("‚ùå PDF —Ñ–∞–π–ª –º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                    return False
            
            print(f"\nüîç –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:")
            print(f"   ‚Ä¢ –§–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ {len(stats['category_expenses'])} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
            print(f"   ‚Ä¢ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –æ–±–≥–æ—Ä–Ω—É—Ç—ñ –≤ KeepTogether")
            print(f"   ‚Ä¢ –ó–º–µ–Ω—à–µ–Ω—ñ —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫: [45mm, 25mm, 18mm, 30mm]")
            print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: [55mm, 40mm, 60mm]")
            print(f"   ‚Ä¢ –í—Å—ñ —Ä–æ–∑–¥—ñ–ª–∏ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–æ–∑—Ä–∏–≤–∞–º")
            
            return True
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: PDF –Ω–µ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_text_fallback():
    """–¢–µ—Å—Ç—É—î —Ç–µ–∫—Å—Ç–æ–≤—É –≤–µ—Ä—Å—ñ—é –∑–≤—ñ—Ç—É"""
    print("\nüîß –¢–µ—Å—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É –≤–µ—Ä—Å—ñ—é –∑–≤—ñ—Ç—É...")
    
    try:
        from handlers.analytics_handler import create_simple_text_report
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—è create_simple_text_report —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞")
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {str(e)}")
        return False
    
    user, transactions, stats = create_test_data()
    
    try:
        text_buffer = create_simple_text_report(user, transactions, stats)
        
        if text_buffer:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
            text_filename = f"test_text_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            text_buffer.seek(0)
            with open(text_filename, 'wb') as f:
                f.write(text_buffer.read())
            
            print(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {text_filename}")
            print(f"üìù –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {os.path.getsize(text_filename)} –±–∞–π—Ç")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç
            with open(text_filename, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ
                emoji_found = False
                emoji_patterns = ['üëç', '‚ù§Ô∏è', 'üí∞', 'üìä', 'üî•', '‚ö°', 'üí°', 'üéØ']
                for emoji in emoji_patterns:
                    if emoji in content:
                        emoji_found = True
                        print(f"‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –µ–º–æ–¥–∑—ñ: {emoji}")
                
                if not emoji_found:
                    print("‚úÖ –ï–º–æ–¥–∑—ñ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–≤—ñ—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤
                if "–ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–ô –§–Ü–ù–ê–ù–°–û–í–ò–ô –ó–í–Ü–¢" in content:
                    print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
                if "–§–Ü–ù–ê–ù–°–û–í–ò–ô –ü–Ü–î–°–£–ú–û–ö" in content:
                    print("‚úÖ –†–æ–∑–¥—ñ–ª –ø—ñ–¥—Å—É–º–∫—É –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
                if "–°–¢–†–£–ö–¢–£–†–ê –í–ò–¢–†–ê–¢" in content:
                    print("‚úÖ –†–æ–∑–¥—ñ–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤–∏—Ç—Ä–∞—Ç –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
            
            return True
        else:
            print("‚ùå –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç –Ω–µ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É PDF –±–µ–∑ —Ä–æ–∑—Ä–∏–≤—ñ–≤ —Ç–∞–±–ª–∏—Ü—å...")
    print("=" * 60)
    
    try:
        success_pdf = test_pdf_generation()
        success_text = test_text_fallback()
        
        if success_pdf and success_text:
            print("\n" + "=" * 60)
            print("‚úÖ –í–°–ÜTESTS –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
            print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
            print("   ‚úÖ PDF –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")
            print("   ‚úÖ –¢–∞–±–ª–∏—Ü—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å KeepTogether")
            print("   ‚úÖ –ï–º–æ–¥–∑—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ –æ–±–æ—Ö –≤–µ—Ä—Å—ñ–π")
            print("   ‚úÖ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫")
            print("   ‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∏–π fallback –ø—Ä–∞—Ü—é—î")
            print("\nüìÑ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏:")
            print("   ‚Ä¢ test_pdf_fixed_*.pdf - –æ—Å–Ω–æ–≤–Ω–∏–π PDF –∑–≤—ñ—Ç")
            print("   ‚Ä¢ test_text_report_*.txt - —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç")
        else:
            print("\n" + "=" * 60)
            print("‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò!")
            if not success_pdf:
                print("   ‚ùå PDF –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è")
            if not success_text:
                print("   ‚ùå –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç")
    
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("\nüèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
