#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—ó create_pdf_report –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ
"""

import os
import sys
from datetime import datetime, timedelta

# –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–ø–∫—É –¥–æ sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_font_registration():
    """–¢–µ—Å—Ç—É—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —à—Ä–∏—Ñ—Ç—ñ–≤ DejaVu"""
    print("üî§ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —à—Ä–∏—Ñ—Ç—ñ–≤ DejaVu...")
    
    try:
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        from reportlab.pdfbase.pdfmetrics import registerFontFamily
        
        # –®–ª—è—Ö –¥–æ –Ω–∞—à–∏—Ö —à—Ä–∏—Ñ—Ç—ñ–≤ (—É –ø–æ—Ç–æ—á–Ω—ñ–π –ø–∞–ø—Ü—ñ –ø—Ä–æ–µ–∫—Ç—É)
        base_dir = os.path.dirname(os.path.abspath(__file__))
        font_dir = os.path.join(base_dir, 'fonts')
        
        regular_font_path = os.path.join(font_dir, 'DejaVuSans.ttf')
        bold_font_path = os.path.join(font_dir, 'DejaVuSans-Bold.ttf')
        
        print(f"üìÅ –®–ª—è—Ö –¥–æ —à—Ä–∏—Ñ—Ç—ñ–≤: {font_dir}")
        print(f"üìÑ –û—Å–Ω–æ–≤–Ω–∏–π —à—Ä–∏—Ñ—Ç: {regular_font_path}")
        print(f"üìÑ –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç: {bold_font_path}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
        if not os.path.exists(regular_font_path):
            print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∏–π —à—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {regular_font_path}")
            return False
            
        if not os.path.exists(bold_font_path):
            print(f"‚ùå –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {bold_font_path}")
            return False
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ —à—Ä–∏—Ñ—Ç–∏
        print("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —à—Ä–∏—Ñ—Ç—ñ–≤...")
        pdfmetrics.registerFont(TTFont('DejaVuSans', regular_font_path))
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π —à—Ä–∏—Ñ—Ç DejaVuSans –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        
        pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', bold_font_path))
        print("‚úÖ –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç DejaVuSans-Bold –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Å—ñ–º'—é —à—Ä–∏—Ñ—Ç—ñ–≤
        registerFontFamily('DejaVuSans', normal='DejaVuSans', bold='DejaVuSans-Bold')
        print("‚úÖ –°—ñ–º'—è —à—Ä–∏—Ñ—Ç—ñ–≤ DejaVuSans –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —à—Ä–∏—Ñ—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
        available_fonts = pdfmetrics.getRegisteredFontNames()
        
        success = True
        if 'DejaVuSans' in available_fonts:
            print("‚úÖ DejaVuSans –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ ReportLab")
        else:
            print("‚ùå DejaVuSans –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ ReportLab")
            success = False
            
        if 'DejaVuSans-Bold' in available_fonts:
            print("‚úÖ DejaVuSans-Bold –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ ReportLab")
        else:
            print("‚ùå DejaVuSans-Bold –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ ReportLab")
            success = False
        
        return success
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —à—Ä–∏—Ñ—Ç—ñ–≤: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_simple_pdf_creation():
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π PDF –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("\nüìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é...")
    
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib import colors
        from reportlab.lib.enums import TA_CENTER
        import io
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        story = []
        
        # –°—Ç–∏–ª—å –∑ –Ω–∞—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º
        styles = getSampleStyleSheet()
        cyrillic_style = ParagraphStyle(
            'CyrillicTest',
            parent=styles['Normal'],
            fontName='DejaVuSans',
            fontSize=14,
            textColor=colors.black,
            alignment=TA_CENTER,
            spaceBefore=10,
            spaceAfter=10
        )
        
        bold_style = ParagraphStyle(
            'CyrillicBoldTest',
            parent=styles['Normal'],
            fontName='DejaVuSans-Bold',
            fontSize=18,
            textColor=colors.blue,
            alignment=TA_CENTER,
            spaceBefore=20,
            spaceAfter=20
        )
        
        # –î–æ–¥–∞—î–º–æ –∫–∏—Ä–∏–ª—ñ—á–Ω–∏–π —Ç–µ–∫—Å—Ç
        test_texts = [
            ("–¢–µ—Å—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—ñ –≤ PDF", bold_style),
            ("–¶–µ–π –¥–æ–∫—É–º–µ–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏", cyrillic_style),
            ("–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç: –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏", cyrillic_style),
            ("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: –ø—Ä–æ–¥—É–∫—Ç–∏, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ", cyrillic_style),
            ("–°—É–º–∞: 1,234.56 –≥—Ä–Ω", cyrillic_style),
            ("–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –Ω–∞ 15%", cyrillic_style),
            ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: –∑–±—ñ–ª—å—à–∏—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∏—Ç—Ä–∞—Ç", cyrillic_style),
            ("–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: 24.06.2025", cyrillic_style)
        ]
        
        for text, style in test_texts:
            story.append(Paragraph(text, style))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF
        doc.build(story)
        buffer.seek(0)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
        test_filename = f"test_cyrillic_simple_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        with open(test_filename, 'wb') as f:
            f.write(buffer.getvalue())
        
        file_size = len(buffer.getvalue())
        print(f"‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ: {test_filename}")
        print(f"üìè –†–æ–∑–º—ñ—Ä: {file_size:,} –±–∞–π—Ç")
        
        # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–º—ñ—Å—Ç—É
        pdf_content = buffer.getvalue()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è –∫–∏—Ä–∏–ª–∏—Ü—ñ
        cyrillic_checks = {
            "UTF-8": "—É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ".encode('utf-8') in pdf_content,
            "UTF-16": "—É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ".encode('utf-16') in pdf_content,
            "CP1251": False,  # –°–ø—Ä–æ–±—É—î–º–æ –ø—ñ–∑–Ω—ñ—à–µ
            "Raw Ukrainian": "—É–∫—Ä–∞—ó–Ω" in pdf_content.decode('utf-8', errors='ignore'),
            "–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π": "–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π".encode('utf-8') in pdf_content,
        }
        
        try:
            cyrillic_checks["CP1251"] = "—É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ".encode('cp1251') in pdf_content
        except:
            pass
        
        font_check = b"DejaVu" in pdf_content
        
        print(f"üîç –®—Ä–∏—Ñ—Ç DejaVu: {'‚úÖ' if font_check else '‚ùå'}")
        for check_name, result in cyrillic_checks.items():
            print(f"üîç –ö–∏—Ä–∏–ª–∏—Ü—è ({check_name}): {'‚úÖ' if result else '‚ùå'}")
        
        # –Ø–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–π—à–ª–∞ - –≤–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–º
        cyrillic_ok = any(cyrillic_checks.values())
        
        return cyrillic_ok and font_check
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def check_fonts_directory():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞–ø–∫—É –∑ —à—Ä–∏—Ñ—Ç–∞–º–∏"""
    print("üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–∫–∏ fonts/...")
    
    base_dir = os.path.dirname(os.path.abspath(__file__))
    font_dir = os.path.join(base_dir, 'fonts')
    
    if not os.path.exists(font_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ fonts/ –Ω–µ —ñ—Å–Ω—É—î: {font_dir}")
        return False
    
    files = os.listdir(font_dir)
    print(f"üìã –§–∞–π–ª–∏ –≤ fonts/: {files}")
    
    required_files = ['DejaVuSans.ttf', 'DejaVuSans-Bold.ttf']
    missing_files = []
    
    for required_file in required_files:
        file_path = os.path.join(font_dir, required_file)
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {required_file}: {size:,} –±–∞–π—Ç")
        else:
            print(f"‚ùå {required_file}: –í–Ü–î–°–£–¢–ù–Ü–ô")
            missing_files.append(required_file)
    
    if missing_files:
        print(f"\nüö® –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: {missing_files}")
        return False
    else:
        print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —à—Ä–∏—Ñ—Ç–∏ –Ω–∞—è–≤–Ω—ñ")
        return True

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—ñ –≤ PDF\n")
    
    # –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞–ø–∫—É –∑ —à—Ä–∏—Ñ—Ç–∞–º–∏
    step1 = check_fonts_directory()
    
    if not step1:
        print("\nüö® –†–ï–ó–£–õ–¨–¢–ê–¢: –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —à—Ä–∏—Ñ—Ç–∏ –≤ –ø–∞–ø–∫—É fonts/")
        sys.exit(1)
    
    # –ö—Ä–æ–∫ 2: –¢–µ—Å—Ç—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —à—Ä–∏—Ñ—Ç—ñ–≤
    print("\n" + "="*50)
    step2 = test_font_registration()
    
    if not step2:
        print("\nüö® –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —à—Ä–∏—Ñ—Ç—ñ–≤")
        sys.exit(1)
    
    # –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π PDF
    print("\n" + "="*50)
    step3 = test_simple_pdf_creation()
    
    if step3:
        print("\nüéâ –£–°–ü–Ü–•: –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏!")
        print("üì± –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π PDF —Ñ–∞–π–ª —ñ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏")
        print("üî§ –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ –∑–∞–º—ñ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫—ñ–≤ - –ø—Ä–æ–±–ª–µ–º–∞ –≤–∏—Ä—ñ—à–µ–Ω–∞!")
    else:
        print("\nüö® –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é")
        sys.exit(1)
