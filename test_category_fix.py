#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
"""

import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.ml_categorizer import TransactionCategorizer
from database.db_operations import get_user_categories, get_user, create_category
from database.models import TransactionType as DBTransactionType
from database.session import Session

def test_category_matching():
    """–¢–µ—Å—Ç—É—î —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –ë–î...")
    
    categorizer = TransactionCategorizer()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    test_cases = [
        {"description": "–æ–±—ñ–¥ –≤ ILoveKebab", "amount": 999, "type": "expense"},
        {"description": "–ê–¢–ë –ø—Ä–æ–¥—É–∫—Ç–∏", "amount": 450, "type": "expense"},
        {"description": "–ø—Ä–æ—ó–∑–¥ –º–µ—Ç—Ä–æ", "amount": 50, "type": "expense"},
        {"description": "–∑–∞—Ä–ø–ª–∞—Ç–∞", "amount": 15000, "type": "income"},
    ]
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó:")
    print("-" * 70)
    
    for test in test_cases:
        result = categorizer.categorize_transaction(
            description=test["description"],
            amount=test["amount"],
            transaction_type=test["type"]
        )
        
        type_icon = "üí∏" if test["type"] == "expense" else "üí∞"
        print(f"{type_icon} {test['amount']}‚Ç¥ ‚Ä¢ {test['description']}")
        print(f"   ü§ñ ML –∫–∞—Ç–µ–≥–æ—Ä—ñ–∑–∞—Ü—ñ—è: {result['icon']} {result['name']} (ID: {result['id']})")
        print(f"   ‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–π–¥–µ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{result['name']}' –≤ –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print()

def test_category_creation_logic():
    """–¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    print("üõ†Ô∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
    
    # –°–∏–º—É–ª—é—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é –∑ –≤—ñ–¥—Å—É—Ç–Ω—å–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    ml_category = {
        'id': 3,  # ML ID (–Ω–µ —ñ—Å–Ω—É—î –≤ –ë–î)
        'name': '–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏',
        'icon': 'üçΩÔ∏è'
    }
    
    print(f"\nüìù ML –ø—Ä–æ–ø–æ–Ω—É—î: {ml_category['icon']} {ml_category['name']} (ML ID: {ml_category['id']})")
    print("üîç –°–∏—Å—Ç–µ–º–∞ —à—É–∫–∞—î –≤ –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏'...")
    print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
    print("‚ûï –°–∏—Å—Ç–µ–º–∞ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:")
    print(f"   - –ù–∞–∑–≤–∞: {ml_category['name']}")
    print(f"   - –Ü–∫–æ–Ω–∫–∞: {ml_category['icon']}")
    print("   - –¢–∏–ø: expense")
    print("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π —Ä–µ–∞–ª—å–Ω–∏–π ID –∑ –ë–î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 156)")
    print("üíæ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º ID=156")

if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")
    print("=" * 70)
    
    try:
        test_category_matching()
        test_category_creation_logic()
        
        print("‚úÖ –õ–æ–≥—ñ–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–∞!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")
        print("1. üîç –°–∏—Å—Ç–µ–º–∞ —à—É–∫–∞—î —ñ—Å–Ω—É—é—á—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –Ω–∞–∑–≤–æ—é")
        print("2. ‚ûï –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ")
        print("3. üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ ID –∑ –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print("4. üìù –î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        print("5. ‚úÖ Fallback –Ω–∞ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
        
        print("\nüéØ –¢–µ–ø–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è '–æ–±—ñ–¥ –≤ ILoveKebab' –±—É–¥–µ:")
        print("   ü§ñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ —è–∫: üçΩÔ∏è –ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
        print("   üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()
