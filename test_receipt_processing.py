#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —á–µ–∫—ñ–≤ –±–µ–∑ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.mida_receipt_parser import mida_receipt_parser
from services.free_receipt_parser import free_receipt_parser
from services.ml_categorizer import transaction_categorizer
from database.db_operations import get_or_create_user, add_transaction, get_user_categories
from datetime import datetime
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_receipt_processing(image_path: str):
    """–¢–µ—Å—Ç—É—î –æ–±—Ä–æ–±–∫—É —á–µ–∫—É –±–µ–∑ –±–æ—Ç–∞"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = get_or_create_user(
        telegram_id=123456789,
        username="test_user",
        first_name="Test",
        last_name="User"
    )
    
    print(f"üì± –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id})")
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ MIDA –ø–∞—Ä—Å–µ—Ä
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ MIDA –ø–∞—Ä—Å–µ—Ä...")
    receipt_data = mida_receipt_parser.parse_receipt(image_path)
    
    if receipt_data and 'categorized_items' in receipt_data and receipt_data['categorized_items']:
        print("‚úÖ MIDA –ø–∞—Ä—Å–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ —á–µ–∫!")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏
        categorized_items = receipt_data['categorized_items']
        user_categories = get_user_categories(user.id)
        print(f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {len(user_categories)}")
        
        for category, data in categorized_items.items():
            if isinstance(data, dict) and 'items' in data:
                category_total = data['total_amount']
                item_count = data['item_count']
                
                print(f"\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}")
                print(f"üí∞ –°—É–º–∞: {category_total:.2f} –≥—Ä–Ω")
                print(f"üõçÔ∏è –¢–æ–≤–∞—Ä—ñ–≤: {item_count}")
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                category_id = None
                for cat in user_categories:
                    if cat.name.lower() == category.lower():
                        category_id = cat.id
                        break
                
                if not category_id and user_categories:
                    category_id = user_categories[0].id
                    print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—é '{category}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ '{user_categories[0].name}'")
                
                try:
                    # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                    transaction = add_transaction(
                        user_id=user.id,
                        amount=category_total,
                        description=f"MIDA - {category} ({item_count} —Ç–æ–≤–∞—Ä—ñ–≤)",
                        category_id=category_id,
                        transaction_type='expense',
                        transaction_date=receipt_data.get('date', datetime.now()),
                        source='mida_receipt_test'
                    )
                    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: ID {transaction.id}")
                    
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
        
    else:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä
        print("‚ö†Ô∏è MIDA –ø–∞—Ä—Å–µ—Ä –Ω–µ –≤–ø–æ—Ä–∞–≤—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π...")
        receipt_data = free_receipt_parser.parse_receipt(image_path)
        
        if receipt_data and receipt_data.get('total_amount', 0) > 0:
            print("‚úÖ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ —á–µ–∫!")
            
            try:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î–º–æ
                category_name = transaction_categorizer.predict_category(
                    receipt_data.get('raw_text', '') or receipt_data.get('store_name', '–ü–æ–∫—É–ø–∫–∞')
                )[0] if hasattr(transaction_categorizer, 'predict_category') else 'groceries'
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                user_categories = get_user_categories(user.id)
                category_id = None
                for cat in user_categories:
                    if cat.name.lower() == category_name.lower():
                        category_id = cat.id
                        break
                
                if not category_id and user_categories:
                    category_id = user_categories[0].id
                
                # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                transaction = add_transaction(
                    user_id=user.id,
                    amount=receipt_data['total_amount'],
                    description=f"–ü–æ–∫—É–ø–∫–∞ –≤ {receipt_data.get('store_name', '–º–∞–≥–∞–∑–∏–Ω—ñ')}",
                    category_id=category_id,
                    transaction_type='expense',
                    transaction_date=receipt_data.get('date', datetime.now()),
                    source='receipt_test'
                )
                print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: ID {transaction.id}")
                print(f"üí∞ –°—É–º–∞: {receipt_data['total_amount']:.2f} –≥—Ä–Ω")
                print(f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {receipt_data.get('store_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–µ–∫")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python test_receipt_processing.py <—à–ª—è—Ö_–¥–æ_—Ñ–æ—Ç–æ>")
        sys.exit(1)
    
    test_receipt_processing(sys.argv[1])
