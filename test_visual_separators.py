#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —É –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import MagicMock, AsyncMock
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from handlers.transaction_handler import show_category_filter_menu
from database.models import Category, TransactionType

def test_visual_separators():
    """–¢–µ—Å—Ç—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    
    # –ú–æ–∫–∏
    query = MagicMock()
    query.from_user.id = 123
    query.edit_message_text = AsyncMock()
    
    context = MagicMock()
    context.user_data = {
        'transaction_filters': {'category': 'all'}
    }
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ - –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    test_categories = [
        Category(id=1, name="–ü—Ä–æ–¥—É–∫—Ç–∏", type=TransactionType.EXPENSE.value, icon="üõí", user_id=123),
        Category(id=2, name="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", type=TransactionType.EXPENSE.value, icon="üöó", user_id=123),
        Category(id=3, name="–ó–∞—Ä–ø–ª–∞—Ç–∞", type=TransactionType.INCOME.value, icon="üí∞", user_id=123),
        Category(id=4, name="–ë–æ–Ω—É—Å–∏", type=TransactionType.INCOME.value, icon="üéÅ", user_id=123),
        Category(id=5, name="–ö–∞—Ñ–µ", type=TransactionType.EXPENSE.value, icon="‚òï", user_id=123),
    ]
    
    # –ú–æ–∫ –¥–ª—è get_user
    def mock_get_user(user_id):
        user_mock = MagicMock()
        user_mock.id = user_id
        return user_mock
    
    # –ú–æ–∫ –¥–ª—è get_user_categories
    def mock_get_user_categories(user_id):
        return test_categories
    
    # –ü–∞—Ç—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    import handlers.transaction_handler
    original_get_user = handlers.transaction_handler.get_user
    original_get_user_categories = handlers.transaction_handler.get_user_categories
    
    handlers.transaction_handler.get_user = mock_get_user
    handlers.transaction_handler.get_user_categories = mock_get_user_categories
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
        import asyncio
        
        async def run_test():
            await show_category_filter_menu(query, context, page=1)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞
            assert query.edit_message_text.called, "edit_message_text should be called"
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∏–∫–ª–∏–∫—É
            call_args = query.edit_message_text.call_args
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
            if call_args is None:
                print("‚ùå –§—É–Ω–∫—Ü—ñ—è edit_message_text –Ω–µ –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
                return False
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —Ç–∞ kwargs
            args = call_args[0] if call_args[0] else []
            kwargs = call_args[1] if call_args[1] else {}
            
            text = args[0] if args else kwargs.get('text', '')
            reply_markup = kwargs.get('reply_markup', None)
            
            if not reply_markup:
                print("‚ùå reply_markup –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")
                return False
            
            print("üìÑ –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
            print(text)
            print("\n" + "="*50 + "\n")
            
            print("üéõÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:")
            for i, row in enumerate(reply_markup.inline_keyboard):
                print(f"–†—è–¥ {i+1}:")
                for j, button in enumerate(row):
                    button_text = button.text
                    callback_data = button.callback_data
                    print(f"  –ö–Ω–æ–ø–∫–∞ {j+1}: '{button_text}' -> '{callback_data}'")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤
            keyboard_buttons = []
            for row in reply_markup.inline_keyboard:
                for button in row:
                    keyboard_buttons.append((button.text, button.callback_data))
            
            # –®—É–∫–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏
            expense_separator_found = any("üí∏ ‚îÄ‚îÄ –í–ò–¢–†–ê–¢–ò ‚îÄ‚îÄ" in text for text, _ in keyboard_buttons)
            income_separator_found = any("üí∞ ‚îÄ‚îÄ –î–û–•–û–î–ò ‚îÄ‚îÄ" in text for text, _ in keyboard_buttons)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:")
            print(f"   –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –≤–∏—Ç—Ä–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: {expense_separator_found}")
            print(f"   –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥–æ—Ö–æ–¥—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {income_separator_found}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π callback
            noop_callbacks = [callback for text, callback in keyboard_buttons if callback == "noop_header"]
            print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å noop_header callbacks: {len(noop_callbacks)}")
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            expense_categories = [cat for cat in test_categories if cat.type == TransactionType.EXPENSE.value]
            income_categories = [cat for cat in test_categories if cat.type == TransactionType.INCOME.value]
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç: {len(expense_categories)}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤: {len(income_categories)}")
            print(f"   –ó–∞–≥–∞–ª–æ–º –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(test_categories)}")
            
            return expense_separator_found and income_separator_found
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
        result = asyncio.run(run_test())
        
        if result:
            print(f"\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ! –í—ñ–∑—É–∞–ª—å–Ω—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤. –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
    finally:
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        handlers.transaction_handler.get_user = original_get_user
        handlers.transaction_handler.get_user_categories = original_get_user_categories

if __name__ == "__main__":
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
    test_visual_separators()
