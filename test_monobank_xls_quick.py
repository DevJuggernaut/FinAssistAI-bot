#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É XLS –¥–ª—è Monobank
"""

import os
import sys
import pandas as pd
from datetime import datetime
import tempfile

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ—î–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def create_test_xls_file():
    """
    –°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤–∏–π XLS —Ñ–∞–π–ª –∑ –∑—Ä–∞–∑–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ Monobank
    """
    # –ó—Ä–∞–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ Monobank
    data = {
        '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó': ['20.06.2025', '19.06.2025', '18.06.2025', '17.06.2025'],
        '–ß–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó': ['14:30:25', '10:15:30', '18:45:12', '09:20:18'],
        '–î–µ—Ç–∞–ª—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó': [
            '–ü–æ–∫—É–ø–∫–∞ –≤ –ê–¢–ë –ú–∞—Ä–∫–µ—Ç',
            '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∏',
            '–û–ø–ª–∞—Ç–∞ –∑–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –∑–≤\'—è–∑–æ–∫', 
            '–ü–æ–∫—É–ø–∫–∞ –∫–∞–≤–∏ –≤ –∫–∞—Ñ–µ'
        ],
        'MCC': ['5411', '0000', '4814', '5812'],
        '–°—É–º–∞ –≤ –≤–∞–ª—é—Ç—ñ –∫–∞—Ä—Ç–∫–∏ (UAH)': [-250.50, 15000.00, -99.00, -45.75],
        '–ë–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó': [12500.25, 12750.75, -2249.25, -2195.00]
    }
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
    df = pd.DataFrame(data)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False)
    temp_file.close()
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤ Excel
    df.to_excel(temp_file.name, index=False, engine='openpyxl')
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: {temp_file.name}")
    return temp_file.name

def test_monobank_xls_parser():
    """
    –¢–µ—Å—Ç—É—î –Ω–æ–≤–∏–π –ø–∞—Ä—Å–µ—Ä XLS —Ñ–∞–π–ª—ñ–≤
    """
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä—Å–µ—Ä
        from services.statement_parser import StatementParser
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        test_file = create_test_xls_file()
        
        print("\n" + "="*50)
        print("–¢–ï–°–¢ –ü–ê–†–°–ï–†–ê XLS –§–ê–ô–õ–Ü–í MONOBANK")
        print("="*50)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä—Å–µ—Ä —Ç–∞ —Ç–µ—Å—Ç—É—î–º–æ
        parser = StatementParser()
        
        print(f"\nüîÑ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: {test_file}")
        transactions = parser._parse_monobank_xls(test_file)
        
        print(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
        print("-" * 50)
        
        for i, transaction in enumerate(transactions, 1):
            print(f"\nüìä –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {i}:")
            print(f"   üìÖ –î–∞—Ç–∞: {transaction['date']}")
            print(f"   üïê –ß–∞—Å: {transaction['time']}")
            print(f"   üí∞ –°—É–º–∞: {transaction['amount']} UAH")
            print(f"   üìù –¢–∏–ø: {transaction['type']}")
            print(f"   üìÑ –û–ø–∏—Å: {transaction['description']}")
            print(f"   üè∑Ô∏è –î–∂–µ—Ä–µ–ª–æ: {transaction['source']}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥—É
        expected_transactions = 4
        if len(transactions) == expected_transactions:
            print(f"\n‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–µ–∫—Ç–Ω–∞: {len(transactions)}")
        else:
            print(f"\n‚ùå –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è {expected_transactions}, –æ—Ç—Ä–∏–º–∞–Ω–æ {len(transactions)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        income_count = sum(1 for t in transactions if t['type'] == 'income')
        expense_count = sum(1 for t in transactions if t['type'] == 'expense')
        
        print(f"\nüìà –î–æ—Ö–æ–¥–∏: {income_count}")
        print(f"üìâ –í–∏—Ç—Ä–∞—Ç–∏: {expense_count}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        os.unlink(test_file)
        print(f"\nüóëÔ∏è –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_integration():
    """
    –¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º
    """
    try:
        from services.statement_parser import StatementParser
        
        print("\n" + "="*50)
        print("–¢–ï–°–¢ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó –û–°–ù–û–í–ù–ò–ú –ü–ê–†–°–ï–†–û–ú")
        print("="*50)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        test_file = create_test_xls_file()
        
        # –¢–µ—Å—Ç—É—î–º–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥
        parser = StatementParser()
        transactions = parser.parse_bank_statement(test_file, bank_type='monobank')
        
        print(f"‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î! –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        os.unlink(test_file)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ XLS —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –¥–ª—è Monobank")
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    test1_success = test_monobank_xls_parser()
    
    # –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    test2_success = test_integration()
    
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("="*50)
    
    if test1_success and test2_success:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("‚úÖ XLS —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è Monobank –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    else:
        print("‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
    
    print("\nüí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ XLS —Ñ–∞–π–ª–∏ Monobank —É –±–æ—Ç—ñ!")
