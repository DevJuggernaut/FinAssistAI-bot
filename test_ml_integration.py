#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –≤–∏–ø–∏—Å–æ–∫
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.statement_parser import StatementParser
from services.ml_categorizer import transaction_categorizer

def test_ml_categorizer_integration():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∑ –ø–∞—Ä—Å–µ—Ä–æ–º –≤–∏–ø–∏—Å–æ–∫"""
    
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∑ –ø–∞—Ä—Å–µ—Ä–æ–º –≤–∏–ø–∏—Å–æ–∫")
    print("=" * 70)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä—Å–µ—Ä
    parser = StatementParser()
    
    # –°–∏–º—É–ª—é—î–º–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —Ä—ñ–∑–Ω–∏–º–∏ –æ–ø–∏—Å–∞–º–∏
    test_transactions = [
        # –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ –≤–∏–ø–∏—Å–∫–∞
        {"description": "–ü–æ–∫—É–ø–∫–∞ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ –°—ñ–ª—å–ø–æ", "amount": -150.50, "date": "2025-01-01", "source": "PrivatBank"},
        {"description": "–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏", "amount": 15000.00, "date": "2025-01-02", "source": "PrivatBank"},
        {"description": "–û–ø–ª–∞—Ç–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ McDonald's", "amount": -250.75, "date": "2025-01-03", "source": "PrivatBank"},
        
        # Monobank –≤–∏–ø–∏—Å–∫–∞
        {"description": "Uber –ø–æ—ó–∑–¥–∫–∞", "amount": -95.00, "date": "2025-01-04", "source": "Monobank"},
        {"description": "–ö–µ—à–±–µ–∫ –≤—ñ–¥ –ø–æ–∫—É–ø–∫–∏", "amount": 25.50, "date": "2025-01-05", "source": "Monobank"},
        {"description": "–ü–ª–∞—Ç—ñ–∂ –∑–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "amount": -850.00, "date": "2025-01-06", "source": "Monobank"},
    ]
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:")
    print("-" * 70)
    
    all_categorized = True
    
    for i, trans in enumerate(test_transactions, 1):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transaction_type = 'expense' if trans['amount'] < 0 else 'income'
        
        # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–µ—Ä–µ–∑ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä
        category = transaction_categorizer.suggest_category_for_bank_statement(
            trans['description'], transaction_type
        )
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        trans['category'] = category
        trans['type'] = transaction_type
        
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {i} ({trans['source']}):")
        print(f"  üìù –û–ø–∏—Å: {trans['description']}")
        print(f"  üí∞ –°—É–º–∞: {abs(trans['amount'])} UAH")
        print(f"  üìä –¢–∏–ø: {trans['type']}")
        print(f"  üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {trans['category']}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞
        if not category or category == 'other':
            if trans['type'] == 'expense':
                print("  ‚ö†Ô∏è  –£–≤–∞–≥–∞: –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è 'other'")
            elif category != 'income':
                print("  ‚ö†Ô∏è  –£–≤–∞–≥–∞: –ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–æ—Ö–æ–¥—É")
        else:
            print("  ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ")
        
        print()
    
    print("=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø ML –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¢–û–†–ê:")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categorized_count = sum(1 for trans in test_transactions if trans.get('category'))
    non_other_count = sum(1 for trans in test_transactions if trans.get('category') and trans['category'] not in ['other', 'income'])
    
    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏: {categorized_count}/{len(test_transactions)}")
    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑—ñ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏: {non_other_count}/{len(test_transactions)}")
    print(f"‚úÖ –í—ñ–¥—Å–æ—Ç–æ–∫ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó: {(non_other_count/len(test_transactions))*100:.1f}%")
    
    if categorized_count == len(test_transactions):
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û! ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–º–∏ –≤–∏–ø–∏—Å–∫–∞–º–∏.")
        return True
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù–û! –î–µ—è–∫—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.")
        return False

def test_different_bank_formats():
    """–¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –≤–∏–ø–∏—Å–æ–∫"""
    
    print("\nüè¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –±–∞–Ω–∫—ñ–≤:")
    print("=" * 70)
    
    # –°–∏–º—É–ª—é—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –æ–ø–∏—Å—ñ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    bank_formats = {
        "PrivatBank": [
            "ATB –°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç",
            "McDonald's –ö–∏—ó–≤",
            "Uber BV",
            "–î–¢–ï–ö –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è"
        ],
        "Monobank": [
            "–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ –°—ñ–ª—å–ø–æ",
            "–†–µ—Å—Ç–æ—Ä–∞–Ω '–ü—É–∑–∞—Ç–∞ –•–∞—Ç–∞'",
            "–û–ø–ª–∞—Ç–∞ —Ç–∞–∫—Å—ñ Bolt",
            "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –ö–∏—ó–≤–≤–æ–¥–æ–∫–∞–Ω–∞–ª"
        ]
    }
    
    for bank, descriptions in bank_formats.items():
        print(f"\nüèõÔ∏è  {bank} —Ñ–æ—Ä–º–∞—Ç:")
        print("-" * 40)
        
        for desc in descriptions:
            category = transaction_categorizer.suggest_category_for_bank_statement(desc, 'expense')
            print(f"  üìù '{desc}' ‚Üí üè∑Ô∏è  {category}")
    
    print("\n‚úÖ –¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏
    test1_passed = test_ml_categorizer_integration()
    test_different_bank_formats()
    
    print("\n" + "=" * 70)
    print("üìã –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø ML –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¢–û–†–ê:")
    if test1_passed:
        print("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç: –ü–†–û–ô–î–ï–ù–û")
        print("‚úÖ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—ñ–≤: –ü–†–û–ô–î–ï–ù–û")
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ.")
    else:
        print("‚ùå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç: –ù–ï –ü–†–û–ô–î–ï–ù–û")
        print("\n‚ö†Ô∏è  –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä.")
