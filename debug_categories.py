#!/usr/bin/env python3
"""
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def debug_user_categories(telegram_id=None):
    """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    print("üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n")
    
    # –Ø–∫—â–æ telegram_id –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π
    if telegram_id is None:
        print("‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π telegram_id. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥–∞–π—Ç–µ telegram_id —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.")
        telegram_id = 123456789  # –¢–µ—Å—Ç–æ–≤–∏–π telegram_id
    
    print(f"üë§ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram ID: {telegram_id}")
    
    try:
        from database.db_operations import get_user, get_user_categories
        from database.models import TransactionType
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = get_user(telegram_id)
        if not user:
            print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            print("üí° –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: {user.first_name or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'} (DB ID: {user.id})")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        all_categories = get_user_categories(user.id)
        print(f"üìä –í—Å—å–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(all_categories)}")
        
        if not all_categories:
            print("‚ùå –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —É –±–æ—Ç—ñ")
            return
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ—Ö–æ–¥–∏
        expense_categories = [c for c in all_categories if c.type == TransactionType.EXPENSE.value]
        income_categories = [c for c in all_categories if c.type == TransactionType.INCOME.value]
        
        print(f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏: {len(expense_categories)}")
        print(f"üí∞ –î–æ—Ö–æ–¥–∏: {len(income_categories)}")
        print()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏—Ç—Ä–∞—Ç–∏
        if expense_categories:
            print("üìã –ö–ê–¢–ï–ì–û–†–Ü–á –í–ò–¢–†–ê–¢:")
            for i, cat in enumerate(expense_categories, 1):
                icon = cat.icon or "üí∏"
                print(f"  {i}. {icon} {cat.name} (ID: {cat.id})")
        else:
            print("‚ùå –ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç")
        
        print()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Ö–æ–¥–∏
        if income_categories:
            print("üìã –ö–ê–¢–ï–ì–û–†–Ü–á –î–û–•–û–î–Ü–í:")
            for i, cat in enumerate(income_categories, 1):
                icon = cat.icon or "üí∞"
                print(f"  {i}. {icon} {cat.name} (ID: {cat.id})")
        else:
            print("‚ùå –ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ—Ö–æ–¥—ñ–≤")
        
        print()
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        print("üîÑ –¢–ï–°–¢ –ü–ê–ì–Ü–ù–ê–¶–Ü–á:")
        per_page = 8
        total_categories = len(all_categories)
        total_pages = max(1, (total_categories + per_page - 1) // per_page)
        
        print(f"  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É: {per_page}")
        print(f"  ‚Ä¢ –í—Å—å–æ–≥–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {total_pages}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        all_categories_for_pagination = expense_categories + income_categories
        
        for page in range(1, total_pages + 1):
            start_idx = (page - 1) * per_page
            end_idx = start_idx + per_page
            page_categories = all_categories_for_pagination[start_idx:end_idx]
            
            print(f"\n  üìÑ –°–¢–û–†–Ü–ù–ö–ê {page}:")
            print(f"    –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {len(page_categories)}")
            
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–∞ —Ç–∏–ø–æ–º –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            page_expense_categories = [c for c in page_categories if c.type == TransactionType.EXPENSE.value]
            page_income_categories = [c for c in page_categories if c.type == TransactionType.INCOME.value]
            
            if page_expense_categories:
                print(f"    üí∏ –í–∏—Ç—Ä–∞—Ç–∏ ({len(page_expense_categories)}):")
                for cat in page_expense_categories:
                    print(f"      ‚Ä¢ {cat.icon or 'üí∏'} {cat.name}")
            
            if page_income_categories:
                print(f"    üí∞ –î–æ—Ö–æ–¥–∏ ({len(page_income_categories)}):")
                for cat in page_income_categories:
                    print(f"      ‚Ä¢ {cat.icon or 'üí∞'} {cat.name}")
            
            if not page_expense_categories and not page_income_categories:
                print("    ‚ùå –ü–£–°–¢–ê –°–¢–û–†–Ü–ù–ö–ê!")
        
        print(f"\n‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

def check_database_basic():
    """–ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("üîç –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n")
    
    try:
        from database.models import Session, User, Category
        
        session = Session()
        
        try:
            users_count = session.query(User).count()
            categories_count = session.query(Category).count()
            
            print(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {users_count}")
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π —É –±–∞–∑—ñ: {categories_count}")
            
            if users_count > 0:
                print(f"\nüìã –ü–µ—Ä—à—ñ 3 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:")
                users = session.query(User).limit(3).all()
                for user in users:
                    print(f"  ‚Ä¢ Telegram ID: {user.telegram_id}, –Ü–º'—è: {user.first_name or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}")
            
            print(f"\n‚úÖ –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        finally:
            session.close()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    check_database_basic()
    print("-" * 50)
    
    # –ü–æ—Ç—ñ–º –¥—ñ–∞–≥–Ω–æ—Å—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if len(sys.argv) > 1:
        try:
            telegram_id = int(sys.argv[1])
            debug_user_categories(telegram_id)
        except ValueError:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç telegram_id. –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    else:
        debug_user_categories()
