#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
"""

import logging
from services.ml_categorizer import TransactionCategorizer

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_categorization():
    """–¢–µ—Å—Ç—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—é"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä
    categorizer = TransactionCategorizer()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_categories = [
        {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'type': 'expense'},
        {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'type': 'expense'},
        {'id': 3, 'name': '–ñ–∏—Ç–ª–æ', 'type': 'expense'},
        {'id': 4, 'name': '–†–æ–∑–≤–∞–≥–∏', 'type': 'expense'},
        {'id': 5, 'name': '–¢–µ—Ö–Ω—ñ–∫–∞', 'type': 'expense'},
        {'id': 6, 'name': '–ö–∞—Ñ–µ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', 'type': 'expense'},
        {'id': 7, 'name': '–Ü–Ω—à–µ', 'type': 'expense'},
        {'id': 16, 'name': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'type': 'income'},
        {'id': 17, 'name': '–§—Ä—ñ–ª–∞–Ω—Å', 'type': 'income'},
        {'id': 23, 'name': '–Ü–Ω—à–µ', 'type': 'income'},
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    test_transactions = [
        {'description': 'Uklon', 'type': 'expense', 'amount': 105.0},
        {'description': 'Apple', 'type': 'expense', 'amount': 0.99},
        {'description': '–°—ñ–ª—å–ø–æ', 'type': 'expense', 'amount': 458.84},
        {'description': '–ê–¢–ë', 'type': 'expense', 'amount': 118.5},
        {'description': '–ù–æ–≤–∞ –ø–æ—à—Ç–∞', 'type': 'expense', 'amount': 65.0},
        {'description': 'Spotify', 'type': 'expense', 'amount': 2.49},
        {'description': '–§–û–ü –ú–µ–ª—å–Ω–∏–∫ –†–æ–º–∞–Ω –ê–Ω–¥—Ä–∏–π–æ–≤–∏—á', 'type': 'income', 'amount': 450.0},
        {'description': '–°—Ç–µ–ø–∞–Ω–æ–≤ –Ñ.', 'type': 'income', 'amount': 1005.03},
        {'description': '–ù–∞ –∫–∞—Ä—Ç–∫—É', 'type': 'income', 'amount': 200.0},
        {'description': '–°—ñ–º23', 'type': 'income', 'amount': 186.0},
    ]
    
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó\n")
    print("=" * 80)
    
    for i, trans in enumerate(test_transactions, 1):
        description = trans['description']
        trans_type = trans['type']
        amount = trans['amount']
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —Ç–∏–ø–æ–º
        type_categories = [cat for cat in user_categories if cat['type'] == trans_type]
        
        # –ü—Ä–æ–±—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—é
        suggested_category = categorizer.get_best_category_for_user(
            description=description,
            amount=amount,
            transaction_type=trans_type,
            user_categories=type_categories
        )
        
        if suggested_category:
            category_name = suggested_category['name']
            category_id = suggested_category['id']
            status = "‚úÖ"
        else:
            category_name = "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"
            category_id = "N/A"
            status = "‚ùå"
        
        print(f"{i:2d}. {status} {description:30s} | {trans_type:7s} | {category_name:15s} (ID: {category_id})")
    
    print("=" * 80)

if __name__ == "__main__":
    test_categorization()
