#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.session import init_db, Session
from database.models import User, Transaction, Category, Account
from database.db_operations import get_or_create_user, get_user_accounts, get_user_categories
from services.statement_parser import StatementParser
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def test_import_flow():
    """–¢–µ—Å—Ç—É—î–º–æ –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —ñ–º–ø–æ—Ä—Ç—É —è–∫ —É –±–æ—Ç—ñ"""
    try:
        init_db()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π ID –∑ –±–∞–∑–∏)
        test_user_id = 123456789  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π telegram_id
        user = get_or_create_user(test_user_id)
        print(f"User: {user.id}, telegram_id: {user.telegram_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        accounts = get_user_accounts(user.id)
        print(f"User accounts: {[acc.name for acc in accounts]}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        categories = get_user_categories(user.id)
        print(f"User categories: {[(cat.name, cat.type) for cat in categories]}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä—Å–µ—Ä –∑ —Ä–µ–∞–ª—å–Ω–∏–º PDF —Ñ–∞–π–ª–æ–º
        pdf_path = "report_20-06-2025_16-12-03.pdf"
        
        if not os.path.exists(pdf_path):
            print("‚ùå –ú–æ–Ω–æbank PDF —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
            return
        
        print(f"üìÑ –¢–µ—Å—Ç—É—î–º–æ –∑ —Ñ–∞–π–ª–æ–º: {pdf_path}")
        
        # –ü–∞—Ä—Å–∏–º–æ PDF
        parser = StatementParser()
        transactions = parser.parse_bank_statement(pdf_path, "monobank")
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
        for i, trans in enumerate(transactions[:3], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
            print(f"  {i}. Amount: {trans.get('amount')}, Description: {trans.get('description', '')[:50]}, Type: {trans.get('type')}")
        
        if not transactions:
            print("‚ùå –ñ–æ–¥–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–∏–º—É–ª—é—î–º–æ —ñ–º–ø–æ—Ä—Ç —è–∫ —É –±–æ—Ç—ñ
        session = Session()
        imported_count = 0
        
        print("\nüîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç...")
        
        for trans in transactions[:2]:  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 2 –¥–ª—è —Ç–µ—Å—Ç—É
            try:
                from database.models import TransactionType
                from datetime import datetime
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                amount = abs(float(trans.get('amount', 0)))
                description = trans.get('description', '').strip() or "–¢–µ—Å—Ç–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"
                trans_type = trans.get('type', 'expense')
                
                if amount == 0:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ –Ω—É–ª—å–æ–≤–æ—é —Å—É–º–æ—é: {description[:30]}")
                    continue
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                if isinstance(trans_type, str):
                    transaction_type = TransactionType.EXPENSE if trans_type == 'expense' else TransactionType.INCOME
                else:
                    transaction_type = trans_type
                
                print(f"  üí∞ –î–æ–¥–∞—î–º–æ: {amount} UAH, {description[:30]}, —Ç–∏–ø: {transaction_type}")
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç—É
                date = trans.get('date')
                if isinstance(date, str):
                    try:
                        from datetime import datetime
                        date = datetime.strptime(date, '%Y-%m-%d').date()
                    except:
                        date = datetime.now().date()
                elif not date:
                    date = datetime.now().date()
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                category_id = None
                if categories:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É
                    matching_categories = [cat for cat in categories if cat.type == transaction_type.value]
                    if matching_categories:
                        category_id = matching_categories[0].id
                        print(f"    üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {matching_categories[0].name}")
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–∞—Ö—É–Ω–æ–∫
                account_id = None
                if accounts:
                    account_id = accounts[0].id
                    print(f"    üè¶ –†–∞—Ö—É–Ω–æ–∫: {accounts[0].name}")
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                transaction = Transaction(
                    user_id=user.id,
                    amount=amount,
                    type=transaction_type,
                    description=description,
                    transaction_date=date,
                    category_id=category_id,
                    account_id=account_id,
                    created_at=datetime.now(),
                    source='import'
                )
                
                session.add(transaction)
                imported_count += 1
                print(f"    ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –¥–æ–¥–∞–Ω–∞ –¥–æ —Å–µ—Å—ñ—ó")
                
            except Exception as e:
                print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
                logger.exception("Transaction import error")
                continue
        
        # –ö–æ–º–º—ñ—Ç–∏–º–æ –∑–º—ñ–Ω–∏
        print(f"\nüíæ –ö–æ–º–º—ñ—Ç–∏–º–æ {imported_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
        session.commit()
        print("‚úÖ –ö–æ–º–º—ñ—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑'—è–≤–∏–ª–∏—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –±–∞–∑—ñ
        from database.db_operations import get_transactions
        all_transactions = get_transactions(user.id)
        print(f"üìä –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ: {len(all_transactions)}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        recent_transactions = all_transactions[-5:] if all_transactions else []
        print("\nüïê –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:")
        for trans in recent_transactions:
            print(f"  - {trans.amount} UAH, {trans.description[:30]}, {trans.transaction_date}")
        
        session.close()
        
    except Exception as e:
        print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.exception("General error")

if __name__ == "__main__":
    test_import_flow()
