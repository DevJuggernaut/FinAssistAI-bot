#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è PDF –∑–≤—ñ—Ç—É
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–µ—Å—å workflow PDF –∑–≤—ñ—Ç—É –∑ –Ω–æ–≤–∏–º–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from handlers.analytics_handler import create_pdf_report
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime, timedelta
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MockQuery:
    def __init__(self, user_id):
        self.from_user = Mock()
        self.from_user.id = user_id
        self.message = Mock()
        self.message.chat_id = 123456
        self.edit_message_text = AsyncMock()

class MockContext:
    def __init__(self):
        self.bot = Mock()
        self.bot.send_document = AsyncMock()
        self.bot.send_message = AsyncMock()

async def test_pdf_workflow():
    """–¢–µ—Å—Ç—É—î –ø–æ–≤–Ω–∏–π workflow PDF –∑–≤—ñ—Ç—É"""
    print("üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç PDF –∑–≤—ñ—Ç—É...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    init_db()
    
    db = SessionLocal()
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        test_user = User(
            telegram_id=999999,
            username="test_pdf_user",
            full_name="PDF Test User"
        )
        db.add(test_user)
        db.commit()
        db.refresh(test_user)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories = []
        cat_names = ["üõí –ü—Ä–æ–¥—É–∫—Ç–∏", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè† –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", "üëï –û–¥—è–≥", "üéØ –†–æ–∑–≤–∞–≥–∏"]
        for name in cat_names:
            cat = Category(name=name, user_id=test_user.id)
            db.add(cat)
            categories.append(cat)
        
        db.commit()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        now = datetime.now()
        transactions_data = [
            # –î–æ—Ö–æ–¥–∏
            (TransactionType.INCOME, 15000, "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", None),
            (TransactionType.INCOME, 3000, "üí∞ –ü—Ä–µ–º—ñ—è", None),
            
            # –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
            (TransactionType.EXPENSE, 4000, "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", categories[0]),
            (TransactionType.EXPENSE, 2500, "–ë–µ–Ω–∑–∏–Ω", categories[1]),
            (TransactionType.EXPENSE, 2000, "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è", categories[2]),
            (TransactionType.EXPENSE, 1500, "–û–¥—è–≥", categories[3]),
            (TransactionType.EXPENSE, 1000, "–ö—ñ–Ω–æ", categories[4]),
            (TransactionType.EXPENSE, 800, "–†–µ—Å—Ç–æ—Ä–∞–Ω", categories[4]),
            (TransactionType.EXPENSE, 700, "–¢–∞–∫—Å—ñ", categories[1]),
            (TransactionType.EXPENSE, 500, "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç", categories[2]),
        ]
        
        for i, (t_type, amount, desc, category) in enumerate(transactions_data):
            transaction = Transaction(
                user_id=test_user.id,
                type=t_type,
                amount=amount,
                description=desc,
                category_id=category.id if category else None,
                created_at=now - timedelta(days=i)
            )
            db.add(transaction)
        
        db.commit()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é PDF –∑–≤—ñ—Ç—É
        print("üìÑ –¢–µ—Å—Ç—É—î–º–æ generate_pdf_report...")
        
        mock_query = MockQuery(test_user.telegram_id)
        mock_context = MockContext()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é PDF
        await generate_pdf_report(mock_query, mock_context)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–ª–∏–∫–∏
        assert mock_query.edit_message_text.called, "edit_message_text –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π"
        assert mock_context.bot.send_document.called, "send_document –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π"
        assert mock_context.bot.send_message.called, "send_message –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π"
        
        print("‚úÖ generate_pdf_report –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç—É
        send_document_call = mock_context.bot.send_document.call_args
        assert send_document_call is not None, "send_document –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∏–∫–ª–∏–∫—É
        kwargs = send_document_call.kwargs if hasattr(send_document_call, 'kwargs') else send_document_call[1]
        assert 'chat_id' in kwargs, "chat_id –º–∞—î –±—É—Ç–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"
        assert 'document' in kwargs, "document –º–∞—î –±—É—Ç–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"
        assert 'filename' in kwargs, "filename –º–∞—î –±—É—Ç–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"
        assert 'caption' in kwargs, "caption –º–∞—î –±—É—Ç–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"
        
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç—É –∫–æ—Ä–µ–∫—Ç–Ω—ñ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ PDF
        send_message_call = mock_context.bot.send_message.call_args
        kwargs = send_message_call.kwargs if hasattr(send_message_call, 'kwargs') else send_message_call[1]
        
        if 'reply_markup' in kwargs:
            keyboard = kwargs['reply_markup']
            keyboard_text = str(keyboard)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∏–π –∑–≤—ñ—Ç"
            assert "–ù–æ–≤–∏–π –∑–≤—ñ—Ç" not in keyboard_text, "–ö–Ω–æ–ø–∫–∞ '–ù–æ–≤–∏–π –∑–≤—ñ—Ç' –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
            assert "–î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏" in keyboard_text, "–ö–Ω–æ–ø–∫–∞ '–î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏' –º–∞—î –±—É—Ç–∏"
            assert "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" in keyboard_text, "–ö–Ω–æ–ø–∫–∞ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' –º–∞—î –±—É—Ç–∏"
            
            print("‚úÖ –ú–µ–Ω—é –ø—ñ—Å–ª—è PDF –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏")
        
        # –¢–µ—Å—Ç—É—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ create_pdf_report
        print("üìä –¢–µ—Å—Ç—É—î–º–æ create_pdf_report...")
        
        from database.queries import get_user_transactions
        transactions = get_user_transactions(test_user.id, 
                                           start_date=now - timedelta(days=30), 
                                           end_date=now)
        
        stats = {
            'total_income': 18000,
            'total_expenses': 13000,
            'balance': 5000,
            'category_expenses': {
                'üõí –ü—Ä–æ–¥—É–∫—Ç–∏': 4000,
                'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 3200,
                'üè† –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ': 2500,
                'üëï –û–¥—è–≥': 1500,
                'üéØ –†–æ–∑–≤–∞–≥–∏': 1800
            },
            'period': '30 –¥–Ω—ñ–≤'
        }
        
        pdf_buffer = create_pdf_report(test_user, transactions, stats)
        
        assert pdf_buffer is not None, "PDF buffer –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ None"
        
        pdf_content = pdf_buffer.read()
        assert len(pdf_content) > 1000, f"PDF –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π: {len(pdf_content)} –±–∞–π—Ç"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫
        pdf_buffer.seek(0)
        header = pdf_buffer.read(10)
        assert header.startswith(b'%PDF'), "–§–∞–π–ª –º–∞—î –±—É—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ PDF"
        
        print(f"‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –†–æ–∑–º—ñ—Ä: {len(pdf_content):,} –±–∞–π—Ç")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç —è–∫ —Ç–µ–∫—Å—Ç (–¥–ª—è fallback –≤–∏–ø–∞–¥–∫—É)
        pdf_buffer.seek(0)
        try:
            content_text = pdf_buffer.read().decode('utf-8', errors='ignore')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–ª–æ–≤–∞
            ukrainian_words = [
                '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π', '—Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π', '–∑–≤—ñ—Ç', '–¥–æ—Ö–æ–¥–∏', '–≤–∏—Ç—Ä–∞—Ç–∏',
                '–∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó', '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è', '–∞–Ω–∞–ª—ñ–∑'
            ]
            
            found_words = sum(1 for word in ukrainian_words if word.lower() in content_text.lower())
            
            if found_words >= 5:
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤: {found_words}/{len(ukrainian_words)}")
            else:
                print(f"‚ö†Ô∏è –ú–∞–ª–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤: {found_words}/{len(ukrainian_words)}")
                
        except Exception as e:
            print(f"‚ÑπÔ∏è PDF –≤ –±—ñ–Ω–∞—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {e}")
        
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ PDF workflow –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        
        return True
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {str(e)}")
        return False
        
    finally:
        # –û—á–∏—â–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        try:
            db.query(Transaction).filter(Transaction.user_id == test_user.id).delete()
            db.query(Category).filter(Category.user_id == test_user.id).delete()
            db.query(User).filter(User.telegram_id == 999999).delete()
            db.commit()
            print("üßπ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
        except:
            pass
        finally:
            db.close()

if __name__ == "__main__":
    success = asyncio.run(test_pdf_workflow())
    if success:
        print("\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ PDF workflow –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("\nüìã –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:")
        print("‚Ä¢ ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF –∑–≤—ñ—Ç—É")
        print("‚Ä¢ ‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–∏–π –∑–≤—ñ—Ç'")
        print("‚Ä¢ ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è PDF")
        print("‚Ä¢ ‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–∏—Ä–∏–ª–∏—Ü—ñ")
        print("‚Ä¢ ‚úÖ –°—É—á–∞—Å–Ω–∏–π –¥–∏–∑–∞–π–Ω PDF")
        print("‚Ä¢ ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")
    else:
        print("\n‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Ç–µ—Å—Ç–∞—Ö")
        sys.exit(1)
