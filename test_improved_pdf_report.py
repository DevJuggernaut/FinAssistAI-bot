#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Å—É—á–∞—Å–Ω–æ–≥–æ PDF –∑–≤—ñ—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ
"""

import asyncio
import logging
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime, timedelta

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_pdf_report_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –∑–≤—ñ—Ç—É"""
    try:
        print("=== –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –∑–≤—ñ—Ç—É ===")
        
        from handlers.analytics_handler import generate_pdf_report, create_pdf_report
        from database.models import TransactionType
        
        # –ú–æ–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        mock_user = Mock()
        mock_user.id = 12345
        mock_user.username = "test_user"
        mock_user.telegram_id = 12345
        
        # –ú–æ–∫–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        mock_transactions = []
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        test_stats = {
            'total_income': 15000.0,
            'total_expenses': 12000.0,
            'balance': 3000.0,
            'category_expenses': {
                '–á–∂–∞ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏': 4000.0,
                '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 2500.0,
                '–ü–æ–∫—É–ø–∫–∏': 2000.0,
                '–ñ–∏—Ç–ª–æ —Ç–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ': 3000.0,
                '–†–æ–∑–≤–∞–≥–∏': 500.0
            },
            'period': '30 –¥–Ω—ñ–≤'
        }
        
        print("üìä –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:")
        print(f"   –î–æ—Ö–æ–¥–∏: {test_stats['total_income']:,.0f} –≥—Ä–Ω")
        print(f"   –í–∏—Ç—Ä–∞—Ç–∏: {test_stats['total_expenses']:,.0f} –≥—Ä–Ω") 
        print(f"   –ë–∞–ª–∞–Ω—Å: {test_stats['balance']:,.0f} –≥—Ä–Ω")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(test_stats['category_expenses'])}")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF
        print("\nüìÑ –°—Ç–≤–æ—Ä—é—î–º–æ PDF –∑–≤—ñ—Ç...")
        pdf_buffer = create_pdf_report(mock_user, mock_transactions, test_stats)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—É—Ñ–µ—Ä –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
        assert pdf_buffer is not None, "PDF –±—É—Ñ–µ—Ä –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ None"
        
        pdf_size = len(pdf_buffer.getvalue())
        print(f"‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –†–æ–∑–º—ñ—Ä: {pdf_size:,} –±–∞–π—Ç")
        
        # –Ø–∫—â–æ PDF –º–∞–ª–∏–π, —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π fallback
        if pdf_size < 1000:
            print("üìù –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç (fallback)")
        else:
            print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π PDF")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –º–æ–∂–Ω–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É
        pdf_buffer.seek(0)
        first_bytes = pdf_buffer.read(10)
        pdf_buffer.seek(0)
        
        if first_bytes.startswith(b'%PDF'):
            print("‚úÖ –§–∞–π–ª –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        else:
            print("üìù –§–∞–π–ª —î —Ç–µ–∫—Å—Ç–æ–≤–∏–º (fallback —Ä–µ–∂–∏–º)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_pdf_report_workflow():
    """–¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ workflow PDF –∑–≤—ñ—Ç—É"""
    try:
        print("\n=== –¢–µ—Å—Ç workflow PDF –∑–≤—ñ—Ç—É ===")
        
        from handlers.analytics_handler import generate_pdf_report
        
        # –ú–æ–∫–∞—î–º–æ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
        with patch('handlers.analytics_handler.get_user') as mock_get_user, \
             patch('handlers.analytics_handler.get_user_transactions') as mock_get_transactions, \
             patch('handlers.analytics_handler.create_pdf_report') as mock_create_pdf:
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫–∏
            mock_user = Mock()
            mock_user.id = 12345
            mock_user.username = "test_user"
            mock_user.telegram_id = 12345
            mock_get_user.return_value = mock_user
            
            mock_get_transactions.return_value = []
            
            # –ú–æ–∫ –¥–ª—è PDF
            import io
            mock_pdf_buffer = io.BytesIO(b'%PDF-test-content')
            mock_create_pdf.return_value = mock_pdf_buffer
            
            # –ú–æ–∫–∞—î–º–æ query —Ç–∞ context
            query = Mock()
            query.from_user = Mock()
            query.from_user.id = 12345
            query.edit_message_text = AsyncMock()
            query.message = Mock()
            query.message.chat_id = 12345
            
            context = Mock()
            context.bot = Mock()
            context.bot.send_document = AsyncMock()
            context.bot.send_message = AsyncMock()
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
            await generate_pdf_report(query, context)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–ª–∏–∫–∏
            query.edit_message_text.assert_called()
            context.bot.send_document.assert_called_once()
            context.bot.send_message.assert_called_once()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ send_document
            send_doc_call = context.bot.send_document.call_args
            assert send_doc_call is not None, "send_document –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ send_message (–º–µ–Ω—é –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏)
            send_msg_call = context.bot.send_message.call_args
            assert send_msg_call is not None, "send_message –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤ –º–µ–Ω—é –Ω–µ–º–∞—î –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∏–π –∑–≤—ñ—Ç"
            reply_markup = send_msg_call.kwargs.get('reply_markup')
            if reply_markup:
                keyboard_text = str(reply_markup.inline_keyboard)
                assert "–ù–æ–≤–∏–π –∑–≤—ñ—Ç" not in keyboard_text, "–ö–Ω–æ–ø–∫–∞ '–ù–æ–≤–∏–π –∑–≤—ñ—Ç' –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤ –º–µ–Ω—é"
                assert "–î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏" in keyboard_text, "–ö–Ω–æ–ø–∫–∞ '–î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏' –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤ –º–µ–Ω—é"
                print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–æ–≤–∏–π –∑–≤—ñ—Ç' –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –º–µ–Ω—é")
            
            print("‚úÖ Workflow PDF –∑–≤—ñ—Ç—É –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ workflow: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_cyrillic_support():
    """–¢–µ—Å—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—ñ –≤ –∑–≤—ñ—Ç—ñ"""
    try:
        print("\n=== –¢–µ—Å—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—ñ ===")
        
        from handlers.analytics_handler import create_simple_text_report
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –¥–∞–Ω–∏–º–∏
        mock_user = Mock()
        mock_user.username = "—Ç–µ—Å—Ç_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        mock_user.telegram_id = 12345
        
        test_stats = {
            'total_income': 25000.0,
            'total_expenses': 18000.0,
            'balance': 7000.0,
            'category_expenses': {
                '–á–∂–∞ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏': 6000.0,
                '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —ñ –ø–∞–ª–∏–≤–æ': 4000.0,
                '–ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è': 3500.0,
                '–ñ–∏—Ç–ª–æ —Ç–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏': 3000.0,
                '–î–æ–∑–≤—ñ–ª–ª—è —Ç–∞ —Ä–æ–∑–≤–∞–≥–∏': 1500.0
            },
            'period': '30 –¥–Ω—ñ–≤'
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
        text_buffer = create_simple_text_report(mock_user, [], test_stats)
        
        # –ß–∏—Ç–∞—î–º–æ –≤–º—ñ—Å—Ç
        text_buffer.seek(0)
        content = text_buffer.read().decode('utf-8')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        ukrainian_words = [
            '–ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–ô', '–§–Ü–ù–ê–ù–°–û–í–ò–ô', '–ó–í–Ü–¢',
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', '–ø–µ—Ä—ñ–æ–¥', '—Å—Ç–≤–æ—Ä–µ–Ω–æ',
            '–¥–æ—Ö–æ–¥–∏', '–≤–∏—Ç—Ä–∞—Ç–∏', '–∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è',
            '–á–∂–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ñ–∏—Ç–ª–æ'
        ]
        
        found_words = []
        for word in ukrainian_words:
            if word in content:
                found_words.append(word)
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤: {len(found_words)}/{len(ukrainian_words)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–≤—ñ—Ç—É
        sections = [
            '–§–Ü–ù–ê–ù–°–û–í–ò–ô –ü–Ü–î–°–£–ú–û–ö',
            '–ê–ù–ê–õ–Ü–ó –ó–ê–û–©–ê–î–ñ–ï–ù–¨', 
            '–°–¢–†–£–ö–¢–£–†–ê –í–ò–¢–†–ê–¢',
            '–ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á'
        ]
        
        found_sections = []
        for section in sections:
            if section in content:
                found_sections.append(section)
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤: {len(found_sections)}/{len(sections)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∑–≤—ñ—Ç—É
        lines = content.split('\n')
        print(f"‚úÖ –ó–≤—ñ—Ç –º—ñ—Å—Ç–∏—Ç—å {len(lines)} —Ä—è–¥–∫—ñ–≤")
        
        assert len(found_words) >= len(ukrainian_words) * 0.8, "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤ —É –∑–≤—ñ—Ç—ñ"
        assert len(found_sections) >= len(sections) * 0.8, "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤ —É –∑–≤—ñ—Ç—ñ"
        
        print("‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–∏—Ä–∏–ª–∏—Ü—ñ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –∫–∏—Ä–∏–ª–∏—Ü—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –Ω–æ–≤–æ–≥–æ PDF –∑–≤—ñ—Ç—É...")
    
    test1 = await test_pdf_report_generation()
    test2 = await test_pdf_report_workflow()
    test3 = await test_cyrillic_support()
    
    if test1 and test2 and test3:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("\nüìã –ó–º—ñ–Ω–∏ –≤ PDF –∑–≤—ñ—Ç—ñ:")
        print("‚Ä¢ ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–∏–π –∑–≤—ñ—Ç'")
        print("‚Ä¢ ‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–æ –¥–∏–∑–∞–π–Ω PDF")
        print("‚Ä¢ ‚úÖ –î–æ–¥–∞–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∫–∏—Ä–∏–ª–∏—Ü—ñ")
        print("‚Ä¢ ‚úÖ –°—É—á–∞—Å–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ —Å—Ç–∏–ª—ñ")
        print("‚Ä¢ ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")
        print("‚Ä¢ ‚úÖ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
        
    else:
        print("\n‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏!")

if __name__ == "__main__":
    asyncio.run(main())
