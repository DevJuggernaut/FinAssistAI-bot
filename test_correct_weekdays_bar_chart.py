#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from collections import defaultdict

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def create_test_transactions():
    """–°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 7 –¥–Ω—ñ–≤"""
    
    class MockTransaction:
        def __init__(self, amount, transaction_type, date):
            self.amount = amount
            self.type = transaction_type
            self.transaction_date = date
    
    class TransactionType:
        INCOME = "income"
        EXPENSE = "expense"
    
    now = datetime.now()
    transactions = []
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 7 –¥–Ω—ñ–≤
    for i in range(7):
        date = now - timedelta(days=i)
        
        # –í–∏—Ç—Ä–∞—Ç–∏ (—â–æ–¥–Ω—è)
        expense_amount = 300 + (i * 100)  # –≤—ñ–¥ 300 –¥–æ 900
        expense = MockTransaction(-expense_amount, TransactionType.EXPENSE, date)
        transactions.append(expense)
        
        # –î–æ—Ö–æ–¥–∏ (—á–µ—Ä–µ–∑ –¥–µ–Ω—å)
        if i % 2 == 0:
            income_amount = 1500 + (i * 200)
            income = MockTransaction(income_amount, TransactionType.INCOME, date)
            transactions.append(income)
    
    return transactions, TransactionType

def test_bar_chart_correct_weekdays():
    """–¢–µ—Å—Ç—É—î–º–æ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è"""
    print("üìä –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è...")
    
    transactions, TransactionType = create_test_transactions()
    now = datetime.now()
    
    print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ {len(transactions)} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
    print(f"–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞: {now.strftime('%Y-%m-%d %A')} (–≤—ñ–≤—Ç–æ—Ä–æ–∫)")
    
    # –õ–æ–≥—ñ–∫–∞ –∑ create_bar_chart –¥–ª—è comparison
    income_data = defaultdict(float)
    expense_data = defaultdict(float)
    weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
    
    for transaction in transactions:
        # –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ - —Ç—ñ–ª—å–∫–∏ –¥–µ–Ω—å —Ç–∏–∂–Ω—è + –¥–∞—Ç–∞
        weekday_name = weekdays[transaction.transaction_date.weekday()]
        key = f"{weekday_name} ({transaction.transaction_date.strftime('%d.%m')})"
        
        if transaction.type == TransactionType.INCOME:
            income_data[key] += transaction.amount
        else:
            expense_data[key] += abs(transaction.amount)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 7 –¥–Ω—ñ–≤ (–Ω–æ–≤–∞ –ª–æ–≥—ñ–∫–∞)
    all_keys = []
    
    for i in range(6, -1, -1):  # –≤—ñ–¥ 6 –¥–Ω—ñ–≤ —Ç–æ–º—É –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ
        date = now - timedelta(days=i)
        weekday_name = weekdays[date.weekday()]
        key = f"{weekday_name} ({date.strftime('%d.%m')})"
        all_keys.append(key)
    
    print("\nüìÖ –ö–ª—é—á—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è (–≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—à–æ–≥–æ –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ):")
    for i, key in enumerate(all_keys, 1):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å
        date = now - timedelta(days=7-i)
        real_weekday = date.strftime('%A')
        weekday_mapping = {
            'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä',
            'Thursday': '–ß—Ç', 'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–ù–¥'
        }
        expected = weekday_mapping[real_weekday]
        is_correct = key.startswith(expected)
        status = "‚úÖ" if is_correct else "‚ùå"
        
        print(f"  {i}. {key} {status}")
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∫–ª—é—á—ñ, –¥–µ —î –¥–∞–Ω—ñ
    filtered_keys = [key for key in all_keys if income_data[key] > 0 or expense_data[key] > 0]
    if not filtered_keys:
        filtered_keys = all_keys
    
    incomes = [income_data.get(key, 0) for key in filtered_keys]
    expenses = [expense_data.get(key, 0) for key in filtered_keys]
    
    print("\nüí∞ –î–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É:")
    for i, key in enumerate(filtered_keys):
        print(f"  {key}: –î–æ—Ö–æ–¥–∏ {incomes[i]:,.0f} –≥—Ä–Ω, –í–∏—Ç—Ä–∞—Ç–∏ {expenses[i]:,.0f} –≥—Ä–Ω")
    
    return filtered_keys, incomes, expenses

def create_test_bar_chart(keys, incomes, expenses):
    """–°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø—ñ–¥–ø–∏—Å–∞–º–∏"""
    print("\nüìà –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è...")
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à—Ä–∏—Ñ—Ç–∏
    plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial', 'sans-serif']
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
    fig, ax = plt.subplots(figsize=(14, 10), facecolor='white')
    
    x = range(len(keys))
    width = 0.35
    
    # –ö–æ–ª—å–æ—Ä–∏
    income_color = '#4ECDC4'
    expense_color = '#FF6B8A'
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ
    bars1 = ax.bar([i - width/2 for i in x], incomes, width, 
                  label='üí∞ –î–æ—Ö–æ–¥–∏', color=income_color, 
                  edgecolor='white', linewidth=2, alpha=0.9)
    bars2 = ax.bar([i + width/2 for i in x], expenses, width, 
                  label='üí∏ –í–∏—Ç—Ä–∞—Ç–∏', color=expense_color, 
                  edgecolor='white', linewidth=2, alpha=0.9)
    
    # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ
    max_value = max(max(incomes) if incomes else [0], max(expenses) if expenses else [0])
    
    for bar, amount in zip(bars1, incomes):
        if amount > 0:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + max_value*0.01,
                   f'{amount:,.0f}', ha='center', va='bottom', 
                   fontweight='bold', fontsize=16, color='#2C3E50')
    
    for bar, amount in zip(bars2, expenses):
        if amount > 0:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + max_value*0.01,
                   f'{amount:,.0f}', ha='center', va='bottom', 
                   fontweight='bold', fontsize=16, color='#2C3E50')
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Å—ñ
    ax.set_xlabel('–î–Ω—ñ —Ç–∏–∂–Ω—è', fontsize=24, fontweight='bold', color='#2C3E50')
    ax.set_ylabel('–°—É–º–∞ (–≥—Ä–Ω)', fontsize=24, fontweight='bold', color='#2C3E50')
    ax.set_title('üìä –î–æ—Ö–æ–¥–∏ vs –í–∏—Ç—Ä–∞—Ç–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤ - –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–Ω—ñ —Ç–∏–∂–Ω—è)', 
                fontsize=24, fontweight='bold', pad=30, color='#2C3E50')
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º—ñ—Ç–∫–∏ –æ—Å–µ–π
    ax.set_xticks(x)
    ax.set_xticklabels(keys, fontsize=16, rotation=45, ha='right')
    ax.tick_params(axis='y', labelsize=18)
    
    # –õ–µ–≥–µ–Ω–¥–∞
    ax.legend(fontsize=20, loc='upper left', frameon=True, 
             fancybox=True, shadow=True, framealpha=0.9)
    
    # –°—ñ—Ç–∫–∞
    ax.grid(True, alpha=0.3, axis='y', linestyle='--', linewidth=1)
    ax.set_axisbelow(True)
    
    # –ú–µ–∂—ñ –æ—Å–µ–π
    if max_value > 0:
        ax.set_ylim(0, max_value * 1.15)
    
    plt.tight_layout()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
    filename = f"test_correct_weekdays_bar_chart_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    plt.savefig(filename, format='png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none', pad_inches=0.3)
    plt.close()
    
    print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {filename}")
    return filename

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è")
    print("=" * 70)
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–∫—É —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
        keys, incomes, expenses = test_bar_chart_correct_weekdays()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫
        filename = create_test_bar_chart(keys, incomes, expenses)
        
        print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        print("  ‚úÖ –î–Ω—ñ —Ç–∏–∂–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("  ‚úÖ –í—ñ–≤—Ç–æ—Ä–æ–∫ 24.06 –ø–æ–∑–Ω–∞—á–µ–Ω–∏–π —è–∫ '–í—Ç (24.06)'")
        print("  ‚úÖ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ 23.06 –ø–æ–∑–Ω–∞—á–µ–Ω–∏–π —è–∫ '–ü–Ω (23.06)'")
        print("  ‚úÖ –í—Å—ñ —ñ–Ω—à—ñ –¥–Ω—ñ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è")
        print("  ‚úÖ –ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—à–æ–≥–æ –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ –¥–Ω—è")
        print(f"  üìä –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ–∞–π–ª: {filename}")
        
        print("\nüí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≥—Ä–∞—Ñ—ñ–∫:")
        print("  1. –°—å–æ–≥–æ–¥–Ω—ñ (–≤—ñ–≤—Ç–æ—Ä–æ–∫) –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ '–í—Ç (24.06)'")
        print("  2. –í—Å—ñ –¥–Ω—ñ —Ç–∏–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ä–µ–∞–ª—å–Ω–∏–º")
        print("  3. –ù–µ–º–∞—î –ø–æ–º–∏–ª–∫–æ–≤–∏—Ö –ø–æ–∑–Ω–∞—á–µ–Ω—å")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
