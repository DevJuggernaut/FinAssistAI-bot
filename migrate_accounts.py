#!/usr/bin/env python3
"""
–ú—ñ–≥—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ä–∞—Ö—É–Ω–∫—ñ–≤.
–î–æ–¥–∞—î:
1. –¢–∞–±–ª–∏—Ü—é accounts
2. –ü–æ–ª–µ account_id –¥–æ —Ç–∞–±–ª–∏—Ü—ñ transactions
3. –°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models import Base, engine, Session, User, Account, Transaction, TransactionType, AccountType
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run_migration():
    """–í–∏–∫–æ–Ω—É—î –º—ñ–≥—Ä–∞—Ü—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    try:
        # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
        logger.info("üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å...")
        Base.metadata.create_all(engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # 2. –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        logger.info("üë• –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
        session = Session()
        
        try:
            users = session.query(User).filter(User.is_setup_completed == True).all()
            created_accounts = 0
            
            for user in users:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î —Ä–∞—Ö—É–Ω–æ–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                existing_account = session.query(Account).filter(Account.user_id == user.id).first()
                
                if not existing_account:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º
                    account = Account(
                        user_id=user.id,
                        name="–ì–æ–ª–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
                        account_type=AccountType.CASH,
                        balance=user.initial_balance or 0.0,
                        currency=user.currency or 'UAH',
                        is_main=True,
                        icon='üí∞',
                        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó",
                        created_at=user.created_at or datetime.utcnow()
                    )
                    session.add(account)
                    created_accounts += 1
                    
                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.telegram_id}")
            
            session.commit()
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {created_accounts} –≥–æ–ª–æ–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤")
            
            # 3. –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –ø—Ä–∏–≤'—è–∑—É—é—á–∏ —ó—Ö –¥–æ –≥–æ–ª–æ–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
            logger.info("üîó –ü—Ä–∏–≤'—è–∑–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤...")
            updated_transactions = 0
            
            for user in users:
                main_account = session.query(Account).filter(
                    Account.user_id == user.id,
                    Account.is_main == True
                ).first()
                
                if main_account:
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –±–µ–∑ account_id
                    transactions = session.query(Transaction).filter(
                        Transaction.user_id == user.id,
                        Transaction.account_id == None
                    ).all()
                    
                    for transaction in transactions:
                        transaction.account_id = main_account.id
                        updated_transactions += 1
            
            session.commit()
            logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {updated_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
            
        finally:
            session.close()
        
        logger.info("üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó: {str(e)}")
        return False

def verify_migration():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ–≥—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ"""
    logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
    
    session = Session()
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ä–∞—Ö—É–Ω–∫—ñ–≤
        users_count = session.query(User).filter(User.is_setup_completed == True).count()
        accounts_count = session.query(Account).count()
        main_accounts_count = session.query(Account).filter(Account.is_main == True).count()
        
        logger.info(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º: {users_count}")
        logger.info(f"üìä –í—Å—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤: {accounts_count}")
        logger.info(f"üìä –ì–æ–ª–æ–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤: {main_accounts_count}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏
        transactions_with_accounts = session.query(Transaction).filter(Transaction.account_id != None).count()
        total_transactions = session.query(Transaction).count()
        
        logger.info(f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏: {transactions_with_accounts}")
        logger.info(f"üìä –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {total_transactions}")
        
        if users_count == main_accounts_count:
            logger.info("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –º—ñ–≥—Ä–∞—Ü—ñ—î—é")
            return False
            
    finally:
        session.close()

if __name__ == "__main__":
    print("üè¶ –ú—ñ–≥—Ä–∞—Ü—ñ—è FinAssist: –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ä–∞—Ö—É–Ω–∫—ñ–≤")
    print("=" * 50)
    
    success = run_migration()
    if success:
        verify_migration()
        print("\nüéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏.")
    else:
        print("\n‚ùå –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.")
        sys.exit(1)
