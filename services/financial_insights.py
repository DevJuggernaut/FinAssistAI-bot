"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.
–í–∫–ª—é—á–∞—î –∞–Ω–∞–ª—ñ–∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è, —Ü—ñ–ª—ñ —Ç–∞ –ø–æ—Ä–∞–¥–∏.
"""

import numpy as np
from datetime import datetime, timedelta, date
from typing import List, Dict, Tuple, Optional
import logging
import calendar
from collections import defaultdict, Counter

logger = logging.getLogger(__name__)

class FinancialInsightsEngine:
    """–î–≤–∏–≥—É–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤"""
    
    def __init__(self):
        # –ï—Ç–∞–ª–æ–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        self.benchmarks = {
            "savings_rate": {
                "excellent": 0.20,  # 20%+
                "good": 0.15,       # 15-20%
                "average": 0.10,    # 10-15%
                "poor": 0.05        # 5-10%
            },
            "emergency_fund_months": {
                "excellent": 6,
                "good": 4,
                "average": 3,
                "poor": 1
            }
        }
    
    def generate_financial_health_score(self, user_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä—É—î –æ—Ü—ñ–Ω–∫—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            score_components = {}
            total_score = 0
            max_score = 0
            
            # 1. –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–æ—â–∞–¥–∂–µ–Ω—å (30% –≤–∞–≥–∏)
            savings_score = self._calculate_savings_score(user_data)
            score_components["savings"] = savings_score
            total_score += savings_score["score"] * 0.30
            max_score += 100 * 0.30
            
            # 2. –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç (25% –≤–∞–≥–∏)
            stability_score = self._calculate_spending_stability(user_data)
            score_components["stability"] = stability_score
            total_score += stability_score["score"] * 0.25
            max_score += 100 * 0.25
            
            # 3. –î–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É (25% –≤–∞–≥–∏)
            budget_score = self._calculate_budget_adherence(user_data)
            score_components["budget"] = budget_score
            total_score += budget_score["score"] * 0.25
            max_score += 100 * 0.25
            
            # 4. –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –¥–æ—Ö–æ–¥—ñ–≤ (20% –≤–∞–≥–∏)
            income_score = self._calculate_income_diversity(user_data)
            score_components["income"] = income_score
            total_score += income_score["score"] * 0.20
            max_score += 100 * 0.20
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
            final_score = (total_score / max_score) * 100 if max_score > 0 else 0
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å
            if final_score >= 80:
                health_level = "–í—ñ–¥–º—ñ–Ω–Ω–∏–π"
                emoji = "üü¢"
            elif final_score >= 60:
                health_level = "–•–æ—Ä–æ—à–∏–π"
                emoji = "üü°"
            elif final_score >= 40:
                health_level = "–°–µ—Ä–µ–¥–Ω—ñ–π"
                emoji = "üü†"
            else:
                health_level = "–ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
                emoji = "üî¥"
            
            return {
                "overall_score": final_score,
                "health_level": health_level,
                "emoji": emoji,
                "components": score_components,
                "recommendations": self._generate_health_recommendations(score_components)
            }
            
        except Exception as e:
            logger.error(f"Error generating financial health score: {e}")
            return {"error": "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è"}
    
    def _calculate_savings_score(self, user_data: Dict) -> Dict:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –æ—Ü—ñ–Ω–∫—É –∑–∞–æ—â–∞–¥–∂–µ–Ω—å"""
        try:
            total_income = user_data.get("total_income", 0)
            total_expenses = user_data.get("total_expenses", 0)
            
            if total_income <= 0:
                return {"score": 0, "description": "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –¥–æ—Ö–æ–¥–∏"}
            
            savings_rate = (total_income - total_expenses) / total_income
            
            if savings_rate >= self.benchmarks["savings_rate"]["excellent"]:
                score = 100
                description = f"–í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∏ –∑–∞–æ—â–∞–¥–∂—É—î—Ç–µ {savings_rate*100:.1f}% –¥–æ—Ö–æ–¥—ñ–≤"
            elif savings_rate >= self.benchmarks["savings_rate"]["good"]:
                score = 80
                description = f"–î–æ–±—Ä–µ! –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è {savings_rate*100:.1f}% –¥–æ—Ö–æ–¥—ñ–≤"
            elif savings_rate >= self.benchmarks["savings_rate"]["average"]:
                score = 60
                description = f"–°–µ—Ä–µ–¥–Ω—å–æ. –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è {savings_rate*100:.1f}% –¥–æ—Ö–æ–¥—ñ–≤"
            elif savings_rate >= self.benchmarks["savings_rate"]["poor"]:
                score = 40
                description = f"–ù–∏–∑—å–∫–æ. –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –ª–∏—à–µ {savings_rate*100:.1f}% –¥–æ—Ö–æ–¥—ñ–≤"
            else:
                score = 20
                description = "–í–∏—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –¥–æ—Ö–æ–¥–∏"
            
            return {
                "score": score,
                "savings_rate": savings_rate,
                "description": description
            }
            
        except Exception as e:
            logger.error(f"Error calculating savings score: {e}")
            return {"score": 0, "description": "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É"}
    
    def _calculate_spending_stability(self, user_data: Dict) -> Dict:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç"""
        try:
            daily_expenses = user_data.get("daily_expenses", [])
            
            if len(daily_expenses) < 7:
                return {"score": 50, "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ"}
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ—ó
            expenses_array = np.array(daily_expenses)
            mean_expense = np.mean(expenses_array)
            std_expense = np.std(expenses_array)
            
            if mean_expense == 0:
                cv = 0
            else:
                cv = std_expense / mean_expense
            
            # –û—Ü—ñ–Ω—é—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
            if cv <= 0.3:
                score = 100
                description = "–î—É–∂–µ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"
            elif cv <= 0.5:
                score = 80
                description = "–°—Ç–∞–±—ñ–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"
            elif cv <= 0.8:
                score = 60
                description = "–ü–æ–º—ñ—Ä–Ω–æ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"
            elif cv <= 1.2:
                score = 40
                description = "–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"
            else:
                score = 20
                description = "–î—É–∂–µ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"
            
            return {
                "score": score,
                "coefficient_of_variation": cv,
                "description": description
            }
            
        except Exception as e:
            logger.error(f"Error calculating spending stability: {e}")
            return {"score": 50, "description": "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ"}
    
    def _calculate_budget_adherence(self, user_data: Dict) -> Dict:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
        try:
            monthly_budget = user_data.get("monthly_budget")
            total_expenses = user_data.get("total_expenses", 0)
            
            if not monthly_budget or monthly_budget <= 0:
                return {"score": 50, "description": "–ë—é–¥–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}
            
            budget_usage = total_expenses / monthly_budget
            
            if budget_usage <= 0.8:
                score = 100
                description = f"–í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {budget_usage*100:.1f}% –±—é–¥–∂–µ—Ç—É"
            elif budget_usage <= 0.95:
                score = 80
                description = f"–î–æ–±—Ä–µ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {budget_usage*100:.1f}% –±—é–¥–∂–µ—Ç—É"
            elif budget_usage <= 1.0:
                score = 60
                description = f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {budget_usage*100:.1f}% –±—é–¥–∂–µ—Ç—É"
            elif budget_usage <= 1.1:
                score = 40
                description = f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –±—é–¥–∂–µ—Ç –Ω–∞ {(budget_usage-1)*100:.1f}%"
            else:
                score = 20
                description = f"–ó–Ω–∞—á–Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –Ω–∞ {(budget_usage-1)*100:.1f}%"
            
            return {
                "score": score,
                "budget_usage": budget_usage,
                "description": description
            }
            
        except Exception as e:
            logger.error(f"Error calculating budget adherence: {e}")
            return {"score": 50, "description": "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"}
    
    def _calculate_income_diversity(self, user_data: Dict) -> Dict:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª –¥–æ—Ö–æ–¥—É"""
        try:
            income_sources = user_data.get("income_sources", [])
            
            if not income_sources:
                return {"score": 30, "description": "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–æ—Ö–æ–¥—É"}
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            unique_sources = len(set(income_sources))
            
            if unique_sources >= 3:
                score = 100
                description = f"–í—ñ–¥–º—ñ–Ω–Ω–æ! {unique_sources} –¥–∂–µ—Ä–µ–ª –¥–æ—Ö–æ–¥—É"
            elif unique_sources == 2:
                score = 70
                description = "–î–æ–±—Ä–µ! –î–≤–∞ –¥–∂–µ—Ä–µ–ª–∞ –¥–æ—Ö–æ–¥—É"
            else:
                score = 40
                description = "–û–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –¥–æ—Ö–æ–¥—É - —Ä–∏–∑–∏–∫–æ–≤–∞–Ω–æ"
            
            return {
                "score": score,
                "unique_sources": unique_sources,
                "description": description
            }
            
        except Exception as e:
            logger.error(f"Error calculating income diversity: {e}")
            return {"score": 30, "description": "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ –¥–æ—Ö–æ–¥—ñ–≤"}
    
    def _generate_health_recommendations(self, components: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ü—ñ–Ω–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è—Ö
        savings = components.get("savings", {})
        if savings.get("score", 0) < 60:
            recommendations.append("üí∞ –°–ø—Ä–æ–±—É–π—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –¥–æ 15% –≤—ñ–¥ –¥–æ—Ö–æ–¥—ñ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        stability = components.get("stability", {})
        if stability.get("score", 0) < 60:
            recommendations.append("üìä –ü–ª–∞–Ω—É–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –¥–ª—è –±—ñ–ª—å—à–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É
        budget = components.get("budget", {})
        if budget.get("score", 0) < 60:
            recommendations.append("üéØ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π –±—é–¥–∂–µ—Ç —Ç–∞ –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –π–æ–≥–æ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –¥–æ—Ö–æ–¥–∞—Ö
        income = components.get("income", {})
        if income.get("score", 0) < 60:
            recommendations.append("üíº –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∂–µ—Ä–µ–ª –¥–æ—Ö–æ–¥—É")
        
        return recommendations
    
    def generate_spending_insights(self, transactions: List[Dict], period_days: int = 30) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏"""
        try:
            insights = []
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            now = datetime.now()
            start_date = now - timedelta(days=period_days)
            
            recent_transactions = [
                t for t in transactions 
                if t['transaction_date'] >= start_date and t['type'] == 'expense'
            ]
            
            if not recent_transactions:
                return ["–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"]
            
            # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            category_analysis = self._analyze_categories(recent_transactions)
            insights.extend(category_analysis)
            
            # –ê–Ω–∞–ª—ñ–∑ —á–∞—Å–æ–≤–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
            time_analysis = self._analyze_time_patterns(recent_transactions)
            insights.extend(time_analysis)
            
            # –ê–Ω–∞–ª—ñ–∑ —Å—É–º
            amount_analysis = self._analyze_amounts(recent_transactions)
            insights.extend(amount_analysis)
            
            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä—ñ–æ–¥–æ–º
            comparison_insights = self._compare_periods(transactions, period_days)
            insights.extend(comparison_insights)
            
            return insights[:8]  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å–∞–π—Ç—ñ–≤
            
        except Exception as e:
            logger.error(f"Error generating spending insights: {e}")
            return ["–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤"]
    
    def _analyze_categories(self, transactions: List[Dict]) -> List[str]:
        """–ê–Ω–∞–ª—ñ–∑—É—î –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"""
        insights = []
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        category_totals = defaultdict(float)
        for t in transactions:
            category = t.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó')
            category_totals[category] += t['amount']
        
        if not category_totals:
            return []
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        top_category = max(category_totals.items(), key=lambda x: x[1])
        total_expenses = sum(category_totals.values())
        top_percentage = (top_category[1] / total_expenses) * 100
        
        insights.append(f"üèÜ –ù–∞–π–±—ñ–ª—å—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç: {top_category[0]} ({top_percentage:.1f}%)")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –≤–µ–ª–∏–∫–∏–º –≤—ñ–¥—Å–æ—Ç–∫–æ–º
        if top_percentage > 40:
            insights.append(f"‚ö†Ô∏è {top_category[0]} –∑–∞–π–º–∞—î {top_percentage:.1f}% –≤—Å—ñ—Ö –≤–∏—Ç—Ä–∞—Ç - –≤–∞—Ä—Ç–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏")
        
        return insights
    
    def _analyze_time_patterns(self, transactions: List[Dict]) -> List[str]:
        """–ê–Ω–∞–ª—ñ–∑—É—î —á–∞—Å–æ–≤—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –≤–∏—Ç—Ä–∞—Ç"""
        insights = []
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è
        weekday_totals = defaultdict(float)
        for t in transactions:
            weekday = t['transaction_date'].weekday()
            weekday_totals[weekday] += t['amount']
        
        if weekday_totals:
            max_weekday = max(weekday_totals.items(), key=lambda x: x[1])
            weekday_names = ['–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä', "–ø'—è—Ç–Ω–∏—Ü—é", '—Å—É–±–æ—Ç—É', '–Ω–µ–¥—ñ–ª—é']
            
            insights.append(f"üìÖ –ù–∞–π–±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—á–∞—î—Ç–µ –≤ {weekday_names[max_weekday[0]]}")
        
        # –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö vs —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
        weekend_total = weekday_totals.get(5, 0) + weekday_totals.get(6, 0)
        weekday_total = sum(weekday_totals[i] for i in range(5))
        
        if weekend_total > 0 and weekday_total > 0:
            if weekend_total > weekday_total * 0.4:  # –í–∏—Ö—ñ–¥–Ω—ñ > 40% –≤—ñ–¥ —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
                insights.append("üéâ –í–∏ –∞–∫—Ç–∏–≤–Ω–æ –≤–∏—Ç—Ä–∞—á–∞—î—Ç–µ –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö")
        
        return insights
    
    def _analyze_amounts(self, transactions: List[Dict]) -> List[str]:
        """–ê–Ω–∞–ª—ñ–∑—É—î —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
        insights = []
        
        amounts = [t['amount'] for t in transactions]
        if not amounts:
            return []
        
        avg_amount = np.mean(amounts)
        median_amount = np.median(amounts)
        max_amount = max(amounts)
        
        # –ê–Ω–∞–ª—ñ–∑ –≤–µ–ª–∏–∫–∏—Ö –≤–∏—Ç—Ä–∞—Ç
        large_expenses = [a for a in amounts if a > avg_amount * 2]
        if large_expenses:
            insights.append(f"üí∏ {len(large_expenses)} –≤–µ–ª–∏–∫–∏—Ö –≤–∏—Ç—Ä–∞—Ç (>{avg_amount*2:.0f} –≥—Ä–Ω)")
        
        # –ê–Ω–∞–ª—ñ–∑ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Å—É–º–∏
        insights.append(f"üìä –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_amount:.2f} –≥—Ä–Ω")
        
        return insights
    
    def _compare_periods(self, transactions: List[Dict], period_days: int) -> List[str]:
        """–ü–æ—Ä—ñ–≤–Ω—é—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º"""
        insights = []
        
        try:
            now = datetime.now()
            current_start = now - timedelta(days=period_days)
            prev_start = now - timedelta(days=period_days * 2)
            prev_end = current_start
            
            # –ü–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
            current_expenses = [
                t for t in transactions 
                if current_start <= t['transaction_date'] <= now and t['type'] == 'expense'
            ]
            
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥
            prev_expenses = [
                t for t in transactions 
                if prev_start <= t['transaction_date'] <= prev_end and t['type'] == 'expense'
            ]
            
            if current_expenses and prev_expenses:
                current_total = sum(t['amount'] for t in current_expenses)
                prev_total = sum(t['amount'] for t in prev_expenses)
                
                change_percent = ((current_total - prev_total) / prev_total) * 100 if prev_total > 0 else 0
                
                if abs(change_percent) > 10:
                    if change_percent > 0:
                        insights.append(f"üìà –í–∏—Ç—Ä–∞—Ç–∏ –∑—Ä–æ—Å–ª–∏ –Ω–∞ {change_percent:.1f}% –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä—ñ–æ–¥–æ–º")
                    else:
                        insights.append(f"üìâ –í–∏—Ç—Ä–∞—Ç–∏ –∑–º–µ–Ω—à–∏–ª–∏—Å—å –Ω–∞ {abs(change_percent):.1f}% –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä—ñ–æ–¥–æ–º")
        
        except Exception as e:
            logger.error(f"Error comparing periods: {e}")
        
        return insights
    
    def generate_savings_goals(self, user_data: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Ü—ñ–ª—è—Ö –∑–∞–æ—â–∞–¥–∂–µ–Ω—å"""
        try:
            monthly_income = user_data.get("monthly_income", 0)
            monthly_expenses = user_data.get("monthly_expenses", 0)
            current_savings = monthly_income - monthly_expenses
            
            goals = []
            
            if monthly_income > 0:
                # –ï–∫—Å—Ç—Ä–µ–Ω–∏–π —Ñ–æ–Ω–¥
                emergency_fund = monthly_expenses * 6
                goals.append({
                    "title": "üö® –ï–∫—Å—Ç—Ä–µ–Ω–∏–π —Ñ–æ–Ω–¥",
                    "target_amount": emergency_fund,
                    "monthly_target": emergency_fund / 12,
                    "description": "6-–º—ñ—Å—è—á–Ω–∏–π –∑–∞–ø–∞—Å –Ω–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏",
                    "priority": "high"
                })
                
                # –©–æ—Ä—ñ—á–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞
                vacation_fund = monthly_income * 0.1 * 12
                goals.append({
                    "title": "üå¥ –§–æ–Ω–¥ –≤—ñ–¥–ø—É—Å—Ç–∫–∏",
                    "target_amount": vacation_fund,
                    "monthly_target": vacation_fund / 12,
                    "description": "10% —Ä—ñ—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É –Ω–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫",
                    "priority": "medium"
                })
                
                # –í–µ–ª–∏–∫—ñ –ø–æ–∫—É–ø–∫–∏
                big_purchase = monthly_income * 2
                goals.append({
                    "title": "üõçÔ∏è –í–µ–ª–∏–∫—ñ –ø–æ–∫—É–ø–∫–∏",
                    "target_amount": big_purchase,
                    "monthly_target": big_purchase / 6,
                    "description": "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ —Ç–µ—Ö–Ω—ñ–∫—É, –º–µ–±–ª—ñ —Ç–æ—â–æ",
                    "priority": "low"
                })
            
            return goals
            
        except Exception as e:
            logger.error(f"Error generating savings goals: {e}")
            return []

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
insights_engine = FinancialInsightsEngine()
