"""
–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–æ–¥—É–ª—å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –¥–ª—è FinAssist –±–æ—Ç–∞.
–í–∫–ª—é—á–∞—î –Ω–æ–≤—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó, —Ç—Ä–µ–Ω–¥–∏, –ø—Ä–æ–≥–Ω–æ–∑–∏ —Ç–∞ —ñ–Ω—Å–∞–π—Ç–∏.
"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import calendar
import io
import logging
from typing import List, Dict, Tuple, Optional
from collections import defaultdict, Counter
import warnings
warnings.filterwarnings('ignore')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è matplotlib
plt.style.use('default')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 11
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

logger = logging.getLogger(__name__)

class AdvancedAnalytics:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑ –Ω–æ–≤–∏–º–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è–º–∏"""
    
    def __init__(self):
        # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        self.category_colors = {
            '–á–∂–∞': '#FF6B6B',
            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': '#4ECDC4', 
            '–†–æ–∑–≤–∞–≥–∏': '#45B7D1',
            '–ó–¥–æ—Ä–æ–≤\'—è': '#96CEB4',
            '–û–¥—è–≥': '#FECA57',
            '–î—ñ–º': '#FF9FF3',
            '–û—Å–≤—ñ—Ç–∞': '#54A0FF',
            '–Ü–Ω—à–µ': '#95A5A6'
        }
    
    def create_spending_heatmap(self, transactions: List[Dict]) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É –≤–∏—Ç—Ä–∞—Ç –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è —Ç–∞ –≥–æ–¥–∏–Ω–∞—Ö"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            df = pd.DataFrame([
                {
                    'hour': t['transaction_date'].hour,
                    'weekday': t['transaction_date'].weekday(),
                    'amount': t['amount'] if t['type'] == 'expense' else 0
                }
                for t in transactions if t['type'] == 'expense'
            ])
            
            if df.empty:
                return self._create_no_data_chart("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Ç—Ä–∏—Ü—é –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
            heatmap_data = df.groupby(['weekday', 'hour'])['amount'].sum().unstack(fill_value=0)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            plt.figure(figsize=(14, 8))
            
            # –Ü–º–µ–Ω–∞ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            weekday_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
            
            # –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞
            sns.heatmap(
                heatmap_data, 
                cmap='YlOrRd',
                annot=False,
                fmt='.0f',
                cbar_kws={'label': '–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç (–≥—Ä–Ω)'},
                yticklabels=weekday_names
            )
            
            plt.title('üî• –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –≤–∏—Ç—Ä–∞—Ç –ø–æ –¥–Ω—è—Ö —Ç–∞ –≥–æ–¥–∏–Ω–∞—Ö', fontsize=16, fontweight='bold')
            plt.xlabel('–ì–æ–¥–∏–Ω–∞ –¥–Ω—è')
            plt.ylabel('–î–µ–Ω—å —Ç–∏–∂–Ω—è')
            plt.tight_layout()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"Error creating spending heatmap: {e}")
            return self._create_error_chart("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏")
    
    def create_cash_flow_chart(self, transactions: List[Dict]) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É (–¥–æ—Ö–æ–¥–∏ vs –≤–∏—Ç—Ä–∞—Ç–∏)"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            df = pd.DataFrame(transactions)
            df['date'] = pd.to_datetime(df['transaction_date']).dt.date
            
            # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –¥–∞—Ç–∞—Ö
            daily_data = df.groupby(['date', 'type'])['amount'].sum().unstack(fill_value=0)
            
            if 'income' not in daily_data.columns:
                daily_data['income'] = 0
            if 'expense' not in daily_data.columns:
                daily_data['expense'] = 0
            
            # –û–±—á–∏—Å–ª—é—î–º–æ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å
            daily_data['balance'] = daily_data['income'] - daily_data['expense']
            daily_data['cumulative_balance'] = daily_data['balance'].cumsum()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
            
            # –ì—Ä–∞—Ñ—ñ–∫ 1: –©–æ–¥–µ–Ω–Ω—ñ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏
            x = daily_data.index
            ax1.bar(x, daily_data['income'], alpha=0.7, color='#2ECC71', label='–î–æ—Ö–æ–¥–∏')
            ax1.bar(x, -daily_data['expense'], alpha=0.7, color='#E74C3C', label='–í–∏—Ç—Ä–∞—Ç–∏')
            ax1.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            
            ax1.set_title('üí∞ –©–æ–¥–µ–Ω–Ω—ñ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–°—É–º–∞ (–≥—Ä–Ω)')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ—ñ–∫ 2: –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å
            ax2.plot(x, daily_data['cumulative_balance'], 
                    color='#3498DB', linewidth=2, marker='o', markersize=4)
            ax2.fill_between(x, daily_data['cumulative_balance'], 
                           alpha=0.3, color='#3498DB')
            ax2.axhline(y=0, color='red', linestyle='--', alpha=0.7)
            
            ax2.set_title('üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–ë–∞–ª–∞–Ω—Å (–≥—Ä–Ω)')
            ax2.set_xlabel('–î–∞—Ç–∞')
            ax2.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç
            for ax in [ax1, ax2]:
                ax.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"Error creating cash flow chart: {e}")
            return self._create_error_chart("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É")
    
    def create_category_trends_chart(self, transactions: List[Dict]) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ —Ç—Ä–µ–Ω–¥—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            df = pd.DataFrame([
                {
                    'date': t['transaction_date'].date(),
                    'category': t.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'),
                    'amount': t['amount']
                }
                for t in transactions if t['type'] == 'expense'
            ])
            
            if df.empty:
                return self._create_no_data_chart("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö")
            
            # –ì—Ä—É–ø—É—î–º–æ –ø–æ –¥–∞—Ç–∞—Ö —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
            pivot_data = df.groupby(['date', 'category'])['amount'].sum().unstack(fill_value=0)
            
            # –û–±–∏—Ä–∞—î–º–æ —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ —Å—É–º–æ—é
            total_by_category = pivot_data.sum().sort_values(ascending=False)
            top_categories = total_by_category.head(5).index
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            plt.figure(figsize=(14, 8))
            
            colors = plt.cm.Set3(np.linspace(0, 1, len(top_categories)))
            
            for i, category in enumerate(top_categories):
                if category in pivot_data.columns:
                    plt.plot(pivot_data.index, pivot_data[category], 
                           marker='o', linewidth=2, label=category, color=colors[i])
            
            plt.title('üìä –¢—Ä–µ–Ω–¥–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö', fontsize=16, fontweight='bold')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç (–≥—Ä–Ω)')
            plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            plt.grid(True, alpha=0.3)
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"Error creating category trends chart: {e}")
            return self._create_error_chart("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É —Ç—Ä–µ–Ω–¥—ñ–≤")
    
    def create_spending_patterns_chart(self, transactions: List[Dict]) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ –≤–∏—Ç—Ä–∞—Ç (–ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è —Ç–∞ –º—ñ—Å—è—Ü—è—Ö)"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            df = pd.DataFrame([
                {
                    'weekday': t['transaction_date'].weekday(),
                    'month': t['transaction_date'].month,
                    'amount': t['amount']
                }
                for t in transactions if t['type'] == 'expense'
            ])
            
            if df.empty:
                return self._create_no_data_chart("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫–∏
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
            
            # –ì—Ä–∞—Ñ—ñ–∫ 1: –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è
            weekday_stats = df.groupby('weekday')['amount'].agg(['sum', 'count', 'mean'])
            weekday_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
            
            bars1 = ax1.bar(range(7), weekday_stats['sum'], 
                           color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', 
                                  '#FECA57', '#FF9FF3', '#54A0FF'])
            ax1.set_title('üìÖ –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (–≥—Ä–Ω)')
            ax1.set_xticks(range(7))
            ax1.set_xticklabels(weekday_names)
            
            # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ
            for i, bar in enumerate(bars1):
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height,
                        f'{height:.0f}', ha='center', va='bottom')
            
            # –ì—Ä–∞—Ñ—ñ–∫ 2: –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö
            month_stats = df.groupby('month')['amount'].agg(['sum', 'count', 'mean'])
            month_names = [calendar.month_abbr[i] for i in range(1, 13)]
            existing_months = month_stats.index
            
            bars2 = ax2.bar(existing_months, month_stats['sum'], 
                           color='#3498DB', alpha=0.7)
            ax2.set_title('üìÜ –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (–≥—Ä–Ω)')
            ax2.set_xlabel('–ú—ñ—Å—è—Ü—å')
            ax2.set_xticks(existing_months)
            ax2.set_xticklabels([month_names[m-1] for m in existing_months])
            
            # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ
            for bar in bars2:
                height = bar.get_height()
                ax2.text(bar.get_x() + bar.get_width()/2., height,
                        f'{height:.0f}', ha='center', va='bottom')
            
            plt.tight_layout()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"Error creating spending patterns chart: {e}")
            return self._create_error_chart("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤")
    
    def create_budget_vs_actual_chart(self, transactions: List[Dict], 
                                     monthly_budget: float = None) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –∑ —Ñ–∞–∫—Ç–∏—á–Ω–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏"""
        try:
            if not monthly_budget:
                return self._create_no_data_chart("–ë—é–¥–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            df = pd.DataFrame([
                {
                    'date': t['transaction_date'],
                    'amount': t['amount'],
                    'category': t.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó')
                }
                for t in transactions if t['type'] == 'expense'
            ])
            
            if df.empty:
                return self._create_no_data_chart("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏")
            
            # –ì—Ä—É–ø—É—î–º–æ –ø–æ –º—ñ—Å—è—Ü—è—Ö
            df['month_year'] = df['date'].dt.to_period('M')
            monthly_expenses = df.groupby('month_year')['amount'].sum()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            plt.figure(figsize=(14, 8))
            
            x = range(len(monthly_expenses))
            months = [str(m) for m in monthly_expenses.index]
            
            # –°—Ç–æ–≤–ø—Ü—ñ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç
            colors = ['#E74C3C' if expense > monthly_budget else '#2ECC71' 
                     for expense in monthly_expenses.values]
            
            bars = plt.bar(x, monthly_expenses.values, color=colors, alpha=0.7, 
                          label='–§–∞–∫—Ç–∏—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏')
            
            # –õ—ñ–Ω—ñ—è –±—é–¥–∂–µ—Ç—É
            plt.axhline(y=monthly_budget, color='#3498DB', linestyle='--', 
                       linewidth=2, label=f'–ë—é–¥–∂–µ—Ç ({monthly_budget:.0f} –≥—Ä–Ω)')
            
            # –ü—ñ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–≤–ø—Ü—è—Ö
            for i, (bar, value) in enumerate(zip(bars, monthly_expenses.values)):
                height = bar.get_height()
                color = 'red' if value > monthly_budget else 'green'
                plt.text(bar.get_x() + bar.get_width()/2., height,
                        f'{value:.0f}', ha='center', va='bottom', color=color, fontweight='bold')
            
            plt.title('üí∞ –ë—é–¥–∂–µ—Ç vs –§–∞–∫—Ç–∏—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏', fontsize=16, fontweight='bold')
            plt.xlabel('–ú—ñ—Å—è—Ü—å')
            plt.ylabel('–°—É–º–∞ (–≥—Ä–Ω)')
            plt.xticks(x, months, rotation=45)
            plt.legend()
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"Error creating budget vs actual chart: {e}")
            return self._create_error_chart("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É –±—é–¥–∂–µ—Ç—É")
    
    def create_expense_distribution_donut(self, transactions: List[Dict]) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î –ø–æ–Ω—á–∏–∫–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤–∏—Ç—Ä–∞—Ç"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            category_totals = defaultdict(float)
            for t in transactions:
                if t['type'] == 'expense':
                    category = t.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó')
                    category_totals[category] += t['amount']
            
            if not category_totals:
                return self._create_no_data_chart("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏")
            
            # –°–æ—Ä—Ç—É—î–º–æ —Ç–∞ –±–µ—Ä—î–º–æ —Ç–æ–ø-6
            sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
            
            if len(sorted_categories) > 6:
                top_categories = sorted_categories[:5]
                other_sum = sum(amount for _, amount in sorted_categories[5:])
                top_categories.append(('–Ü–Ω—à–µ', other_sum))
            else:
                top_categories = sorted_categories
            
            labels = [cat for cat, _ in top_categories]
            values = [amount for _, amount in top_categories]
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–Ω—á–∏–∫–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É
            plt.figure(figsize=(12, 8))
            
            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57', '#FF9FF3']
            
            wedges, texts, autotexts = plt.pie(values, labels=labels, autopct='%1.1f%%',
                                              colors=colors, startangle=90, 
                                              pctdistance=0.85)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Ç–≤—ñ—Ä –≤ —Ü–µ–Ω—Ç—Ä—ñ
            centre_circle = plt.Circle((0,0), 0.50, fc='white')
            fig = plt.gcf()
            fig.gca().add_artist(centre_circle)
            
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
            total = sum(values)
            plt.text(0, 0, f'–í—Å—å–æ–≥–æ\n{total:.0f} –≥—Ä–Ω', ha='center', va='center', 
                    fontsize=14, fontweight='bold')
            
            plt.title('üç© –†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö', fontsize=16, fontweight='bold', y=1.02)
            plt.axis('equal')
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"Error creating donut chart: {e}")
            return self._create_error_chart("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–Ω—á–∏–∫–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏")
    
    def _create_no_data_chart(self, message: str) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î –∑–∞–≥–ª—É—à–∫—É, –∫–æ–ª–∏ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö"""
        plt.figure(figsize=(10, 6))
        plt.text(0.5, 0.5, message, ha='center', va='center', 
                fontsize=16, transform=plt.gca().transAxes)
        plt.title('üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞')
        plt.axis('off')
        
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        return buffer
    
    def _create_error_chart(self, message: str) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        plt.figure(figsize=(10, 6))
        plt.text(0.5, 0.5, f"‚ùå {message}", ha='center', va='center', 
                fontsize=16, color='red', transform=plt.gca().transAxes)
        plt.title('–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏')
        plt.axis('off')
        
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        return buffer

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
advanced_analytics = AdvancedAnalytics()
