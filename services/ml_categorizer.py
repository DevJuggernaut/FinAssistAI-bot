import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
import joblib
import logging
from typing import List, Dict, Tuple
import os

logger = logging.getLogger(__name__)

class TransactionCategorizer:
    def __init__(self, model_path: str = 'models/transaction_categorizer.joblib'):
        self.model_path = model_path
        self.model = None
        self.vectorizer = None
        self.categories = None
        self._load_or_create_model()

    def _load_or_create_model(self):
        """Load existing model or create a new one"""
        try:
            if os.path.exists(self.model_path):
                self.model = joblib.load(self.model_path)
                logger.info("Loaded existing categorization model")
            else:
                self._create_new_model()
                logger.info("Created new categorization model")
        except Exception as e:
            logger.error(f"Error loading/creating model: {str(e)}")
            self._create_new_model()

    def _create_new_model(self):
        """Create a new model with default categories"""
        self.vectorizer = TfidfVectorizer(
            max_features=1000,
            stop_words='english',
            ngram_range=(1, 2)
        )
        self.model = Pipeline([
            ('vectorizer', self.vectorizer),
            ('classifier', MultinomialNB())
        ])
        self.categories = []

    def train(self, transactions: List[Dict], categories: List[str]):
        """
        Train the model with new transaction data
        """
        try:
            # Prepare training data
            descriptions = [t['description'] for t in transactions]
            labels = [t['category'] for t in transactions]
            
            # Update categories
            self.categories = list(set(categories))
            
            # Train the model
            self.model.fit(descriptions, labels)
            
            # Save the model
            os.makedirs(os.path.dirname(self.model_path), exist_ok=True)
            joblib.dump(self.model, self.model_path)
            
            logger.info("Model trained and saved successfully")
        except Exception as e:
            logger.error(f"Error training model: {str(e)}")
            raise

    def predict_category(self, description: str) -> Tuple[str, float]:
        """
        Predict category for a transaction description
        Returns tuple of (category, confidence)
        """
        try:
            if not self.model:
                raise ValueError("Model not initialized")
            
            # Get prediction probabilities
            probs = self.model.predict_proba([description])[0]
            predicted_idx = np.argmax(probs)
            confidence = probs[predicted_idx]
            
            return self.categories[predicted_idx], confidence
        except Exception as e:
            logger.error(f"Error predicting category: {str(e)}")
            return "uncategorized", 0.0

    def evaluate_model(self, test_transactions: List[Dict]) -> Dict:
        """
        Evaluate model performance on test data
        """
        try:
            descriptions = [t['description'] for t in test_transactions]
            true_labels = [t['category'] for t in test_transactions]
            
            # Get predictions
            predictions = self.model.predict(descriptions)
            
            # Calculate accuracy
            accuracy = np.mean(predictions == true_labels)
            
            return {
                'accuracy': accuracy,
                'total_samples': len(test_transactions)
            }
        except Exception as e:
            logger.error(f"Error evaluating model: {str(e)}")
            raise

    def update_model(self, new_transactions: List[Dict]):
        """
        Update model with new transactions
        """
        try:
            # Prepare new data
            descriptions = [t['description'] for t in new_transactions]
            labels = [t['category'] for t in new_transactions]
            
            # Update categories
            self.categories = list(set(self.categories + labels))
            
            # Update model
            self.model.fit(descriptions, labels)
            
            # Save updated model
            joblib.dump(self.model, self.model_path)
            
            logger.info("Model updated successfully")
        except Exception as e:
            logger.error(f"Error updating model: {str(e)}")
            raise

    def categorize_transaction(self, description: str, amount: float, transaction_type: str) -> Dict:
        """
        Categorize transaction and return category with icon and name
        """
        try:
            # –ë–∞–∑–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
            description_lower = description.lower()
            
            # –°–ª–æ–≤–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —ñ–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
            expense_categories = {
                '–ø—Ä–æ–¥—É–∫—Ç–∏': {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'icon': 'üõí'},
                '—ó–∂–∞': {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'icon': 'üõí'},
                '–∞—Ç–±': {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'icon': 'üõí'},
                '—Å—ñ–ª—å–ø–æ': {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'icon': 'üõí'},
                '–Ω–æ–≤—É—Å': {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'icon': 'üõí'},
                'metro': {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'icon': 'üõí'},
                '–∞—à–∞–Ω': {'id': 1, 'name': '–ü—Ä–æ–¥—É–∫—Ç–∏', 'icon': 'üõí'},
                
                '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                '–ø—Ä–æ—ó–∑–¥': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                '–º–µ—Ç—Ä–æ': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                '–∞–≤—Ç–æ–±—É—Å': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                '—Ç–∞–∫—Å—ñ': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                'uber': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                'bolt': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                '–±–µ–Ω–∑–∏–Ω': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                '–ø–∞–ª–∏–≤–æ': {'id': 2, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'icon': 'üöó'},
                
                '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {'id': 3, 'name': '–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', 'icon': 'üçΩÔ∏è'},
                '–∫–∞—Ñ–µ': {'id': 3, 'name': '–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', 'icon': 'üçΩÔ∏è'},
                '–æ–±—ñ–¥': {'id': 3, 'name': '–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', 'icon': 'üçΩÔ∏è'},
                '—Å–Ω—ñ–¥–∞–Ω–æ–∫': {'id': 3, 'name': '–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', 'icon': 'üçΩÔ∏è'},
                '–≤–µ—á–µ—Ä—è': {'id': 3, 'name': '–ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', 'icon': 'üçΩÔ∏è'},
                
                '—Ä–æ–∑–≤–∞–≥–∏': {'id': 4, 'name': '–†–æ–∑–≤–∞–≥–∏', 'icon': 'üéØ'},
                '–∫—ñ–Ω–æ': {'id': 4, 'name': '–†–æ–∑–≤–∞–≥–∏', 'icon': 'üéØ'},
                '—Ç–µ–∞—Ç—Ä': {'id': 4, 'name': '–†–æ–∑–≤–∞–≥–∏', 'icon': 'üéØ'},
                '–∫–æ–Ω—Ü–µ—Ä—Ç': {'id': 4, 'name': '–†–æ–∑–≤–∞–≥–∏', 'icon': 'üéØ'},
                
                '–∑–¥–æ—Ä–æ–≤—è': {'id': 5, 'name': "–ó–¥–æ—Ä–æ–≤'—è", 'icon': 'üíä'},
                '–∞–ø—Ç–µ–∫–∞': {'id': 5, 'name': "–ó–¥–æ—Ä–æ–≤'—è", 'icon': 'üíä'},
                '–ª—ñ–∫–∞—Ä': {'id': 5, 'name': "–ó–¥–æ—Ä–æ–≤'—è", 'icon': 'üíä'},
                '–ª—ñ–∫–∏': {'id': 5, 'name': "–ó–¥–æ—Ä–æ–≤'—è", 'icon': 'üíä'},
                
                '–æ–¥—è–≥': {'id': 6, 'name': '–û–¥—è–≥ —ñ –≤–∑—É—Ç—Ç—è', 'icon': 'üëï'},
                '–≤–∑—É—Ç—Ç—è': {'id': 6, 'name': '–û–¥—è–≥ —ñ –≤–∑—É—Ç—Ç—è', 'icon': 'üëï'},
                '–º–∞–≥–∞–∑–∏–Ω': {'id': 6, 'name': '–û–¥—è–≥ —ñ –≤–∑—É—Ç—Ç—è', 'icon': 'üëï'},
                
                '–∫–æ–º—É–Ω–∞–ª—å–Ω—ñ': {'id': 7, 'name': '–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', 'icon': 'üè†'},
                '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞': {'id': 7, 'name': '–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', 'icon': 'üè†'},
                '—Å–≤—ñ—Ç–ª–æ': {'id': 7, 'name': '–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', 'icon': 'üè†'},
                '–≥–∞–∑': {'id': 7, 'name': '–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', 'icon': 'üè†'},
                '–≤–æ–¥–∞': {'id': 7, 'name': '–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', 'icon': 'üè†'},
                '–æ–ø–∞–ª–µ–Ω–Ω—è': {'id': 7, 'name': '–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', 'icon': 'üè†'},
            }
            
            # –°–ª–æ–≤–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —ñ–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è –¥–æ—Ö–æ–¥—ñ–≤
            income_categories = {
                '–∑–∞—Ä–ø–ª–∞—Ç–∞': {'id': 101, 'name': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'icon': 'üí∞'},
                '—Ñ—Ä–∏–ª–∞–Ω—Å': {'id': 102, 'name': '–§—Ä–∏–ª–∞–Ω—Å', 'icon': 'üíª'},
                '–±–æ–Ω—É—Å': {'id': 103, 'name': '–ë–æ–Ω—É—Å', 'icon': 'üéÅ'},
                '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó': {'id': 104, 'name': '–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', 'icon': 'üìà'},
                '–ø—Ä–æ–¥–∞–∂': {'id': 105, 'name': '–ü—Ä–æ–¥–∞–∂', 'icon': 'üíµ'},
                '–ø–æ–¥–∞—Ä—É–Ω–æ–∫': {'id': 106, 'name': '–ü–æ–¥–∞—Ä—É–Ω–∫–∏', 'icon': 'üéÅ'},
            }
            
            # –í–∏–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            categories_dict = expense_categories if transaction_type == 'expense' else income_categories
            
            # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            for keyword, category in categories_dict.items():
                if keyword in description_lower:
                    return category
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É
            if transaction_type == 'expense':
                return {'id': 999, 'name': '–Ü–Ω—à–µ', 'icon': 'üì¶'}
            else:
                return {'id': 199, 'name': '–Ü–Ω—à–∏–π –¥–æ—Ö—ñ–¥', 'icon': 'üí∞'}
            
        except Exception as e:
            logger.error(f"Error in categorize_transaction: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
            if transaction_type == 'expense':
                return {'id': 999, 'name': '–Ü–Ω—à–µ', 'icon': 'üì¶'}
            else:
                return {'id': 199, 'name': '–Ü–Ω—à–∏–π –¥–æ—Ö—ñ–¥', 'icon': 'üí∞'}

# Create an instance for import
transaction_categorizer = TransactionCategorizer()