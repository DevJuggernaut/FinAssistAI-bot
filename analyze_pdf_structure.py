#!/usr/bin/env python3
"""
–ü—Ä—è–º–∏–π —Ç–µ—Å—Ç PDF –ø–∞—Ä—Å–∏–Ω–≥—É –¥–ª—è –ú–æ–Ω–æ–±–∞–Ω–∫—É
"""

import sys
import os
sys.path.insert(0, '/Users/abobina/telegram_bot/FinAssistAI-bot')

import pdfplumber

def analyze_pdf_structure(file_path):
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É PDF —Ñ–∞–π–ª—É"""
    print(f"üîç –ê–Ω–∞–ª—ñ–∑—É—î–º–æ PDF —Ñ–∞–π–ª: {file_path}")
    
    try:
        with pdfplumber.open(file_path) as pdf:
            print(f"üìñ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {len(pdf.pages)}")
            
            for i, page in enumerate(pdf.pages):
                print(f"\nüìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {i+1}:")
                
                # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
                text = page.extract_text() or ""
                lines = [line.strip() for line in text.split('\n') if line.strip()]
                print(f"   –†—è–¥–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É: {len(lines)}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ú–æ–Ω–æ–±–∞–Ω–∫
                is_monobank = any('–º–æ–Ω–æ' in line.lower() or 'mono' in line.lower() or '—É–Ω—ñ–≤–µ—Ä—Å–∞–ª' in line.lower() for line in lines)
                print(f"   –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ú–æ–Ω–æ–±–∞–Ω–∫—É: {'‚úÖ' if is_monobank else '‚ùå'}")
                
                # –í–∏—Ç—è–≥—É—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
                tables = page.extract_tables()
                print(f"   –¢–∞–±–ª–∏—Ü—å –∑–Ω–∞–π–¥–µ–Ω–æ: {len(tables)}")
                
                if tables:
                    for j, table in enumerate(tables):
                        print(f"\n   üìä –¢–∞–±–ª–∏—Ü—è {j+1}:")
                        print(f"      –†–æ–∑–º—ñ—Ä: {len(table)} —Ä—è–¥–∫—ñ–≤ x {len(table[0]) if table else 0} —Å—Ç–æ–≤–ø—Ü—ñ–≤")
                        
                        if table and len(table) > 0:
                            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                            headers = table[0]
                            print("      –ó–∞–≥–æ–ª–æ–≤–∫–∏:")
                            for k, header in enumerate(headers):
                                print(f"        {k}: {header}")
                            
                            # –®—É–∫–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                            date_col = None
                            amount_col = None
                            desc_col = None
                            
                            for k, header in enumerate(headers):
                                header_lower = str(header or '').lower()
                                if '–¥–∞—Ç–∞' in header_lower or 'date' in header_lower:
                                    date_col = k
                                elif '—Å—É–º–∞' in header_lower and '–∫–∞—Ä—Ç–∫–∏' in header_lower:
                                    amount_col = k
                                elif '–¥–µ—Ç–∞–ª—ñ' in header_lower or '–æ–ø–∏—Å' in header_lower:
                                    desc_col = k
                            
                            print(f"      –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: –¥–∞—Ç–∞={date_col}, —Å—É–º–∞={amount_col}, –æ–ø–∏—Å={desc_col}")
                            
                            # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö
                            print("      –î–∞–Ω—ñ (–ø–µ—Ä—à—ñ 3 —Ä—è–¥–∫–∏):")
                            for row_idx in range(1, min(4, len(table))):
                                if row_idx < len(table):
                                    row = table[row_idx]
                                    print(f"        –†—è–¥–æ–∫ {row_idx}: {row}")
                                    
                                    # –ü—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                                    if date_col is not None and amount_col is not None and len(row) > max(date_col, amount_col):
                                        date_val = row[date_col] if date_col < len(row) else None
                                        amount_val = row[amount_col] if amount_col < len(row) else None
                                        desc_val = row[desc_col] if desc_col is not None and desc_col < len(row) else None
                                        
                                        print(f"          –î–∞—Ç–∞: {date_val}")
                                        print(f"          –°—É–º–∞: {amount_val}")
                                        print(f"          –û–ø–∏—Å: {desc_val}")
                                        
                                        # –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —Å—É–º—É
                                        if amount_val:
                                            import re
                                            amount_clean = re.sub(r'[^\d\-\+\.\,]', '', str(amount_val))
                                            amount_clean = amount_clean.replace(',', '.')
                                            try:
                                                amount_parsed = float(amount_clean)
                                                print(f"          –°—É–º–∞ (parsed): {amount_parsed}")
                                            except ValueError:
                                                print(f"          –°—É–º–∞ (error): –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ '{amount_clean}'")
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É PDF: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    pdf_file = "/Users/abobina/telegram_bot/FinAssistAI-bot/uploads/statements/report_20-06-2025_16-12-03.pdf"
    
    if os.path.exists(pdf_file):
        analyze_pdf_structure(pdf_file)
    else:
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {pdf_file}")
