#!/usr/bin/env python3
"""
–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
"""

import os
import sys
import matplotlib
matplotlib.use('Agg')

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from handlers.analytics_handler import create_bar_chart
from database.models import TransactionType
from datetime import datetime, timedelta
import random

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤—ñ –∫–ª–∞—Å–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
class FakeTransaction:
    def __init__(self, amount, transaction_type, transaction_date, category_name):
        self.amount = amount
        self.type = transaction_type
        self.transaction_date = transaction_date
        self.category = FakeCategory(category_name)

class FakeCategory:
    def __init__(self, name):
        self.name = name

def create_test_transactions_for_periods():
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤"""
    now = datetime.now()
    transactions = []
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å (—Ä—ñ–∑–Ω—ñ –≥–æ–¥–∏–Ω–∏)
    for hour in range(6, 23, 2):  # –ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏ –∑ 6:00 –¥–æ 23:00
        # –î–æ—Ö–æ–¥–∏
        if hour in [9, 14, 18]:  # 3 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å
            transactions.append(FakeTransaction(
                amount=random.randint(500, 2000),
                transaction_type=TransactionType.INCOME,
                transaction_date=now.replace(hour=hour, minute=random.randint(0, 59)),
                category_name=random.choice(["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–§—Ä—ñ–ª–∞–Ω—Å", "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"])
            ))
        
        # –í–∏—Ç—Ä–∞—Ç–∏
        transactions.append(FakeTransaction(
            amount=random.randint(50, 800),
            transaction_type=TransactionType.EXPENSE,
            transaction_date=now.replace(hour=hour, minute=random.randint(0, 59)),
            category_name=random.choice(["–ü—Ä–æ–¥—É–∫—Ç–∏", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞–≤–∞", "–û–±—ñ–¥", "–ü–æ–∫—É–ø–∫–∏"])
        ))
    
    # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å (–ø–æ —Ç–∏–∂–Ω—è—Ö)
    for week in range(4):
        week_start = now - timedelta(weeks=week)
        for day_offset in range(7):
            transaction_date = week_start - timedelta(days=day_offset)
            
            # –î–æ—Ö–æ–¥–∏ (2-3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)
            if day_offset % 3 == 0:
                transactions.append(FakeTransaction(
                    amount=random.randint(3000, 8000),
                    transaction_type=TransactionType.INCOME,
                    transaction_date=transaction_date,
                    category_name=random.choice(["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–§—Ä—ñ–ª–∞–Ω—Å", "–ë–æ–Ω—É—Å"])
                ))
            
            # –í–∏—Ç—Ä–∞—Ç–∏ (—â–æ–¥–Ω—è)
            for _ in range(random.randint(1, 4)):
                transactions.append(FakeTransaction(
                    amount=random.randint(100, 1500),
                    transaction_type=TransactionType.EXPENSE,
                    transaction_date=transaction_date,
                    category_name=random.choice(["–ü—Ä–æ–¥—É–∫—Ç–∏", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–æ–∑–≤–∞–≥–∏", "–†–µ—Å—Ç–æ—Ä–∞–Ω–∏", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ"])
                ))
    
    return transactions

async def test_different_periods():
    """–¢–µ—Å—Ç—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤...")
    
    transactions = create_test_transactions_for_periods()
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(transactions)} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
    
    test_cases = [
        {
            "data_type": "comparison",
            "period": "day",
            "title": "–î–æ—Ö–æ–¥–∏ vs –í–∏—Ç—Ä–∞—Ç–∏ - –°—å–æ–≥–æ–¥–Ω—ñ",
            "filename": "test_bar_chart_day.png",
            "description": "–î–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ —á–∞—Å–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –¥–Ω—è"
        },
        {
            "data_type": "comparison",
            "period": "month",
            "title": "–î–æ—Ö–æ–¥–∏ vs –í–∏—Ç—Ä–∞—Ç–∏ - –ú—ñ—Å—è—Ü—å",
            "filename": "test_bar_chart_month.png",
            "description": "–î–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ —Ç–∏–∂–Ω—è—Ö –º—ñ—Å—è—Ü—è"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        try:
            print(f"\nüìä –¢–µ—Å—Ç {i}/{len(test_cases)}: {test_case['description']}")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            chart_buffer = await create_bar_chart(
                transactions, 
                test_case["data_type"], 
                test_case["title"], 
                test_case["period"]
            )
            
            if not chart_buffer:
                print(f"‚ùå –ì—Ä–∞—Ñ—ñ–∫ {i} –Ω–µ –±—É–≤ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π")
                continue
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            with open(test_case["filename"], 'wb') as f:
                f.write(chart_buffer.getvalue())
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
            file_size = os.path.getsize(test_case["filename"])
            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {test_case['filename']}")
            print(f"üìè –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç")
            
            if file_size > 100000:
                print("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –º–∞—î –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å")
            else:
                print("‚ö†Ô∏è –ì—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –º–∞—Ç–∏ –Ω–∏–∑—å–∫—É —è–∫—ñ—Å—Ç—å")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É {i}: {e}")
            import traceback
            traceback.print_exc()
    
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("   ‚Ä¢ –î–µ–Ω—å: –ü–æ–∫–∞–∑—É—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ 00-06, 06-12, 12-18, 18-24")
    print("   ‚Ä¢ –ú—ñ—Å—è—Ü—å: –ü–æ–∫–∞–∑—É—î —Ç–∏–∂–Ω—ñ 1, 2, 3, 4")
    print("   ‚Ä¢ –í—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –º–∞—é—Ç—å —Å—É—á–∞—Å–Ω–∏–π –¥–∏–∑–∞–π–Ω —Ç–∞ –≤–µ–ª–∏–∫—ñ —à—Ä–∏—Ñ—Ç–∏")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_different_periods())
