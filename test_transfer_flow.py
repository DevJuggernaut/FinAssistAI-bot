#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É –ø–µ—Ä–µ–∫–∞–∑—É –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏
"""
import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç—É –¥–æ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from database.db_operations import (
    get_or_create_user, create_account, get_user_accounts, 
    get_total_balance, transfer_between_accounts
)
from database.models import AccountType

def test_transfer_setup():
    """–¢–µ—Å—Ç—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É"""
    print("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    test_user_id = 999999  # –¢–µ—Å—Ç–æ–≤–∏–π ID
    user = get_or_create_user(test_user_id)
    print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {user.id}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ä–∞—Ö—É–Ω–∫–∏
    account1 = create_account(
        user_id=user.id,
        name="–¢–µ—Å—Ç–æ–≤–∏–π –ö–∞—Ä—Ç–∫–æ–≤–∏–π",
        account_type=AccountType.BANK_CARD,
        balance=5000.0,
        icon="üí≥"
    )
    print(f"‚úÖ –†–∞—Ö—É–Ω–æ–∫ 1 —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {account1.name} - {account1.balance} UAH")
    
    account2 = create_account(
        user_id=user.id,
        name="–¢–µ—Å—Ç–æ–≤–∏–π –ì–æ—Ç—ñ–≤–∫–∞",
        account_type=AccountType.CASH,
        balance=1000.0,
        icon="üíµ"
    )
    print(f"‚úÖ –†–∞—Ö—É–Ω–æ–∫ 2 —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {account2.name} - {account2.balance} UAH")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    accounts = get_user_accounts(user.id)
    total_balance = get_total_balance(user.id)
    
    print(f"\nüìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ä–∞—Ö—É–Ω–∫—ñ–≤:")
    for acc in accounts:
        print(f"   {acc.icon} {acc.name}: {acc.balance:,.2f} UAH")
    print(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:,.2f} UAH")
    
    return user, account1, account2

def test_transfer_logic():
    """–¢–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–∫–∞–∑—É"""
    print("\nüí∏ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ –ø–µ—Ä–µ–∫–∞–∑—É...")
    
    user, account1, account2 = test_transfer_setup()
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
    transfer_amount = 500.0
    print(f"\nüîÑ –ü–µ—Ä–µ–∫–∞–∑ {transfer_amount} UAH –∑ '{account1.name}' –Ω–∞ '{account2.name}'")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –¥–æ –ø–µ—Ä–µ–∫–∞–∑—É
    print(f"–î–æ –ø–µ—Ä–µ–∫–∞–∑—É:")
    print(f"   {account1.icon} {account1.name}: {account1.balance:,.2f} UAH")
    print(f"   {account2.icon} {account2.name}: {account2.balance:,.2f} UAH")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
    success, message = transfer_between_accounts(
        from_account_id=account1.id,
        to_account_id=account2.id,
        amount=transfer_amount,
        description=f"–¢–µ—Å—Ç–æ–≤–∏–π –ø–µ—Ä–µ–∫–∞–∑ {transfer_amount} UAH"
    )
    
    if success:
        print("‚úÖ –ü–µ—Ä–µ–∫–∞–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Ä–∞—Ö—É–Ω–∫—ñ–≤
        updated_accounts = get_user_accounts(user.id)
        updated_account1 = next((acc for acc in updated_accounts if acc.id == account1.id), None)
        updated_account2 = next((acc for acc in updated_accounts if acc.id == account2.id), None)
        
        print(f"–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É:")
        print(f"   {updated_account1.icon} {updated_account1.name}: {updated_account1.balance:,.2f} UAH")
        print(f"   {updated_account2.icon} {updated_account2.name}: {updated_account2.balance:,.2f} UAH")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–∞–∑—É
        expected_account1_balance = account1.balance - transfer_amount
        expected_account2_balance = account2.balance + transfer_amount
        
        if (abs(updated_account1.balance - expected_account1_balance) < 0.01 and
            abs(updated_account2.balance - expected_account2_balance) < 0.01):
            print("‚úÖ –°—É–º–∏ –ø–µ—Ä–µ–∫–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ!")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Å—É–º–∞—Ö –ø–µ—Ä–µ–∫–∞–∑—É!")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
        new_total_balance = get_total_balance(user.id)
        original_total = account1.balance + account2.balance
        if abs(new_total_balance - original_total) < 0.01:
            print("‚úÖ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            print("‚ùå –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑–º—ñ–Ω–∏–≤—Å—è!")
            
    else:
        print(f"‚ùå –ü–µ—Ä–µ–∫–∞–∑ –Ω–µ –≤–¥–∞–≤—Å—è: {message}")

def test_transfer_validation():
    """–¢–µ—Å—Ç—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –ø–µ—Ä–µ–∫–∞–∑—É"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–µ—Ä–µ–∫–∞–∑—É...")
    
    user, account1, account2 = test_transfer_setup()
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–∫–∞–∑ –±—ñ–ª—å—à–æ—ó —Å—É–º–∏ –Ω—ñ–∂ –¥–æ—Å—Ç—É–ø–Ω–æ
    large_amount = account1.balance + 1000
    print(f"\n‚ùå –¢–µ—Å—Ç: –ø–µ—Ä–µ–∫–∞–∑ {large_amount} UAH (–±—ñ–ª—å—à–µ –Ω—ñ–∂ –¥–æ—Å—Ç—É–ø–Ω–æ)")
    success, message = transfer_between_accounts(
        from_account_id=account1.id,
        to_account_id=account2.id,
        amount=large_amount,
        description="–¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –∫–æ—à—Ç—ñ–≤"
    )
    
    if not success:
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –ø–µ—Ä–µ–∫–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –∫–æ—à—Ç—ñ–≤: {message}")
    else:
        print("‚ùå –ü–µ—Ä–µ–∫–∞–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ –Ω–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –∫–æ—à—Ç—ñ–≤!")
    
    # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–∫–∞–∑ –Ω—É–ª—å–æ–≤–æ—ó —Å—É–º–∏
    print(f"\n‚ùå –¢–µ—Å—Ç: –ø–µ—Ä–µ–∫–∞–∑ 0 UAH")
    success, message = transfer_between_accounts(
        from_account_id=account1.id,
        to_account_id=account2.id,
        amount=0,
        description="–¢–µ—Å—Ç –Ω—É–ª—å–æ–≤–æ—ó —Å—É–º–∏"
    )
    
    if not success:
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –ø–µ—Ä–µ–∫–∞–∑ –Ω—É–ª—å–æ–≤–æ—ó —Å—É–º–∏: {message}")
    else:
        print("‚ùå –ü–µ—Ä–µ–∫–∞–∑ –Ω—É–ª—å–æ–≤–æ—ó —Å—É–º–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
    
    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–∫–∞–∑ –≤—ñ–¥'—î–º–Ω–æ—ó —Å—É–º–∏
    print(f"\n‚ùå –¢–µ—Å—Ç: –ø–µ—Ä–µ–∫–∞–∑ -100 UAH")
    success, message = transfer_between_accounts(
        from_account_id=account1.id,
        to_account_id=account2.id,
        amount=-100,
        description="–¢–µ—Å—Ç –≤—ñ–¥'—î–º–Ω–æ—ó —Å—É–º–∏"
    )
    
    if not success:
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –ø–µ—Ä–µ–∫–∞–∑ –≤—ñ–¥'—î–º–Ω–æ—ó —Å—É–º–∏: {message}")
    else:
        print("‚ùå –ü–µ—Ä–µ–∫–∞–∑ –≤—ñ–¥'—î–º–Ω–æ—ó —Å—É–º–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ!")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–∞–∑—É –º—ñ–∂ —Ä–∞—Ö—É–Ω–∫–∞–º–∏")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –ø–µ—Ä–µ–∫–∞–∑—É
        test_transfer_logic()
        
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        test_transfer_validation()
        
        print(f"\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"\nüí° –í–∞–∂–ª–∏–≤–æ: –£ –Ω–æ–≤—ñ–π –≤–µ—Ä—Å—ñ—ó –±–æ—Ç—É —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –∑ —Å—É–º–∞–º–∏ –≤–∏–¥–∞–ª–µ–Ω–æ,")
        print(f"   —Ç–µ–ø–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –≤–≤–æ–¥–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å—É–º–∏ –≤—Ä—É—á–Ω—É.")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
