#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤ —Ç–∞ –ø—Ä–∏–≤'—è–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
"""

from sqlalchemy.orm import sessionmaker
from database.config import DATABASE_URL
from database.models import User, Account, Transaction
from sqlalchemy import create_engine

def create_session():
    """–°—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    engine_test = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine_test)
    return Session()

def test_accounts():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –ø—Ä–∏–≤'—è–∑–∫–æ—é"""
    session = create_session()
    
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = session.query(User).filter_by(telegram_id=580683833).first()
        if not user:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} {user.last_name}")
        print(f"   Telegram ID: {user.telegram_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏
        accounts = session.query(Account).filter_by(user_id=user.id).all()
        print(f"\nüí≥ –†–∞—Ö—É–Ω–∫—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(accounts)}")
        
        for account in accounts:
            print(f"   {account.icon} {account.name}")
            print(f"      –¢–∏–ø: {account.account_type.value}")
            print(f"      –ë–∞–ª–∞–Ω—Å: {account.balance:.2f} {account.currency}")
            print(f"      –ì–æ–ª–æ–≤–Ω–∏–π: {'–¢–∞–∫' if account.is_main else '–ù—ñ'}")
            print()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –ø—Ä–∏–≤'—è–∑–∫–æ—é –¥–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤
        transactions_with_accounts = session.query(Transaction).filter(
            Transaction.user_id == user.id,
            Transaction.account_id.isnot(None)
        ).count()
        
        total_transactions = session.query(Transaction).filter_by(user_id=user.id).count()
        
        print(f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤—Å—å–æ–≥–æ: {total_transactions}")
        print(f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏: {transactions_with_accounts}")
        print(f"üí∞ –ü–æ–∫—Ä–∏—Ç—Ç—è —Ä–∞—Ö—É–Ω–∫–∞–º–∏: {(transactions_with_accounts/total_transactions*100):.1f}%")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        print(f"\nüîç –ü—Ä–∏–∫–ª–∞–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏:")
        sample_transactions = session.query(Transaction).filter(
            Transaction.user_id == user.id,
            Transaction.account_id.isnot(None)
        ).limit(5).all()
        
        for transaction in sample_transactions:
            account = session.query(Account).filter_by(id=transaction.account_id).first()
            print(f"   {transaction.amount:.2f} UAH - {transaction.description}")
            print(f"      –†–∞—Ö—É–Ω–æ–∫: {account.icon} {account.name}")
            print(f"      –î–∞—Ç–∞: {transaction.transaction_date.strftime('%d.%m.%Y %H:%M')}")
            print()
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        session.close()

if __name__ == "__main__":
    test_accounts()
