#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –¢–∞–≤—Ä—ñ—è –í
"""

import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(__file__))

from services.tavria_receipt_parser import TavriaReceiptParser

def demo_ml_categorization():
    """–î–µ–º–æ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤"""
    parser = TavriaReceiptParser()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –∑ —á–µ–∫—ñ–≤ –¢–∞–≤—Ä—ñ—è –í
    test_products = [
        "–∫–æ–Ω—å—è–∫ —Ç–∞–≤—Ä—ñ—è –ø—Ä–µ–º—ñ–∑–º 0.5–ª",
        "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –∑—ñ—Ä–∫–∞ –≥—Ä–µ—á–∞–Ω–∞ 900–≥", 
        "–∫–∞—à–∞ –æ–±—Å—è–Ω–æ—á–∫–∞ 450–≥ –∞—Å–æ—Ä—Ç—ñ",
        "–ø–∏–≤–æ –º–µ–∫–ª–µ–Ω–±—É—Ä–≥–µ—Ä 0.5–ª",
        "–∫–æ—Ä–æ–Ω–∞ –µ–∫—Å—Ç—Ä–∞ 0.33–ª —Å–∫–ª",
        "–≤–æ–¥–∞ –º–æ—Ä—à–∏–Ω—Å—å–∫–∞ —Å–ø–æ—Ä—Ç 0.7–ª –±/–≥–∞–∑",
        "—á–∏–ø—Å–∏ –º'—è—Å–Ω–∞ –ø–∞—Ç–µ–ª—å–Ω—è 3–≥—Ä–∏",
        "–±—ñ—Ñ—ñ–¥–æ–π–æ–≥—É—Ä—Ç –∞–∫—Ç–∏–≤—ñ–∞ 2.2% –º–∞–Ω–≥–æ-–ø–µ—Ä—Å–∏–∫",
        "–º–æ—Ä–æ–∑–∏–≤–æ —Ç—Ä–∏ –≤–µ–¥–º–µ–¥—ñ monaco –µ—Å–∫—ñ–º–æ",
        "—Å–º–µ—Ç–∞–Ω–∞ —Å–ª–∞–≤—ñ—è 15% 350–≥",
        "–∫–æ—Ä–∂—ñ –¥–ª—è —Ç–æ—Ä—Ç–∞ merci 500–≥"
    ]
    
    print("üß† –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø ML –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–Ü–á –¢–û–í–ê–†–Ü–í –¢–ê–í–†–Ü–Ø –í\n")
    print(f"{'–¢–æ–≤–∞—Ä':<50} {'–ö–∞—Ç–µ–≥–æ—Ä—ñ—è':<20}")
    print("="*70)
    
    for product in test_products:
        category = parser._guess_category(product)
        emoji_map = {
            '–Ω–∞–ø–æ—ó': 'ü•§',
            '–∞–ª–∫–æ–≥–æ–ª—å': 'üç∫', 
            '–º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏': 'ü•õ',
            '–∫—Ä—É–ø–∏ —Ç–∞ –∫–∞—à—ñ': 'üåæ',
            '–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫—ñ –≤–∏—Ä–æ–±–∏': 'üç∞',
            '—Å–Ω–µ–∫–∏': 'üçø',
            '—Ö–ª—ñ–± —Ç–∞ –≤–∏–ø—ñ—á–∫–∞': 'üçû',
            '–ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è': 'üçΩÔ∏è',
            '—ñ–Ω—à–µ': 'üì¶'
        }
        emoji = emoji_map.get(category, 'üì¶')
        print(f"{product:<50} {emoji} {category}")
    
    print("\n" + "="*70)
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–Ü–ô:")
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    category_counts = {}
    for product in test_products:
        category = parser._guess_category(product)
        category_counts[category] = category_counts.get(category, 0) + 1
    
    for category, count in sorted(category_counts.items()):
        emoji = emoji_map.get(category, 'üì¶')
        print(f"  {emoji} {category}: {count} —Ç–æ–≤–∞—Ä—ñ–≤")
    
    print(f"\n‚úÖ –ó–∞–≥–∞–ª–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {len(test_products)} —Ç–æ–≤–∞—Ä—ñ–≤")
    print(f"üìÇ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(category_counts)}")

def demo_receipt_processing():
    """–î–µ–º–æ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞"""
    parser = TavriaReceiptParser()
    
    print("\n\nüßæ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ö–ò –†–ï–ê–õ–¨–ù–û–ì–û –ß–ï–ö–ê\n")
    
    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —á–µ–∫ –¥–ª—è –¥–µ–º–æ
    receipts_dir = "/Users/abobina/telegram_bot/FinAssistAI-bot/uploads/receipts"
    receipt_files = [f for f in os.listdir(receipts_dir) if f.endswith(('.jpg', '.jpeg', '.png'))]
    
    if not receipt_files:
        print("‚ùå –ß–µ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à –ø–æ–≤–Ω–∏–π —á–µ–∫ (–¥—Ä—É–≥–∏–π)
    receipt_path = os.path.join(receipts_dir, receipt_files[1])
    print(f"üìÑ –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ–∫: {receipt_files[1]}")
    
    result = parser.parse_receipt(receipt_path)
    
    if not result:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–µ–∫")
        return
    
    print(f"\nüè™ –ú–∞–≥–∞–∑–∏–Ω: {result['store_name']}")
    print(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {result['total_amount']:.2f} –≥—Ä–Ω")
    print(f"üì¶ –¢–æ–≤–∞—Ä—ñ–≤: {len(result['items'])}")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(result['categorized_items'])}")
    
    print(f"\nüìä –†–û–ó–ü–û–î–Ü–õ –ü–û –ö–ê–¢–ï–ì–û–†–Ü–Ø–•:")
    
    emoji_map = {
        '–Ω–∞–ø–æ—ó': 'ü•§',
        '–∞–ª–∫–æ–≥–æ–ª—å': 'üç∫', 
        '–º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏': 'ü•õ',
        '–∫—Ä—É–ø–∏ —Ç–∞ –∫–∞—à—ñ': 'üåæ',
        '–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫—ñ –≤–∏—Ä–æ–±–∏': 'üç∞',
        '—Å–Ω–µ–∫–∏': 'üçø',
        '—Ö–ª—ñ–± —Ç–∞ –≤–∏–ø—ñ—á–∫–∞': 'üçû',
        '–ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è': 'üçΩÔ∏è',
        '—ñ–Ω—à–µ': 'üì¶'
    }
    
    for category, data in result['categorized_items'].items():
        emoji = emoji_map.get(category, 'üì¶')
        percentage = (data['total_amount'] / result['total_amount']) * 100
        print(f"  {emoji} {category.title()}: {data['total_amount']:.2f} –≥—Ä–Ω ({percentage:.1f}%)")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        for item in data['items'][:2]:  # –ü–µ—Ä—à—ñ 2 —Ç–æ–≤–∞—Ä–∏
            print(f"    ‚Ä¢ {item['name']}: {item['price']:.2f} –≥—Ä–Ω")
    
    print(f"\nüí° –í–ò–°–ù–û–í–ö–ò:")
    print(f"  ‚Ä¢ –ù–∞–π–±—ñ–ª—å—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {max(result['categorized_items'].items(), key=lambda x: x[1]['total_amount'])[0]}")
    print(f"  ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É: {result['total_amount']/len(result['items']):.2f} –≥—Ä–Ω")
    print(f"  ‚Ä¢ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: —É—Å–ø—ñ—à–Ω–µ ‚úÖ")

if __name__ == "__main__":
    demo_ml_categorization()
    demo_receipt_processing()
