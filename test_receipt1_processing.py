#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ–∫–∞ test_receipt1.png
"""

import sys
import os
import logging
import json

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.receipt_processor_enhanced import EnhancedReceiptProcessor

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_receipt1_processing():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ test_receipt1.png"""
    
    processor = EnhancedReceiptProcessor()
    
    print("=== –¢–ï–°–¢ –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –ß–ï–ö–ê test_receipt1.png ===")
    
    # –®–ª—è—Ö –¥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–µ–∫–∞
    receipt_image_path = "/Users/abobina/telegram_bot/FinAssistAI-bot/test_receipt1.png"
    
    if not os.path.exists(receipt_image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {receipt_image_path}")
        return
    
    print(f"üìÑ –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–∞–π–ª: {receipt_image_path}")
    
    try:
        # –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ–∫
        result = processor.process_receipt_image(receipt_image_path)
        
        print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–ò –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø ===")
        print(f"üìÖ –î–∞—Ç–∞: {result.get('date', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}")
        print(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {result.get('total_amount', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}")
        print(f"üè™ –ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É: {result.get('store_name', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}")
        
        items = result.get('items', [])
        print(f"\nüõí –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(items)}")
        
        if items:
            print("\n--- –°–ü–ò–°–û–ö –¢–û–í–ê–†–Ü–í ---")
            for i, item in enumerate(items, 1):
                name = item.get('name', '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞')
                price = item.get('price', '–ù–µ–≤—ñ–¥–æ–º–∞ —Ü—ñ–Ω–∞')
                quantity = item.get('quantity', 1)
                print(f"{i}. {name}")
                print(f"   –¶—ñ–Ω–∞: {price}")
                print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}")
                print()
        else:
            print("‚ùå –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        raw_text = result.get('raw_text', '')
        if raw_text:
            print("\n=== –°–ò–†–ò–ô –¢–ï–ö–°–¢ –ó OCR ===")
            print(raw_text)
            print("=" * 50)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        output_file = "/Users/abobina/telegram_bot/FinAssistAI-bot/test_receipt1_result.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: {output_file}")
        
        # –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        print("\n=== –ê–ù–ê–õ–Ü–ó –Ø–ö–û–°–¢–Ü ===")
        if result.get('date'):
            print("‚úÖ –î–∞—Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
        else:
            print("‚ùå –î–∞—Ç–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
            
        if result.get('total_amount'):
            print("‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
        else:
            print("‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
            
        if items:
            print(f"‚úÖ –¢–æ–≤–∞—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ ({len(items)} —à—Ç.)")
        else:
            print("‚ùå –¢–æ–≤–∞—Ä–∏ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ")
            
        if result.get('store_name'):
            print("‚úÖ –ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
        else:
            print("‚ùå –ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —á–µ–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_receipt1_processing()
