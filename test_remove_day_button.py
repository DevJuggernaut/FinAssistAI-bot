#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ –∫–Ω–æ–ø–∫–∞ "–î–µ–Ω—å" –ø—Ä–∏–±—Ä–∞–Ω–∞ –∑ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
"""

import sys
import os
sys.path.insert(0, os.path.abspath('.'))

from handlers.analytics_handler import show_chart_period_selection
from unittest.mock import AsyncMock, MagicMock


async def test_day_button_removed():
    """–¢–µ—Å—Ç—É—î–º–æ, —â–æ –∫–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' –ø—Ä–∏–±—Ä–∞–Ω–∞ –∑ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
    query = AsyncMock()
    context = MagicMock()
    
    # –ú–æ–∫–∞—î–º–æ edit_message_text –¥–ª—è –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    def capture_keyboard(text, reply_markup, parse_mode=None):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        capture_keyboard.last_keyboard = reply_markup.inline_keyboard
        return AsyncMock()
    
    query.edit_message_text = capture_keyboard
    query.data = "chart_period_pie_expenses"
    
    # –ú–æ–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    query.from_user.id = 12345
    
    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
        await show_chart_period_selection(query, context, "pie", "expenses")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = capture_keyboard.last_keyboard
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ç–µ–∫—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫
        button_texts = []
        for row in keyboard:
            for button in row:
                button_texts.append(button.text)
        
        print("üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é:")
        for text in button_texts:
            print(f"  - {text}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–Ω–æ–ø–∫–∏ "–î–µ–Ω—å" –Ω–µ–º–∞—î
        day_buttons = [text for text in button_texts if "–î–µ–Ω—å" in text]
        
        if day_buttons:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ –∑ '–î–µ–Ω—å': {day_buttons}")
            return False
        else:
            print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–±—Ä–∞–Ω–∞")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Ç—ñ–ª—å–∫–∏ "–ú—ñ—Å—è—Ü—å" —ñ "–¢–∏–∂–¥–µ–Ω—å"
        period_buttons = [text for text in button_texts if any(period in text for period in ["–ú—ñ—Å—è—Ü—å", "–¢–∏–∂–¥–µ–Ω—å"])]
        
        if len(period_buttons) == 2:
            print(f"‚úÖ –£–°–ü–Ü–•: –ó–∞–ª–∏—à–∏–ª–æ—Å—å 2 –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä—ñ–æ–¥—É: {period_buttons}")
        else:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä—ñ–æ–¥—É: {period_buttons}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


async def test_both_chart_types():
    """–¢–µ—Å—Ç—É—î–º–æ –æ–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (pie —ñ bar)"""
    
    print("üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –¥–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º...")
    result_pie = await test_day_button_removed()
    
    print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –¥—ñ–∞–≥—Ä–∞–º...")
    
    # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –¥—ñ–∞–≥—Ä–∞–º–∏
    query = AsyncMock()
    context = MagicMock()
    
    def capture_keyboard(text, reply_markup, parse_mode=None):
        capture_keyboard.last_keyboard = reply_markup.inline_keyboard
        capture_keyboard.last_text = text
        return AsyncMock()
    
    query.edit_message_text = capture_keyboard
    query.data = "chart_period_bar_expenses"
    query.from_user.id = 12345
    
    try:
        await show_chart_period_selection(query, context, "bar", "expenses")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç (—á–∏ –Ω–µ –∑–≥–∞–¥—É—î—Ç—å—Å—è "–î–µ–Ω—å")
        text = capture_keyboard.last_text
        if "–î–µ–Ω—å" in text:
            print("‚ùå –ü–û–ú–ò–õ–ö–ê: –¢–µ–∫—Å—Ç –≤—Å–µ —â–µ –º—ñ—Å—Ç–∏—Ç—å –∑–≥–∞–¥–∫—É –ø—Ä–æ '–î–µ–Ω—å'")
            print(f"–ü—Ä–æ–±–ª–µ–º–Ω–∏–π —Ç–µ–∫—Å—Ç: {text}")
            return False
        else:
            print("‚úÖ –£–°–ü–Ü–•: –¢–µ–∫—Å—Ç –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–≥–∞–¥–æ–∫ –ø—Ä–æ '–î–µ–Ω—å'")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = capture_keyboard.last_keyboard
        button_texts = []
        for row in keyboard:
            for button in row:
                button_texts.append(button.text)
        
        day_buttons = [text for text in button_texts if "–î–µ–Ω—å" in text]
        if day_buttons:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ –∑ '–î–µ–Ω—å' —É —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –¥—ñ–∞–≥—Ä–∞–º–∞—Ö: {day_buttons}")
            return False
        else:
            print("‚úÖ –£–°–ü–Ü–•: –ö–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' –ø—Ä–∏–±—Ä–∞–Ω–∞ –∑—ñ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –¥—ñ–∞–≥—Ä–∞–º")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {str(e)}")
        return False


if __name__ == "__main__":
    import asyncio
    
    async def main():
        print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–î–µ–Ω—å' –∑ –º–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤\n")
        
        result1 = await test_day_button_removed()
        result2 = await test_both_chart_types()
        
        print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"  –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if result1 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
        print(f"  –°—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –¥—ñ–∞–≥—Ä–∞–º–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if result2 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
        
        if result1 and result2:
            print(f"\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ö–Ω–æ–ø–∫–∞ '–î–µ–Ω—å' —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–±—Ä–∞–Ω–∞.")
        else:
            print(f"\nüí• –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")

    asyncio.run(main())
