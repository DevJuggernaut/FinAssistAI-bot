#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è FinAssistAI –±–æ—Ç–∞
# –í–∏–∫–æ–Ω—É—î: 1) –û—á–∏—â–µ–Ω–Ω—è –ë–î, 2) –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö, 3) –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

set -e  # –ó—É–ø–∏–Ω–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à—ñ–π –ø–æ–º–∏–ª—Ü—ñ

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
check_environment() {
    print_step "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è..."
    
    if [ ! -f ".env" ]; then
        print_error "–§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        echo "–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏:"
        echo "  DB_USER=abobina"
        echo "  DB_PASSWORD=2323"
        echo "  DB_HOST=localhost"
        echo "  DB_PORT=5432"
        echo "  DB_NAME=finance_bot"
        echo "  TELEGRAM_TOKEN=your_token"
        echo "  OPENAI_API_KEY=your_key"
        exit 1
    fi
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
    source .env
    
    if [ -z "$DB_NAME" ]; then
        DB_NAME="finance_bot"
    fi
    
    print_success "–ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
check_dependencies() {
    print_step "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PostgreSQL
    if ! command -v psql &> /dev/null; then
        print_error "PostgreSQL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å PostgreSQL: brew install postgresql"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python3 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pip –ø–∞–∫–µ—Ç—ñ–≤
    if ! python3 -c "import sqlalchemy, psycopg2, python_dotenv" 2>/dev/null; then
        print_warning "–ù–µ –≤—Å—ñ Python –ø–∞–∫–µ—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤–ª—é—é..."
        pip3 install sqlalchemy psycopg2-binary python-dotenv
    fi
    
    print_success "–í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
check_database_connection() {
    print_step "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è URL –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    DB_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
    
    # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ psql
    if ! PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 1;" &> /dev/null; then
        print_error "–ù–µ –≤–¥–∞—î—Ç—å—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!"
        echo "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ .env —Ñ–∞–π–ª—ñ"
        echo "URL: $DB_URL"
        exit 1
    fi
    
    print_success "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
clean_database() {
    print_step "–û—á–∏—â–∞—é –±–∞–∑—É –¥–∞–Ω–∏—Ö..."
    
    if [ ! -f "clean_database.sql" ]; then
        print_error "–§–∞–π–ª clean_database.sql –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL —Å–∫—Ä–∏–ø—Ç–∞
    PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -f clean_database.sql -q
    
    if [ $? -eq 0 ]; then
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ—á–∏—â–µ–Ω–∞"
    else
        print_error "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
        exit 1
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
generate_test_data() {
    print_step "–ì–µ–Ω–µ—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ..."
    
    if [ ! -f "generate_test_data.py" ]; then
        print_error "–§–∞–π–ª generate_test_data.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ Python —Å–∫—Ä–∏–ø—Ç–∞
    python3 generate_test_data.py
    
    if [ $? -eq 0 ]; then
        print_success "–¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ"
    else
        print_error "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start_bot() {
    print_step "–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç..."
    
    if [ ! -f "bot.py" ]; then
        print_error "–§–∞–π–ª bot.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
    
    echo ""
    echo "=================================="
    echo "ü§ñ FinAssistAI Bot –∑–∞–ø—É—â–µ–Ω–æ!"
    echo "=================================="
    echo "–¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @maskofmadnesss (ID: 580683833)"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
    echo "‚Ä¢ /start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏"
    echo "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    echo "‚Ä¢ /budget - –±—é–¥–∂–µ—Ç"
    echo "‚Ä¢ /help - –¥–æ–ø–æ–º–æ–≥–∞"
    echo ""
    echo "–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C"
    echo "=================================="
    echo ""
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    python3 bot.py
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –¥–æ–ø–æ–º–æ–≥–∏
show_help() {
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [–û–ü–¶–Ü–Ø]"
    echo ""
    echo "–û–ø—Ü—ñ—ó:"
    echo "  -h, --help          –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É"
    echo "  -c, --clean-only    –¢—ñ–ª—å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö"
    echo "  -g, --generate-only –¢—ñ–ª—å–∫–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ"
    echo "  -s, --start-only    –¢—ñ–ª—å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    echo "  --skip-clean        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –ë–î"
    echo "  --skip-generate     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö"
    echo ""
    echo "–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –≤—Å—ñ –∫—Ä–æ–∫–∏: –æ—á–∏—â–µ–Ω–Ω—è -> –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è -> –∑–∞–ø—É—Å–∫"
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo "========================================"
    echo "üöÄ FinAssistAI Bot Testing Script"
    echo "========================================"
    echo ""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    CLEAN_ONLY=false
    GENERATE_ONLY=false
    START_ONLY=false
    SKIP_CLEAN=false
    SKIP_GENERATE=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -c|--clean-only)
                CLEAN_ONLY=true
                shift
                ;;
            -g|--generate-only)
                GENERATE_ONLY=true
                shift
                ;;
            -s|--start-only)
                START_ONLY=true
                shift
                ;;
            --skip-clean)
                SKIP_CLEAN=true
                shift
                ;;
            --skip-generate)
                SKIP_GENERATE=true
                shift
                ;;
            *)
                print_error "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    check_environment
    check_dependencies
    check_database_connection
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤
    if [ "$CLEAN_ONLY" = true ]; then
        clean_database
        print_success "–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        exit 0
    fi
    
    if [ "$GENERATE_ONLY" = true ]; then
        generate_test_data
        print_success "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        exit 0
    fi
    
    if [ "$START_ONLY" = true ]; then
        start_bot
        exit 0
    fi
    
    # –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    if [ "$SKIP_CLEAN" = false ]; then
        clean_database
    else
        print_warning "–û—á–∏—â–µ–Ω–Ω—è –ë–î –ø—Ä–æ–ø—É—â–µ–Ω–æ"
    fi
    
    if [ "$SKIP_GENERATE" = false ]; then
        generate_test_data
    else
        print_warning "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞"
    fi
    
    echo ""
    print_success "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç..."
    sleep 2
    
    start_bot
}

# –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
trap 'echo -e "\n\n${YELLOW}[INFO]${NC} –ó—É–ø–∏–Ω–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞..."; exit 0' INT TERM

# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
main "$@"
