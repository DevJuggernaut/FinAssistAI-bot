#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–ª—ñ–ø—à–µ–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ PDF –º–æ–Ω–æ–±–∞–Ω–∫—É –∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—î—é
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def demo_improved_parser():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –ø–æ–ª—ñ–ø—à–µ–Ω–∏–π –ø–∞—Ä—Å–µ—Ä"""
    
    print("üè¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–ª—ñ–ø—à–µ–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ PDF –º–æ–Ω–æ–±–∞–Ω–∫—É")
    print("=" * 55)
    
    # –Ü–º—ñ—Ç—É—î–º–æ —Ç–∏–ø–æ–≤—ñ –¥–∞–Ω—ñ –∑ PDF –º–æ–Ω–æ–±–∞–Ω–∫—É
    mock_transactions = [
        {
            'date': '2025-06-19',
            'amount': 685.33,
            'description': '–ê–¢–ë –ú–ê–†–ö–ï–¢',
            'type': 'expense'
        },
        {
            'date': '2025-06-17', 
            'amount': 800.00,
            'description': '–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É',
            'type': 'income'
        },
        {
            'date': '2025-06-11',
            'amount': 350.00,
            'description': 'UBER UKRAINE',
            'type': 'expense'
        },
        {
            'date': '2025-06-01',
            'amount': 434.72,
            'description': 'Rozetka',
            'type': 'expense'
        },
        {
            'date': '2025-05-16',
            'amount': 1091.00,
            'description': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
            'type': 'income'
        },
        {
            'date': '2025-05-03',
            'amount': 299.00,
            'description': 'Netflix',
            'type': 'expense'
        },
        {
            'date': '2025-05-03',
            'amount': 339.00,
            'description': '–ö–∏—ó–≤–°—Ç–∞—Ä',
            'type': 'expense'
        },
        {
            'date': '2025-05-03',
            'amount': 258.00,
            'description': 'WOG',
            'type': 'expense'
        },
        {
            'date': '2025-05-02',
            'amount': 195.80,
            'description': '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è',  # –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å
            'type': 'expense'
        },
        {
            'date': '2025-05-01',
            'amount': 349.00,
            'description': '–ö–µ—à–±–µ–∫',
            'type': 'income'
        }
    ]
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä
    from services.ml_categorizer import transaction_categorizer
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
    print("-" * 50)
    
    for i, trans in enumerate(mock_transactions, 1):
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        category = transaction_categorizer.suggest_category_for_bank_statement(
            trans['description'], 
            trans['type']
        )
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        type_emoji = "üí∏" if trans['type'] == 'expense' else "üí∞"
        sign = "-" if trans['type'] == 'expense' else "+"
        
        print(f"{i:2d}. {type_emoji} {sign}{trans['amount']:,.2f} ‚Ç¥")
        print(f"    üìÖ {trans['date']} ‚Ä¢ üìù {trans['description']}")
        print(f"    üè∑Ô∏è {category['icon']} {category['name']}")
        print()
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("‚Ä¢ –û–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–µ–ø–µ—Ä –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–æ–∑–ø—ñ–∑–Ω–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–ø–∏—Å—É")
    print("‚Ä¢ –ù–∞–≤—ñ—Ç—å –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –æ–ø–∏—Å—ñ–≤ ('–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è') —î –∫–∞—Ç–µ–≥–æ—Ä—ñ—è '–Ü–Ω—à–µ'")
    print("‚Ä¢ –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –º–∞–≥–∞–∑–∏–Ω—ñ–≤, —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Ç–∞ –ø–æ—Å–ª—É–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

if __name__ == "__main__":
    demo_improved_parser()
