#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –≥—Ä–∞—Ñ—ñ–∫–∏)
"""

import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath('.'))

from unittest.mock import MagicMock, AsyncMock
from handlers.analytics_handler import show_analytics_main_menu, show_analytics_detailed, show_analytics_charts
from database.models import User, Transaction, Category, TransactionType
from datetime import datetime, timedelta

# –ú–æ–∫ –æ–±'—î–∫—Ç–∏
class MockQuery:
    def __init__(self, user_id=12345):
        self.from_user = MagicMock()
        self.from_user.id = user_id
        self.edit_message_text = AsyncMock()

class MockContext:
    def __init__(self):
        pass

async def test_analytics_menu():
    """–¢–µ—Å—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    print("üß™ –¢–ï–°–¢: –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")
    print("=" * 50)
    
    query = MockQuery()
    context = MockContext()
    
    # –ú–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    mock_user = User(id=12345, telegram_id=12345, username="testuser")
    
    # –ü–∞—Ç—á–∏–º–æ get_user
    import handlers.analytics_handler
    original_get_user = handlers.analytics_handler.get_user
    handlers.analytics_handler.get_user = lambda user_id: mock_user
    
    try:
        await show_analytics_main_menu(query, context)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ edit_message_text
        assert query.edit_message_text.called, "–ú–µ—Ç–æ–¥ edit_message_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∏–∫–ª–∏–∫—É
        call_args = query.edit_message_text.call_args
        text = call_args[1]['text']  # kwargs['text']
        
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        print("üìù –¢–µ–∫—Å—Ç –º–µ–Ω—é:")
        print(text[:200] + "..." if len(text) > 200 else text)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Ñ—Ä–∞–∑–∏
        assert "üìä **–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏**" in text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        assert "–ì—Ä–∞—Ñ—ñ–∫–∏" in text, "–†–æ–∑–¥—ñ–ª '–ì—Ä–∞—Ñ—ñ–∫–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        assert "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in text, "–†–æ–∑–¥—ñ–ª '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        
        print("‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")
    finally:
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        handlers.analytics_handler.get_user = original_get_user

async def test_analytics_statistics():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüß™ –¢–ï–°–¢: –ù–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("=" * 50)
    
    query = MockQuery()
    context = MockContext()
    
    # –ú–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    mock_user = User(id=12345, telegram_id=12345, username="testuser")
    
    # –ú–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó - –≤–∏–¥–∞–ª—è—î–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –≤ –Ω–æ–≤–æ–º—É –∫–æ–¥—ñ
    
    # –ú–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤)
    now = datetime.now()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏ –∑–∞–º—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
    class MockTransaction:
        def __init__(self, amount, type, description, category=None, date=None):
            self.amount = amount
            self.type = type
            self.description = description
            self.category = category
            self.date = date or now
    
    class MockCategory:
        def __init__(self, name, icon="üí∞"):
            self.name = name
            self.icon = icon
    
    food_cat = MockCategory("–á–∂–∞ —Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", "üçΩÔ∏è")
    transport_cat = MockCategory("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üöó")
    
    mock_transactions = [
        # –î–æ—Ö–æ–¥–∏
        MockTransaction(15000, TransactionType.INCOME, "–ó–∞—Ä–ø–ª–∞—Ç–∞", date=now - timedelta(days=1)),
        # –í–∏—Ç—Ä–∞—Ç–∏
        MockTransaction(4200, TransactionType.EXPENSE, "–á–∂–∞", food_cat, now - timedelta(days=2)),
        MockTransaction(3000, TransactionType.EXPENSE, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", transport_cat, now - timedelta(days=3)),
        MockTransaction(2500, TransactionType.EXPENSE, "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", date=now - timedelta(days=5)),
        MockTransaction(2800, TransactionType.EXPENSE, "–Ü–Ω—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏", date=now - timedelta(days=10)),
    ]
    
    # –ú–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É (–¥–ª—è —Ç—Ä–µ–Ω–¥—É)
    prev_transactions = [
        MockTransaction(13300, TransactionType.EXPENSE, "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏", date=now - timedelta(days=40)),
    ]
    
    # –ü–∞—Ç—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    import handlers.analytics_handler
    original_get_user = handlers.analytics_handler.get_user
    original_get_user_transactions = handlers.analytics_handler.get_user_transactions
    
    def mock_get_user_transactions(user_id, start_date=None, end_date=None):
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—ñ–∑–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–µ—Ä—ñ–æ–¥—É
        if start_date and start_date < now - timedelta(days=35):
            return prev_transactions
        return mock_transactions
    
    handlers.analytics_handler.get_user = lambda user_id: mock_user
    handlers.analytics_handler.get_user_transactions = mock_get_user_transactions
    
    try:
        await show_analytics_detailed(query, context)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ edit_message_text
        assert query.edit_message_text.called, "–ú–µ—Ç–æ–¥ edit_message_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∏–∫–ª–∏–∫—É
        call_args = query.edit_message_text.call_args
        text = call_args[1]['text']  # kwargs['text']
        
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        print("üìä –ó—Ä–∞–∑–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        print(text[:400] + "..." if len(text) > 400 else text)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        assert "üìà **–í–∞—à–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**" in text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        assert "–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏" in text, "–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
        assert "–ê–Ω–∞–ª—ñ–∑ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å" in text, "–ê–Ω–∞–ª—ñ–∑ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
        assert "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∞—Ç" in text, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
        assert "–¢—Ä–µ–Ω–¥ –≤–∏—Ç—Ä–∞—Ç" in text, "–¢—Ä–µ–Ω–¥ –≤–∏—Ç—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
        assert "—Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏" in text, "–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
        
        print("‚úÖ –í—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        handlers.analytics_handler.get_user = original_get_user
        handlers.analytics_handler.get_user_transactions = original_get_user_transactions

async def test_analytics_charts():
    """–¢–µ—Å—Ç –º–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    print("\nüß™ –¢–ï–°–¢: –ú–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
    print("=" * 50)
    
    query = MockQuery()
    context = MockContext()
    
    try:
        await show_analytics_charts(query, context)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ edit_message_text
        assert query.edit_message_text.called, "–ú–µ—Ç–æ–¥ edit_message_text –Ω–µ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∏–∫–ª–∏–∫—É
        call_args = query.edit_message_text.call_args
        text = call_args[1]['text']  # kwargs['text']
        
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        print("üìä –ú–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤:")
        print(text[:300] + "..." if len(text) > 300 else text)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        assert "üìä **–ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏**" in text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        assert "–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞" in text, "–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
        assert "–°—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫" in text, "–°—Ç–æ–≤–ø—á–∞—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
        
        print("‚úÖ –í—Å—ñ —Ç–∏–ø–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—Ä–∏—Å—É—Ç–Ω—ñ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–û–í–û–á –ê–ù–ê–õ–Ü–¢–ò–ö–ò")
    print("=" * 60)
    
    await test_analytics_menu()
    await test_analytics_statistics()
    await test_analytics_charts()
    
    print("\n" + "=" * 60)
    print("üéä –í–°–Ü –¢–ï–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–Ü!")
    print("‚úÖ –ù–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø—Ä–∞—Ü—é—î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—É—î –∫–æ—Ä–∏—Å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏")
    print("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ —Å–ø—Ä–æ—â–µ–Ω—ñ –¥–æ 2 —Ç–∏–ø—ñ–≤")
    print("üéØ UX –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

if __name__ == "__main__":
    asyncio.run(main())
