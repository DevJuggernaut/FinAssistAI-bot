#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —É –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É
"""

import asyncio
import logging
from unittest.mock import Mock, AsyncMock, patch

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_back_button_navigation():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —É –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É"""
    try:
        print("=== –¢–µ—Å—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —É –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É ===")
        
        from handlers.analytics_handler import show_chart_period_selection
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        
        # –¢–µ—Å—Ç –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        print("\nüìä –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –≥—Ä–∞—Ñ—ñ–∫–∏...")
        
        # –ú–æ–∫–∞—î–º–æ query
        query_bar = Mock()
        query_bar.edit_message_text = AsyncMock()
        context_bar = Mock()
        context_bar.user_data = {}  # –î–æ–¥–∞—î–º–æ user_data —è–∫ —Å–ª–æ–≤–Ω–∏–∫
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
        await show_chart_period_selection(query_bar, context_bar, "bar", "comparison")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞
        query_bar.edit_message_text.assert_called_once()
        call_args = query_bar.edit_message_text.call_args
        
        # –û—Ç—Ä–∏–º—É—î–º–æ reply_markup
        reply_markup = call_args.kwargs.get('reply_markup')
        if reply_markup:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫
            keyboard = reply_markup.inline_keyboard
            
            # –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ 2 —Ä—è–¥–∫–∏: [–ú—ñ—Å—è—Ü—å, –¢–∏–∂–¥–µ–Ω—å] —Ç–∞ [–î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤]
            assert len(keyboard) == 2, f"–û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 2 —Ä—è–¥–∫–∏ –∫–Ω–æ–ø–æ–∫, –æ—Ç—Ä–∏–º–∞–Ω–æ {len(keyboard)}"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ (–ú—ñ—Å—è—Ü—å, –¢–∏–∂–¥–µ–Ω—å)
            first_row = keyboard[0]
            assert len(first_row) == 2, "–ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 2 –∫–Ω–æ–ø–∫–∏"
            
            month_button = first_row[0]
            week_button = first_row[1]
            assert "–ú—ñ—Å—è—Ü—å" in month_button.text, "–ü–µ—Ä—à–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ '–ú—ñ—Å—è—Ü—å'"
            assert "–¢–∏–∂–¥–µ–Ω—å" in week_button.text, "–î—Ä—É–≥–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ '–¢–∏–∂–¥–µ–Ω—å'"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ (–ù–∞–∑–∞–¥)
            second_row = keyboard[1]
            assert len(second_row) == 1, "–î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 1 –∫–Ω–æ–ø–∫—É"
            
            back_button = second_row[0]
            assert "–≥—Ä–∞—Ñ—ñ–∫—ñ–≤" in back_button.text.lower(), f"–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ '–≥—Ä–∞—Ñ—ñ–∫—ñ–≤', –æ—Ç—Ä–∏–º–∞–Ω–æ: {back_button.text}"
            assert back_button.callback_data == "analytics_charts", f"Callback –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ 'analytics_charts', –æ—Ç—Ä–∏–º–∞–Ω–æ: {back_button.callback_data}"
            
            print("‚úÖ –°—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –≥—Ä–∞—Ñ—ñ–∫–∏: –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –≤–µ–¥–µ –¥–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
        
        # –¢–µ—Å—Ç –¥–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º
        print("\nüç© –¢–µ—Å—Ç—É—î–º–æ –∫—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏...")
        
        # –ú–æ–∫–∞—î–º–æ query –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
        query_pie = Mock()
        query_pie.edit_message_text = AsyncMock()
        context_pie = Mock()
        context_pie.user_data = {}  # –î–æ–¥–∞—î–º–æ user_data —è–∫ —Å–ª–æ–≤–Ω–∏–∫
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
        await show_chart_period_selection(query_pie, context_pie, "pie", "expenses")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞
        query_pie.edit_message_text.assert_called_once()
        call_args = query_pie.edit_message_text.call_args
        
        # –û—Ç—Ä–∏–º—É—î–º–æ reply_markup
        reply_markup = call_args.kwargs.get('reply_markup')
        if reply_markup:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫
            keyboard = reply_markup.inline_keyboard
            
            # –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ 2 —Ä—è–¥–∫–∏: [–ú—ñ—Å—è—Ü—å, –¢–∏–∂–¥–µ–Ω—å] —Ç–∞ [–î–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö]
            assert len(keyboard) == 2, f"–û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 2 —Ä—è–¥–∫–∏ –∫–Ω–æ–ø–æ–∫, –æ—Ç—Ä–∏–º–∞–Ω–æ {len(keyboard)}"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ (–ù–∞–∑–∞–¥)
            second_row = keyboard[1]
            assert len(second_row) == 1, "–î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 1 –∫–Ω–æ–ø–∫—É"
            
            back_button = second_row[0]
            assert "—Ç–∏–ø—É –¥–∞–Ω–∏—Ö" in back_button.text.lower(), f"–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ '—Ç–∏–ø—É –¥–∞–Ω–∏—Ö', –æ—Ç—Ä–∏–º–∞–Ω–æ: {back_button.text}"
            assert back_button.callback_data == "chart_type_pie", f"Callback –¥–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ 'chart_type_pie', –æ—Ç—Ä–∏–º–∞–Ω–æ: {back_button.callback_data}"
            
            print("‚úÖ –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏: –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –≤–µ–¥–µ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–∞–Ω–∏—Ö")
        
        print("\nüéâ –¢–µ—Å—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        print("üìä –°—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –≥—Ä–∞—Ñ—ñ–∫–∏: –ù–∞–∑–∞–¥ ‚Üí –î–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
        print("üç© –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏: –ù–∞–∑–∞–¥ ‚Üí –î–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'...")
    
    result = await test_back_button_navigation()
    
    if result:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        print("\nüìã –ü—ñ–¥—Å—É–º–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:")
        print("‚Ä¢ –°—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –≥—Ä–∞—Ñ—ñ–∫–∏: chart_type_bar ‚Üí period_selection ‚Üí analytics_charts")
        print("‚Ä¢ –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏: chart_type_pie ‚Üí data_type_selection ‚Üí period_selection ‚Üí chart_type_pie")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤!")

if __name__ == "__main__":
    asyncio.run(main())
