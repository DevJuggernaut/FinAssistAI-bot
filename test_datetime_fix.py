#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∑ datetime
"""

import sys
import os
from datetime import datetime, timedelta

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from handlers.ai_assistant_handler import generate_personal_advice

async def test_fixed_datetime_error():
    """–¢–µ—Å—Ç—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∑ datetime"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è datetime –ø–æ–º–∏–ª–∫–∏...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    class TestUser:
        def __init__(self):
            self.id = 123456
            self.monthly_budget = 15000
            self.currency = "UAH"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç
    test_transactions = [
        {
            'amount': 500.0,
            'category': '–á–∂–∞',
            'type': 'expense',
            'date': '2025-06-20T10:30:00',  # ISO —Ñ–æ—Ä–º–∞—Ç
            'description': '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç'
        },
        {
            'amount': 200.0,
            'category': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
            'type': 'expense',
            'date': '2025-06-18',  # –ü—Ä–æ—Å—Ç–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
            'description': '–ú–µ—Ç—Ä–æ'
        },
        {
            'amount': 25000.0,
            'category': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
            'type': 'income',
            'date': datetime.now().isoformat(),  # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
            'description': '–ú—ñ—Å—è—á–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞'
        }
    ]
    
    user = TestUser()
    
    try:
        advice = await generate_personal_advice(user, test_transactions)
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        print("üìù –û—Ç—Ä–∏–º–∞–Ω–∞ –ø–æ—Ä–∞–¥–∞:")
        print(advice[:200] + "..." if len(advice) > 200 else advice)
        return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤: {e}")
        return False

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(test_fixed_datetime_error())
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£–°–ü–Ü–®–ù–û' if success else '–ü–û–ú–ò–õ–ö–ê'}")
