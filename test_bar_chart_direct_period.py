#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ callback 'chart_type_bar' –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É –∑ —Ç–∏–ø–æ–º "comparison"
"""

import asyncio
import logging
from unittest.mock import Mock, AsyncMock, patch
from telegram import Update, User, Chat, Message, CallbackQuery

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_bar_chart_direct_period():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    try:
        print("=== –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ ===")
        
        from handlers.callback_handler import handle_callback
        from database.db_operations import get_user
        
        # –ú–æ–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        with patch('handlers.callback_handler.get_user') as mock_get_user:
            mock_user = Mock()
            mock_user.id = 12345
            mock_user.username = "test_user"
            mock_get_user.return_value = mock_user
            
            # –ú–æ–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é show_chart_period_selection
            with patch('handlers.callback_handler.show_chart_period_selection') as mock_show_period:
                mock_show_period.return_value = None
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
                user = User(id=12345, is_bot=False, first_name="Test")
                chat = Chat(id=12345, type="private")
                message = Message(
                    message_id=1,
                    from_user=user,
                    date=None,
                    chat=chat
                )
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ callback query
                query = CallbackQuery(
                    id="test_query",
                    from_user=user,
                    chat_instance="test_chat_instance",
                    data="chart_type_bar",
                    message=message
                )
                
                # –ú–æ–∫–∞—î–º–æ answer
                query.answer = AsyncMock()
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ update —ñ context
                update = Update(update_id=1, callback_query=query)
                context = Mock()
                context.user_data = {}
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
                await handle_callback(update, context)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è show_chart_period_selection –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞
                mock_show_period.assert_called_once()
                call_args = mock_show_period.call_args
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∏–∫–ª–∏–∫—É
                assert call_args[0][0] == query  # query
                assert call_args[0][1] == context  # context  
                assert call_args[0][2] == "bar"  # chart_type
                assert call_args[0][3] == "comparison"  # data_type
                
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
                print("‚úÖ –ü—Ä–∏ –≤–∏–±–æ—Ä—ñ —Å—Ç–æ–≤–ø—á–∞—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É")
                print("‚úÖ –¢–∏–ø –¥–∞–Ω–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è —è–∫ 'comparison'")
                
                return True
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_pie_chart_unchanged():
    """–¢–µ—Å—Ç —â–æ –∫—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏ –ø–æ–≤–æ–¥—è—Ç—å—Å—è –ø–æ-—Å—Ç–∞—Ä–æ–º—É (–ø–æ–∫–∞–∑—É—é—Ç—å –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–∞–Ω–∏—Ö)"""
    try:
        print("\n=== –¢–µ—Å—Ç –Ω–µ–∑–º—ñ–Ω–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º ===")
        
        from handlers.callback_handler import handle_callback
        
        # –ú–æ–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        with patch('handlers.callback_handler.get_user') as mock_get_user:
            mock_user = Mock()
            mock_user.id = 12345
            mock_user.username = "test_user"
            mock_get_user.return_value = mock_user
            
            # –ú–æ–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é show_chart_data_type_selection
            with patch('handlers.callback_handler.show_chart_data_type_selection') as mock_show_data_type:
                mock_show_data_type.return_value = None
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –æ–±'—î–∫—Ç–∏
                user = User(id=12345, is_bot=False, first_name="Test")
                chat = Chat(id=12345, type="private")
                message = Message(
                    message_id=1,
                    from_user=user,
                    date=None,
                    chat=chat
                )
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ callback query –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
                query = CallbackQuery(
                    id="test_query",
                    from_user=user,
                    chat_instance="test_chat_instance",
                    data="chart_type_pie",
                    message=message
                )
                
                # –ú–æ–∫–∞—î–º–æ answer
                query.answer = AsyncMock()
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ update —ñ context
                update = Update(update_id=1, callback_query=query)
                context = Mock()
                context.user_data = {}
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
                await handle_callback(update, context)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è show_chart_data_type_selection –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞
                mock_show_data_type.assert_called_once()
                call_args = mock_show_data_type.call_args
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∏–∫–ª–∏–∫—É
                assert call_args[0][0] == query  # query
                assert call_args[0][1] == context  # context  
                assert call_args[0][2] == "pie"  # chart_type
                
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
                print("‚úÖ –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏ –≤—Å–µ —â–µ –ø–æ–∫–∞–∑—É—é—Ç—å –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–∞–Ω–∏—Ö")
                
                return True
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —Å—Ç–æ–≤–ø—á–∞—Å—Ç–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")
    
    test1_result = await test_bar_chart_direct_period()
    test2_result = await test_pie_chart_unchanged()
    
    if test1_result and test2_result:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("üìä –°—Ç–æ–≤–ø—á–∞—Å—Ç—ñ –≥—Ä–∞—Ñ—ñ–∫–∏: –ø—Ä—è–º–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É")
        print("üç© –ö—Ä—É–≥–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏: –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –Ω–µ–∑–º—ñ–Ω–Ω–∞")
    else:
        print("\n‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏!")

if __name__ == "__main__":
    asyncio.run(main())
